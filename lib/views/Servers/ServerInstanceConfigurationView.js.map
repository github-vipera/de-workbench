{"version":3,"file":"ServerInstanceConfigurationView.js","sourceRoot":"","sources":["../../../src/views/Servers/ServerInstanceConfigurationView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { UIPane } from '../../ui-components/UIPane'\nimport { ServerManager, ServerProvider, ServerInstanceWrapper, ServerInstance,ServerInstanceConfigurator, ServerStatus } from  '../../DEWorkbench/services/ServerManager'\nimport { UIComponent, UIBaseComponent, UIExtComponent } from '../../ui-components/UIComponent'\nimport { Logger } from '../../logger/Logger'\nimport { UITreeItem, UITreeViewModel, UITreeViewSelectListener, UITreeView, findItemInTreeModel } from '../../ui-components/UITreeView'\nimport { UITabbedView, UITabbedViewItem, UITabbedViewTabType } from '../../ui-components/UITabbedView'\nimport { UILoggerComponent,LogLine,IFilterableModel } from '../../ui-components/UILoggerComponent'\nimport { UICommonsFactory, FormActionsOptions, FormActionType } from '../../ui-components/UICommonsFactory'\nimport { UINotifications } from '../../ui-components/UINotifications'\nimport { UIEditableLabel } from '../../ui-components/UIEditableLabel'\nimport { EventBus } from '../../DEWorkbench/EventBus'\n\n//const md5 = require('md5')\nconst _ = require('lodash')\n\nexport class ServerInstanceConfigurationView extends UIPane {\n\n  _serverInstance:ServerInstanceWrapper;\n  private _configCtrl : ServerInstanceConfigurationCtrl;\n  _overlayEl:HTMLElement;\n  _removed:boolean=false;\n\n  constructor(uri:string){\n    super(uri)\n  }\n\n  protected createUI():HTMLElement {\n    Logger.consoleLog(\"ServerInstanceConfigurationView creating for \",this.paneId, this.options);\n\n    this._serverInstance = this.options.userData.serverInstance;\n\n    this._configCtrl = new  ServerInstanceConfigurationCtrl(this._serverInstance)\n\n    this._overlayEl = createElement('div',{\n      className:'de-workbench-overlay de-workbench-server-overlay'\n    })\n    this.showOverlay(false)\n\n    let mainContainer = createElement('div',{\n      elements : [ this._configCtrl.element(), this._overlayEl ],\n      className: 'de-workbench-server-config-pane'\n    })\n\n    EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_NAME_CHANGED, (eventData)=>{\n      let instanceId:ServerInstanceWrapper = eventData[0];\n      // filter events only for this server\n      if (this._serverInstance && instanceId.instanceId===this._serverInstance.instanceId){\n        this.onInstanceRenamed();\n      }\n    });\n\n    EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_REMOVED, (eventData)=>{\n      let instanceId:string = eventData[0];\n      // filter events only for this server\n      if (this._serverInstance && instanceId===this._serverInstance.instanceId){\n        this._serverInstance = null;\n        this.onInstanceRemoved();\n      }\n    })\n\n    //change the title\n    this.updateTitle(this.options.userData.serverInstance.name);\n\n    return mainContainer;\n  }\n\n  protected showOverlay(show:boolean){\n    this._removed = true;\n    this._configCtrl.invalidate();\n    this._overlayEl.style.visibility = (show?'visible':'hidden')\n  }\n\n  protected onInstanceRemoved(){\n    this.showOverlay(true)\n  }\n\n  public didOpen(){\n    if (this.options.userData && this.options.userData.isNew){\n      if (this.options.userData.isNew){\n        this._configCtrl.startEditName()\n        this.options.userData.isNew = false;\n      }\n    }\n  }\n\n  protected onInstanceRenamed(){\n    this.updateTitle(this._serverInstance.name)\n  }\n\n  updateTitle(instanceName:string){\n    this.setTitle(\"Server [\" + instanceName +\"]\");\n  }\n\n}\n\nclass ServerInstanceConfigurationCtrl extends UIExtComponent {\n\n  _serverInstance:ServerInstanceWrapper;\n  _headerCtrl:HeaderCtrl;\n  _tabbedView: UITabbedView;\n  _confCtrl : ConfigContainerControl;\n  _removed:boolean=false;\n\n  constructor(serverInstance:ServerInstanceWrapper){\n    super();\n    this._serverInstance = serverInstance;\n    this.initUI();\n  }\n\n  protected initUI(){\n    this._headerCtrl = new HeaderCtrl(this._serverInstance)\n    this._headerCtrl.addEventListener('didActionClick',(action)=>{\n      alert(\"action:\" + action)\n    })\n\n    //this._logCtrl = new ServerLogView(this._serverInstance);\n    this._confCtrl = new ConfigContainerControl(this._serverInstance);\n    this._confCtrl.addEventListener('didConfigurationChange',(evt)=>{\n      Logger.consoleLog(\"TODO enable Save button and Revert Changes!\")\n    })\n    this._confCtrl.addEventListener('didSaveChange',(evt)=>{\n      Logger.consoleLog(\"TODO Save Changes!\")\n    })\n    this._confCtrl.addEventListener('didRevertChange',(evt)=>{\n      Logger.consoleLog(\"TODO Revert Changes!\")\n    })\n\n    this._tabbedView = new UITabbedView().setTabType(UITabbedViewTabType.Horizontal);\n    this._tabbedView.element().classList.add('de-workbench-server-config-tabbedview')\n    //this._tabbedView.addView(new UITabbedViewItem('log',       'Log',  this._logCtrl.element() ));\n    this._tabbedView.addView(new UITabbedViewItem('configuration',   'Configuration',  this._confCtrl.element()));\n\n    this.mainElement = createElement('div',{\n      elements : [ this._headerCtrl.element(), this._tabbedView.element() ],\n      className: 'de-workbench-server-config-maincontainer'\n    })\n  }\n\n  public invalidate(){\n    this._headerCtrl.invalidate();\n    this._confCtrl.invalidate();\n    this._removed;\n  }\n\n\n\n  public startEditName(){\n    this._headerCtrl.startEditName();\n  }\n\n  public destroy(){\n    super.destroy();\n  }\n}\n\nclass ConfigContainerControl extends UIExtComponent {\n\n  _serverInstance:ServerInstanceWrapper;\n  _configPanelElement:HTMLElement;\n  _configurator:ServerInstanceConfigurator;\n  _removed:boolean;\n\n  constructor(serverInstance:ServerInstanceWrapper){\n    super();\n    this._serverInstance = serverInstance;\n    this.initUI();\n  }\n\n  protected initUI(){\n    let savedConfiguration = this.getInstanceSettings().configuration;\n    // get the configurator instance\n    this._configurator = this._serverInstance.getConfigurator(savedConfiguration/*this._serverInstance.configuration*/);\n    // set the current configuration\n    this._configurator.applyConfiguration(savedConfiguration /*this._serverInstance.configuration*/)\n    // then get the configurator UI\n    this._configPanelElement = this._configurator.getConfigurationPane();\n\n    let actionButtonsOpt:FormActionsOptions = {\n      cancel : {\n        caption : 'Revert Changes'\n      },\n      commit : {\n        caption : 'Save Changes'\n      },\n      actionListener: (actionType:number)=>{\n        if (actionType===FormActionType.Cancel){\n          this.revertChanges()\n        } else if (actionType===FormActionType.Commit){\n          this.saveChanges()\n        }\n      }\n    }\n    let actionButtonsContainer = UICommonsFactory.createFormActions(actionButtonsOpt)\n\n    this.mainElement = createElement('div',{\n      elements: [ this._configPanelElement, actionButtonsContainer ],\n      className: 'de-workbench-server-config-confelm-cont'\n    })\n\n    //listen for changes\n    this._configurator.addEventListener('didConfigurationChange',(evt)=>{\n      this.fireConfigChanged()\n    })\n\n  }\n\n  protected getInstanceSettings(){\n    return ServerManager.getInstance().loadSettingsForServerInstance(this._serverInstance.instanceId)\n  }\n\n  protected revertChanges(){\n    this._configurator.revertChanges();\n    this.fireEvent(\"didRevertChange\", this)\n  }\n\n  protected saveChanges(){\n    let newConfig = this._configurator.getConfiguration()\n    //store new config into the global preferences\n    ServerManager.getInstance().storeInstanceConfiguration(this._serverInstance.instanceId, newConfig).then(()=>{\n      // then apply new config to the instance\n      this._serverInstance.configure(newConfig);\n      // store on configurator provider\n      this._configurator.applyConfiguration(newConfig)\n      // fire the event\n      this.fireEvent(\"didSaveChange\", this)\n      UINotifications.showInfo(\"Changes saved successfully.\")\n    }, (err)=>{\n      UINotifications.showError(\"Error saving changes: \" + err)\n    });\n  }\n\n  protected fireConfigChanged(){\n    this.fireEvent(\"didConfigurationChange\", this)\n  }\n\n  public invalidate(){\n    this._removed = true;\n  }\n\n\n}\n\nclass HeaderCtrl extends UIExtComponent {\n\n  public static get ActionStartServerInstance():string { return 'start' }\n  public static get ActionStopServerInstance():string { return 'stop' }\n\n  _serverInstance:ServerInstanceWrapper;\n  _startInstanceButton:HTMLElement;\n  _stopInstanceButton:HTMLElement;\n  _editableTitle: UIEditableLabel;\n  _status:HTMLElement;\n  _removed:boolean=false;\n\n  constructor(serverInstance:ServerInstanceWrapper){\n    super();\n    EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_STATUS_CHANGED, (eventData)=>{\n      let serverInstance:ServerInstanceWrapper = eventData[0];\n      // filter events only for this server\n      if (serverInstance.instanceId===this._serverInstance.instanceId){\n        this.onServerStatusChanged(serverInstance);\n      }\n    })\n    this._serverInstance = serverInstance;\n    this.initUI();\n  }\n\n  protected initUI(){\n    this._editableTitle = new UIEditableLabel({\n      caption:this._serverInstance.name,\n      className:  'de-workbench-server-config-header-instanceName text-highlight'\n    });\n    this._editableTitle.addEventListener('didValueChange',(evt)=>{\n      let newName = this._editableTitle.getCaption();\n      ServerManager.getInstance().changeInstanceName(this._serverInstance.instanceId, newName).then(()=>{\n        this.fireEvent(\"didNameChange\", this)\n        UINotifications.showInfo(\"Name changed successfully.\")\n      },(err)=>{\n        UINotifications.showError(\"Error changing name: \" + err)\n      })\n    })\n\n\n    let serverProviderType = createElement('span',{\n      elements: [ createText(this._serverInstance.provider) ],\n      className: 'de-workbench-server-config-header-providerName text-subtle'\n    })\n\n\n    this._startInstanceButton = createElement('button',{\n      elements: [ createText(\"Start\")],\n      className: 'btn btn-xs icon icon-playback-play'\n    })\n    atom[\"tooltips\"].add(this._startInstanceButton, {title:'Start this Server instance'})\n    this._startInstanceButton.addEventListener('click',()=>{\n      this.doStart()\n    })\n\n    this._stopInstanceButton = createElement('button',{\n      elements: [ createText(\"Stop\")],\n      className: 'btn btn-xs icon icon-primitive-square'\n    })\n    atom[\"tooltips\"].add(this._stopInstanceButton, {title:'Stop this Server instance'})\n    this._stopInstanceButton.addEventListener('click',()=>{\n      this.doStop();\n    })\n    let tabbedToolbar = createElement('div',{\n      elements: [\n        createElement('div', {\n          elements: [this._startInstanceButton, this._stopInstanceButton],\n          className: 'btn-group'\n        })\n      ], className: 'btn-toolbar de-workbench-server-config-header-toolbar'\n    });\n\n\n    this._status = createElement('span',{\n      elements: [ createText(\"Unknown Status\") ],\n      className: 'de-workbench-server-config-header-status'\n    })\n\n    let subCont = createElement('div',{\n      elements: [ serverProviderType, this._status ],\n      className: 'de-workbench-server-config-header-subcont'\n    })\n\n    this.mainElement = createElement('div',{\n      elements: [ this._editableTitle.element(),subCont,tabbedToolbar  ],\n      className: 'de-workbench-server-config-header-cont'\n    })\n\n    this.setStatus(this._serverInstance.status);\n  }\n\n  public startEditName(){\n    this._editableTitle.startEdit();\n  }\n\n  protected onServerStatusChanged(serverInstance:ServerInstanceWrapper){\n      this.setStatus(serverInstance.status)\n  }\n\n  //highlight-success\n  protected setStatus(status:ServerStatus){\n    if (status===ServerStatus.Running){\n      //highlight-success\n      this.cleanStatus();\n      this._status.classList.add('highlight-success')\n      this._status.innerText = \"Running\"\n    } else if (status===ServerStatus.Stopped){\n      //highlight\n      this.cleanStatus();\n      this._status.classList.add('highlight-error')\n      this._status.innerText = \"Not Running\"\n    } else if (status===ServerStatus.Starting){\n      this.cleanStatus();\n      this._status.classList.add('highlight-warning')\n      this._status.innerText = \"Starting\"\n    } else if (status===ServerStatus.Stopping){\n      this.cleanStatus();\n      this._status.classList.add('highlight-warning')\n      this._status.innerText = \"Stopping\"\n    } else {\n      this.cleanStatus();\n      this._status.classList.add('highlight')\n      this._status.innerText = \"Unknown Status\"\n    }\n  }\n\n  protected cleanStatus(){\n    this._status.classList.remove('highlight')\n    this._status.classList.remove('highlight-info')\n    this._status.classList.remove('highlight-warning')\n    this._status.classList.remove('highlight-success')\n    this._status.classList.remove('highlight-error')\n  }\n\n  public destroy(){\n    super.destroy();\n  }\n\n  protected doStart(){\n    if (this._serverInstance.status===ServerStatus.Stopped){\n      this._serverInstance.start();\n    }\n  }\n\n  protected doStop(){\n    if (this._serverInstance.status===ServerStatus.Running){\n      this._serverInstance.stop();\n    }\n  }\n\n  public invalidate(){\n    this._removed = true;\n  }\n\n}\n\nclass ServerLogView extends UIExtComponent {\n\n  _serverInstance:ServerInstanceWrapper;\n  _loggerComponent:UILoggerComponent;\n\n  constructor(serverInstance:ServerInstanceWrapper){\n    super();\n    this._serverInstance = serverInstance;\n    this.initUI();\n  }\n\n  protected initUI(){\n    this._loggerComponent = new UILoggerComponent(true);\n    this.mainElement = createElement('div',{\n      elements: [ this._loggerComponent.element() ],\n      className: 'de-workbench-server-config-logger-cont'\n    })\n  }\n\n}\n"]}