{"version":3,"file":"ServersView.js","sourceRoot":"","sources":["../../../src/views/Servers/ServersView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../../element/index';\n\nimport { EventBus } from '../../DEWorkbench/EventBus'\nimport { EventEmitter }  from 'events'\nimport { DEWorkbench } from '../../DEWorkbench/DEWorkbench'\nimport { ViewManager } from '../../DEWorkbench/ViewManager'\nimport { UIPane } from '../../ui-components/UIPane'\nimport { ServerManager, ServerProviderWrapper, ServerInstanceWrapper, ServerInstance, ServerStatus } from  '../../DEWorkbench/services/ServerManager'\nimport { UIComponent, UIBaseComponent } from '../../ui-components/UIComponent'\nimport { Logger } from '../../logger/Logger'\nimport { UITreeItem, UITreeViewModel, UITreeViewSelectListener, UITreeView, findItemInTreeModel } from '../../ui-components/UITreeView'\nimport { ServerInstanceConfigurationView } from './ServerInstanceConfigurationView'\nimport { UINotifications } from '../../ui-components/UINotifications'\nconst  { CompositeDisposable } = require('atom');\n\nconst md5 = require('md5')\nconst _ = require('lodash')\n\nexport class ServersView extends UIPane {\n\n  private treeModel:ServersTreeModel;\n  private treeView:UITreeView;\n  private toolbar:ServersToolbar;\n  private subscriptions:any;\n\n  constructor(uri:string){\n    super(uri, \"Servers\");\n  }\n\n  protected createUI():HTMLElement {\n    this.treeModel = new ServersTreeModel();\n\n    this.treeView = new UITreeView(this.treeModel);\n    this.treeView.addEventListener('didItemSelected',(nodeId, nodeItem)=>{\n      let nodeType = _.find(nodeItem.attributes, { 'name':'srvNodeType' })\n      Logger.consoleLog(\"Node clicked: \", nodeType)\n      this.updateToolbar(nodeType.value)\n    })\n    this.treeView.addEventListener('didItemDblClick',(nodeId, nodeItem)=>{\n      let nodeType = _.find(nodeItem.attributes, { 'name':'srvNodeType' })\n      Logger.consoleLog(\"Node dbl clicked: \", nodeType)\n      if (nodeType.value===\"serverInstance\"){\n        let nodeId = this.treeView.getCurrentSelectedItemId();\n        let nodeItem = <ServerInstanceItem>this.treeModel.getItemById(nodeId);\n        this.doConfigureInstance(nodeItem.serverInstance, false);\n      }\n    })\n\n    this.toolbar = new ServersToolbar();\n    this.toolbar.addEventListener('didActionClick', (action)=>{\n      this.doToolbarAction(action);\n    })\n\n    let el = createElement('de-workbench-servers-view', {\n        elements: [\n          this.toolbar.element(),\n          this.treeView.element()\n        ],\n        className: 'de-workbench-servers-view'\n    });\n\n    EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_NAME_CHANGED, (data)=>{\n      this.treeModel.reload();\n    })\n    EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_REMOVED, (data)=>{\n      this.treeModel.reload();\n    })\n\n\n    atom[\"contextMenu\"].add({'.de-workbench-servers-treeview-instance-item' : [{label: 'Start Server', command: 'dewb-menu-view-:start-server'}, {label: 'Stop Server', command: 'dewb-menu-view-:stop-server'}]})\n    // add commands\n    let commands = atom.commands.add('.de-workbench-servers-treeview-instance-item', {\n        'dewb-menu-view-:start-server': (evt) => this.doStartServer(evt),\n        'dewb-menu-view-:stop-server': (evt) => this.doStopServer(evt)\n      });\n    // add commands subs\n    this.subscriptions = new CompositeDisposable();\n    this.subscriptions.add(commands);\n\n    return el;\n  }\n\n  protected doStartServer(evt){\n    let targetElement:HTMLElement = evt.target;\n    let nodeId = undefined;\n    if (targetElement.classList.contains('de-workbench-servers-treeview-instance-item')){\n      nodeId = targetElement.getAttribute(\"treeitemId\")\n    } else if (targetElement.parentElement && targetElement.parentElement.classList.contains('de-workbench-servers-treeview-instance-item')) {\n      nodeId = targetElement.parentElement.getAttribute(\"treeitemId\")\n    }\n    if (nodeId){\n      let nodeItem = <ServerInstanceItem>this.treeModel.getItemById(nodeId);\n      if (nodeItem){\n        if (nodeItem.serverInstance){\n          if (nodeItem.serverInstance.status===ServerStatus.Stopped){\n            nodeItem.serverInstance.start();\n          }\n        }\n      } else{\n      }\n    }\n  }\n\n  protected doStopServer(evt){\n    let targetElement:HTMLElement = evt.target;\n    let nodeId = undefined;\n    if (targetElement.classList.contains('de-workbench-servers-treeview-instance-item')){\n      nodeId = targetElement.getAttribute(\"treeitemId\")\n    } else if (targetElement.parentElement && targetElement.parentElement.classList.contains('de-workbench-servers-treeview-instance-item')) {\n      nodeId = targetElement.parentElement.getAttribute(\"treeitemId\")\n    }\n    if (nodeId){\n      let nodeItem = <ServerInstanceItem>this.treeModel.getItemById(nodeId);\n      if (nodeItem){\n        if (nodeItem.serverInstance){\n          if (nodeItem.serverInstance.status===ServerStatus.Running){\n            nodeItem.serverInstance.stop();\n          }\n        }\n      } else{\n      }\n    }\n  }\n\n\n\n  protected updateToolbar(nodeType:string){\n      if (nodeType===\"root\"){\n        this.toolbar.enableActions([]);\n      } else if (nodeType===\"serverProvider\"){\n        this.toolbar.enableActions([ServersToolbar.ActionNewServerInstance]);\n      } else if (nodeType===\"serverInstance\"){\n        this.toolbar.enableActions([ServersToolbar.ActionStartServerInstance, ServersToolbar.ActionStopServerInstance, ServersToolbar.ActionRemoveServerInstance ]);\n      }\n  }\n\n  protected doToolbarAction(action:string){\n    let nodeId = this.treeView.getCurrentSelectedItemId();\n    let nodeItem = this.treeModel.getItemById(nodeId);\n    this.doToolbarActionForNode(action, nodeItem);\n  }\n\n  protected doToolbarActionForNode(action:string, nodeItem:UITreeItem){\n    if (action===ServersToolbar.ActionNewServerInstance){\n      this.createNewServerInstanceForNode(<ServerProviderItem>nodeItem);\n    }\n    else if (action===ServersToolbar.ActionRemoveServerInstance){\n      this.removeServerInstanceForNode(<ServerInstanceItem>nodeItem);\n    }\n    else if (action===ServersToolbar.ActionStartServerInstance){\n      this.startServerInstanceForNode(<ServerInstanceItem>nodeItem);\n    }\n    else if (action===ServersToolbar.ActionStopServerInstance){\n      this.stopServerInstanceForNode(<ServerInstanceItem>nodeItem);\n    }\n    else if (action===ServersToolbar.ActionConfigureServerInstance){\n      this.configureServerInstanceForNode(<ServerInstanceItem>nodeItem);\n    }\n  }\n\n  public destroy(){\n    this.toolbar.destroy();\n    this.treeView.destroy();\n    this.treeModel.destroy()\n    super.destroy();\n  }\n\n  private createNewServerInstanceForNode(nodeItem:ServerProviderItem){\n    if (nodeItem && nodeItem.serverProvider){\n      this.createNewServerProviderFor(nodeItem.serverProvider);\n    }\n  }\n\n  protected removeServerInstanceForNode(nodeItem:ServerInstanceItem){\n    if (nodeItem && nodeItem.serverInstance){\n      const selected = atom.confirm({\n          message: 'Delete Server Instance',\n          detailedMessage: 'Do you want to confirm the ' + nodeItem.serverInstance.name +' server instance deletion ?',\n          buttons: ['Yes, Delete it', 'Cancel']\n        });\n        if ((selected as any)==0){\n          this.removeServerInstance(nodeItem.serverInstance);\n        }\n    }\n  }\n\n  protected startServerInstanceForNode(nodeItem:ServerInstanceItem){\n    if (nodeItem && nodeItem.serverInstance && nodeItem.serverInstance.status===ServerStatus.Stopped){\n      nodeItem.serverInstance.start();\n    }\n  }\n\n  protected stopServerInstanceForNode(nodeItem:ServerInstanceItem){\n    if (nodeItem && nodeItem.serverInstance && nodeItem.serverInstance.status===ServerStatus.Running){\n      nodeItem.serverInstance.stop();\n    }\n  }\n\n  protected configureServerInstanceForNode(nodeItem:ServerInstanceItem){\n    this.doConfigureInstance(nodeItem.serverInstance, false);\n  }\n\n  protected createNewServerProviderFor(serverProvider:ServerProviderWrapper){\n    let newInstanceName = \"New Server\";\n    let instance = ServerManager.getInstance().createServerInstance(serverProvider.id, newInstanceName, {})\n    this.treeModel.reload();\n    this.doConfigureInstance(instance, true);\n  }\n\n  protected doConfigureInstance(serverInstance:ServerInstanceWrapper, isNew:boolean){\n    DEWorkbench.default.viewManager.openView(ViewManager.VIEW_SERVER_INSTANCE(serverInstance), { isNew: isNew })\n  }\n\n  protected removeServerInstance(serverInstance:ServerInstanceWrapper){\n      ServerManager.getInstance().removeServerInstance(serverInstance)\n  }\n\n  /*\n  getTitle():string {\n    return \"Servers\";\n  }\n  */\n\n}\n\nclass ServersToolbar extends UIBaseComponent {\n\n  public static get ActionNewServerInstance():string { return 'newInstance '}\n  public static get ActionRemoveServerInstance():string { return 'removeInstance '}\n  public static get ActionStartServerInstance():string { return 'start '}\n  public static get ActionStopServerInstance():string { return 'stop '}\n  public static get ActionConfigureServerInstance():string { return 'configure '}\n\n  protected events:EventEmitter;\n  protected addInstanceButton:HTMLElement;\n  protected removeInstanceButton:HTMLElement;\n  protected startInstanceButton:HTMLElement;\n  protected stopInstanceButton:HTMLElement;\n  protected configureInstanceButton:HTMLElement;\n\n  constructor(){\n    super();\n    this.events  = new EventEmitter();\n    this.initUI();\n  }\n\n  protected initUI(){\n\n    // tabbed toolbar\n    this.addInstanceButton = createElement('button',{\n      className: 'btn btn-xs icon icon-gist-new'\n    })\n    atom[\"tooltips\"].add(this.addInstanceButton, {title:'Create new Server instance'})\n    this.addInstanceButton.addEventListener('click', (evt)=>{\n      this.events.emit('didActionClick', ServersToolbar.ActionNewServerInstance)\n    })\n\n    this.removeInstanceButton = createElement('button',{\n      //elements : [ createText(\"Delete\")],\n      className: 'btn btn-xs icon icon-dash'\n    })\n    atom[\"tooltips\"].add(this.removeInstanceButton, {title:'Delete selected Server instance'})\n    this.removeInstanceButton.addEventListener('click',()=>{\n      this.events.emit('didActionClick', ServersToolbar.ActionRemoveServerInstance)\n    })\n\n    this.startInstanceButton = createElement('button',{\n      //elements : [ createText(\"Rename\")],\n      className: 'btn btn-xs icon icon-playback-play'\n    })\n    atom[\"tooltips\"].add(this.startInstanceButton, {title:'Start selected Server instance'})\n    this.startInstanceButton.addEventListener('click',()=>{\n      this.events.emit('didActionClick', ServersToolbar.ActionStartServerInstance)\n    })\n\n    this.stopInstanceButton = createElement('button',{\n      className: 'btn btn-xs icon icon-primitive-square'\n    })\n    atom[\"tooltips\"].add(this.stopInstanceButton, {title:'Stop selected Server instance'})\n    this.stopInstanceButton.addEventListener('click',()=>{\n      this.events.emit('didActionClick', ServersToolbar.ActionStopServerInstance)\n    })\n\n    this.configureInstanceButton = createElement('button',{\n      className: 'btn btn-xs icon icon-gear'\n    })\n    atom[\"tooltips\"].add(this.configureInstanceButton, {title:'Configure selected Server instance'})\n    this.configureInstanceButton.addEventListener('click',()=>{\n      this.events.emit('didActionClick', ServersToolbar.ActionConfigureServerInstance)\n    })\n\n    let tabbedToolbar = createElement('div',{\n      elements: [\n        createElement('div', {\n          elements: [this.addInstanceButton, this.removeInstanceButton, this.startInstanceButton, this.stopInstanceButton, this.configureInstanceButton],\n          className: 'btn-group'\n        })\n      ], className: 'btn-toolbar'\n    });\n    tabbedToolbar.style.float = \"right\"\n    // end tabbed toolbar\n\n    let toolbarContainer = createElement('div',{\n      elements: [ tabbedToolbar ],\n      className: 'de-workbench-servers-toolbar-container'\n    })\n\n    this.disableAllActions()\n\n    this.mainElement = toolbarContainer\n  }\n\n  public addEventListener(event:string, listener){\n    this.events.addListener(event, listener)\n  }\n\n  public removeEventListener(event:string, listener){\n    this.events.removeListener(event, listener)\n  }\n\n  public destroy(){\n    super.destroy();\n    this.events.removeAllListeners();\n    this.events = null;\n  }\n\n  public enableActions(actions:Array<string>){\n    this.disableAllActions();\n    for (var i=0;i<actions.length;i++){\n      this.enableButton(this.buttoForAction(actions[i]))\n    }\n  }\n\n  protected buttoForAction(action:string):HTMLElement{\n    if (action===ServersToolbar.ActionNewServerInstance){\n      return this.addInstanceButton;\n    } else if (action===ServersToolbar.ActionRemoveServerInstance){\n      return this.removeInstanceButton;\n    } else if (action===ServersToolbar.ActionStartServerInstance){\n      return this.startInstanceButton;\n    } else if (action===ServersToolbar.ActionStopServerInstance){\n      return this.stopInstanceButton;\n    }\n  }\n\n  protected disableAllActions(){\n    this.disableButton(this.addInstanceButton);\n    this.disableButton(this.removeInstanceButton);\n    this.disableButton(this.startInstanceButton);\n    this.disableButton(this.stopInstanceButton);\n  }\n\n  protected disableButton(button:HTMLElement){\n    button.setAttribute('disabled','')\n  }\n\n  protected enableButton(button:HTMLElement){\n    button.removeAttribute('disabled')\n  }\n\n}\n\nclass ServersTreeModel implements UITreeViewModel {\n\n  protected events:EventEmitter;\n\n  constructor(){\n      this.events = new EventEmitter();\n      this.reload();\n  }\n\n  public reload(){\n    let providers = ServerManager.getInstance().getProviders();\n    let providerItems = new Array<ServerProviderItem>();\n    for (var i=0;i<providers.length;i++){\n      let providerItem = new ServerProviderItem(providers[i], this)\n      providerItems.push(providerItem)\n    }\n\n    this.root = new ServerRootItem();\n    this.root.children = providerItems\n\n    this.events.emit(\"didModelChanged\");\n  }\n\n  root:UITreeItem;\n\n  //className?:string;\n\n  getItemById(id:string):UITreeItem {\n    return findItemInTreeModel(id, this)\n  }\n\n  addEventListener(event:string, listener){\n    this.events.addListener(event, listener)\n  }\n\n  removeEventListener(event:string, listener){\n    this.events.removeListener(event, listener)\n  }\n\n  destroy() {\n    this.events.removeAllListeners()\n    this.events = null;\n  }\n\n  public onItemChanged(item:UITreeItem){\n    this.events.emit(\"didModelChanged\");\n  }\n\n}\n\nclass ServerRootItem implements UITreeItem {\n\n  id:string=\"___servers\";\n  name:string=\"Servers\";\n  className:string=\"de-workbench-servers-treeview-root-item\";\n  icon:string=\"icon-globe\";\n  expanded:boolean=true;\n  //htmlElement?:HTMLElement;\n  children:Array<UITreeItem>;\n  //selected?:boolean;\n\n  attributes = [{\n    name: 'srvNodeType',\n    value:'root'\n  }];\n\n}\n\nclass ServerProviderItem implements UITreeItem {\n\n  serverProvider:ServerProviderWrapper;\n  id:string;\n  name:string;\n  className:string=\"de-workbench-servers-treeview-provider-item\";\n  icon:string=\"icon-database\";\n  expanded:boolean=true;\n  children?:Array<UITreeItem>;\n  listener:any;\n\n  attributes = [{\n    name: 'srvNodeType',\n    value:'serverProvider'\n  }];\n\n\n  constructor(serverProvider:ServerProviderWrapper, listener){\n      this.listener = listener\n      this.serverProvider = serverProvider;\n      this.name = this.serverProvider.getProviderName();\n      this.id = this.toIdFromName(this.name);\n      this.expanded = true;\n      this.children = [];\n      let instances = ServerManager.getInstance().getInstancesForProvider(this.serverProvider.getProviderName())\n      for (var i=0;i<instances.length;i++){\n        this.children.push( new ServerInstanceItem(instances[i], this) )\n      }\n      Logger.consoleLog(\"children length:\", this.children.length)\n  }\n\n  protected toIdFromName(name:string):string{\n    let id = md5(name)\n    return id;\n  }\n\n  public onItemChanged(item:UITreeItem){\n    this.listener.onItemChanged(item)\n  }\n\n}\n\nexport class ServerInstanceItem implements UITreeItem {\n\n  serverInstance:ServerInstanceWrapper;\n  id:string;\n  name:string;\n  className:string=\"de-workbench-servers-treeview-instance-item\";\n  icon:string=\"\";\n  expanded:boolean=true;\n  listener:any;\n\n  public attributes = [{\n    name: 'srvNodeType',\n    value:'serverInstance'\n  }];\n\n  constructor(serverInstance:ServerInstanceWrapper, listener){\n      this.listener = listener\n      this.serverInstance = serverInstance;\n      this.name = this.serverInstance.name;\n      this.id = serverInstance.instanceId;\n      this.expanded = true;\n\n      EventBus.getInstance().subscribe(ServerManager.EVT_SERVER_INSTANCE_STATUS_CHANGED, (eventData)=>{\n        let serverInstance:ServerInstanceWrapper = eventData[0];\n        // filter events only for this server\n        if (serverInstance.instanceId===this.serverInstance.instanceId){\n          this.onServerStatusChanged(true);\n        }\n      })\n\n      this.onServerStatusChanged(false);\n  }\n\n  protected onServerStatusChanged(notify:boolean){\n    this.className =\"de-workbench-servers-treeview-instance-item\";\n\n    if (this.serverInstance.status===ServerStatus.Running){\n      this.icon = \"icon-pulse\"\n      this.className=this.className + \" instance-running\";\n    }\n    else if (this.serverInstance.status===ServerStatus.Stopped){\n      this.icon = \"icon-primitive-square\"\n      this.className=this.className + \" instance-stopped\";\n    }\n    else if (this.serverInstance.status===ServerStatus.Starting){\n      this.icon = \"icon-rocket\"\n      this.className=this.className + \" instance-starting\";\n    }\n    else if (this.serverInstance.status===ServerStatus.Stopping){\n      this.icon = \"icon-primitive-dot\"\n      this.className=this.className + \" instance-stopping\";\n    }\n    if (notify){\n      this.listener.onItemChanged(this)\n    }\n  }\n\n  protected toIdFromName(name:string):string{\n    let id = md5(name)\n    return id;\n  }\n\n}\n"]}