{"version":3,"file":"FooComponent.jsx","sourceRoot":"","sources":["../../../src/views/ProjectSettings/FooComponent.tsx"],"names":[],"mappings":"AAAA,WAAW,CAAA;;;;;;;;;AAEX,oBAAoB;AAEpB,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,MAAM,CAAC,GAAG,OAAO,CAAE,QAAQ,CAAC,CAAC;AAC7B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAE5B,MAAM;IAEJ,yEAAyE;IACxE,YAAa,KAAM,EAAE,QAAS;QAC5B,KAAK,CAAC,IAAI,CAAC,CAAA;QACX,wCAAwC;QACxC,+BAA+B;QAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACvB,CAAC;IAED,4EAA4E;IAC5E,8EAA8E;IAC9E,0EAA0E;IAC1E,4EAA4E;IAC5E,MAAM;QACJ,MAAM,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,CAAA;IAChC,CAAC;IAED,mEAAmE;IACnE,MAAM,CAAE,KAAK,EAAE,QAAQ;QACrB,sCAAsC;QACtC,gEAAgE;QAChE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC;IAED,8EAA8E;IACxE,OAAO;;YACX,uEAAuE;YACvE,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACxB,6CAA6C;QAC/C,CAAC;KAAA;CAEH","sourcesContent":["'use babel'\n\n/** @jsx etch.dom */\n\nconst _ = require(\"lodash\");\nconst $ = require ('JQuery');\nconst etch = require('etch')\n \nexport class FooComponent {\n\n  // Required: Define an ordinary constructor to initialize your component.\n   constructor (props?, children?) {\n     alert(etch)\n     // perform custom initialization here...\n     // then call `etch.initialize`:\n     etch.initialize(this)\n   }\n\n   // Required: The `render` method returns a virtual DOM tree representing the\n   // current state of the component. Etch will call `render` to build and update\n   // the component's associated DOM element. Babel is instructed to call the\n   // `etch.dom` helper in compiled JSX expressions by the `@jsx` pragma above.\n   render () {\n     return <div>Hello World!</div>\n   }\n\n   // Required: Update the component with new properties and children.\n   update (props, children) {\n     // perform custom update logic here...\n     // then call `etch.update`, which is async and returns a promise\n     return etch.update(this)\n   }\n\n   // Optional: Destroy the component. Async/await syntax is pretty but optional.\n   async destroy () {\n     // call etch.destroy to remove the element and destroy child components\n     await etch.destroy(this)\n     // then perform custom teardown logic here...\n   }\n\n}\n"]}