{"version":3,"file":"InstalledPluginsView.js","sourceRoot":"","sources":["../../../../src/views/ProjectSettings/plugins/InstalledPluginsView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../../../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { ProjectManager } from '../../../DEWorkbench/ProjectManager'\nimport { Cordova, CordovaPlatform, CordovaPlugin } from '../../../cordova/Cordova'\nimport { Logger } from '../../../logger/Logger'\nimport { UIPluginsList, UIPluginMetaButtons } from '../../../ui-components/UIPluginsList'\nimport { UIStackedView } from '../../../ui-components/UIStackedView'\nimport { UIComponent, UIBaseComponent } from '../../../ui-components/UIComponent'\nimport { UILineLoader } from '../../../ui-components/UILineLoader'\nimport { UINotifications } from '../../../ui-components/UINotifications'\nimport { EventBus } from '../../../DEWorkbench/EventBus'\n\nconst chokidar = require('chokidar');\nconst path = require('path');\n\nexport class InstalledPluginsView  extends UIBaseComponent {\n\n  private pluginList: UIPluginsList;\n  private stackedPage: UIStackedView;\n  private lineLoader:UILineLoader;\n  private currentProjectRoot:string;\n  private fsWatcher:any;\n\n  constructor(){\n    super();\n\n    this.currentProjectRoot = ProjectManager.getInstance().getCurrentProjectPath();\n\n    // Initialize watcher.\n    this.fsWatcher = chokidar.watch(path.join(this.currentProjectRoot, 'plugins'), {\n      ignored: /(^|[\\/\\\\])\\../,\n      persistent: true\n    });\n    this.fsWatcher\n      .on('addDir', (path) => { this.reload()})\n      .on('unlinkDir', (path) => { this.reload()})\n\n    this.buildUI();\n\n\n    // Subscribe interesting events\n    EventBus.getInstance().subscribe(EventBus.EVT_PLUGIN_ADDED, (eventData)=>{\n      // the first item in eventData is the project root\n      if (eventData[0]===this.currentProjectRoot){\n        this.reload()\n      }\n    });\n    EventBus.getInstance().subscribe(EventBus.EVT_PLUGIN_REMOVED, (eventData)=>{\n      // the first item in eventData is the project root\n      if (eventData[0]===this.currentProjectRoot){\n        this.reload()\n      }\n    });\n    // end event bus subscription\n\n    this.reload();\n  }\n\n  private buildUI(){\n    this.lineLoader = new UILineLoader()\n\n    this.pluginList = new UIPluginsList()\n                            .setLastUpdateVisible(false)\n                            .setRatingVisible(false)\n                            .setPlatformsVisible(false)\n      .addEventListener('didActionRequired',(pluginInfo, actionType)=>{\n        if (actionType===UIPluginMetaButtons.BTN_TYPE_INSTALL){\n          // not possible to do this in this view !!!\n        }\n        else if (actionType===UIPluginMetaButtons.BTN_TYPE_UNINSTALL){\n          this.doUninstallPlugin(pluginInfo)\n        } else {\n          Logger.getInstance().warn(\"Action unknwon \" + actionType);\n        }\n      });\n\n\n\n    let listContainer = createElement('div',{\n        elements : [\n          this.pluginList.element(),\n          this.lineLoader.element()\n        ]\n    })\n\n    this.stackedPage = new UIStackedView({\n                          titleIconClass: 'icon-plug'\n                        })\n                        .setTitle('Installed Plugins')\n                        .setInnerView(listContainer);\n\n    this.mainElement = this.stackedPage.element();\n\n    this.showProgress(false);\n  }\n\n  /*\n   * Show/Hide progress bar\n   */\n  private showProgress(show:boolean){\n    this.lineLoader.setOnLoading(show);\n  }\n\n  private doUninstallPlugin(pluginInfo){\n    this.showProgress(true)\n    this.pluginList.setPluginUInstallPending(pluginInfo, true);\n    ProjectManager.getInstance().cordova.removePlugin(this.currentProjectRoot, pluginInfo).then(()=>{\n      UINotifications.showInfo(\"Plugin \"+pluginInfo.name +\" uninstalled successfully.\")\n      this.showProgress(false)\n      this.pluginList.setPluginUInstallPending(pluginInfo, false);\n    }).catch(()=>{\n      UINotifications.showError(\"Error uninstalling plugin \"+pluginInfo.name +\". See the log for more details.\")\n      this.showProgress(false)\n      this.pluginList.setPluginUInstallPending(pluginInfo, false);\n    })\n  }\n\n  public reload(){\n    ProjectManager.getInstance().cordova.getInstalledPlugins(this.currentProjectRoot).then((installedPlugins:Array<CordovaPlugin>)=>{\n      this.pluginList.setPlugins(installedPlugins);\n    });\n  }\n\n  public destroy () {\n    this.fsWatcher.close();\n    super.destroy();\n  }\n\n}\n"]}