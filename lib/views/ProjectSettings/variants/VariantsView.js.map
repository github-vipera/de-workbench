{"version":3,"file":"VariantsView.js","sourceRoot":"","sources":["../../../../src/views/ProjectSettings/variants/VariantsView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEV;;;;GAIG;AAEJ,OAAO,EAEN,aAAa,EAQb,MAAM,wBAAwB,CAAC;AAIhC,OAAO,EAAE,aAAa,EAAE,MAAM,sCAAsC,CAAA;AACpE,OAAO,EAAe,eAAe,EAAE,MAAM,oCAAoC,CAAA;AAEjF,OAAO,EAAE,cAAc,EAAE,MAAM,qCAAqC,CAAA;AAIpE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AAEzD,MAAM,mBAAqB,SAAQ,eAAe;IAQhD,8BAA8B;IAC9B,wCAAwC;IAExC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEO,OAAO;QACb,IAAI,CAAC,kBAAkB,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC,qBAAqB,EAAE,CAAC;QAE/E,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAE1E,IAAI,aAAa,GAAG,aAAa,CAAC,KAAK,EAAC;YACtC,QAAQ,EAAE,CAAE,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAE;SAChD,CAAC,CAAC;QACH,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAA;QAElC,IAAI,CAAC,WAAW,GAAG,IAAI,aAAa,CAAC;YACf,cAAc,EAAE,eAAe;SAChC,CAAC;aACD,QAAQ,CAAC,gBAAgB,CAAC;aAC1B,YAAY,CAAC,aAAa,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAEhD,CAAC;CAYF","sourcesContent":["'use babel'\n\n /*!\n  * Dynamic Engine Workbench\n  * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n  * MIT Licensed\n  */\n\nimport {\n createText,\n createElement,\n insertElement,\n createGroupButtons,\n createButton,\n createIcon,\n createIconFromPath,\n attachEventFromObject,\n createTextEditor\n} from '../../../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { Logger } from '../../../logger/Logger'\nimport { UIStackedView } from '../../../ui-components/UIStackedView'\nimport { UIComponent, UIBaseComponent } from '../../../ui-components/UIComponent'\nimport { UITabbedView, UITabbedViewItem, UITabbedViewTabType } from '../../../ui-components/UITabbedView'\nimport { ProjectManager } from '../../../DEWorkbench/ProjectManager'\nimport { UIListView, UIListViewModel } from '../../../ui-components/UIListView'\nimport { UIExtendedListView, UIExtendedListViewModel, UIExtendedListViewValidationResult } from '../../../ui-components/UIExtendedListView'\nimport { VariantsGridCtrl } from './VariantsGridCtrl'\nimport { VariantsEditorCtrl } from './VariantsEditorCtrl'\n\nexport class VariantsView  extends UIBaseComponent {\n\n  private stackedPage: UIStackedView;\n  //private tabbedView: UITabbedView;\n  private currentProjectRoot:string;\n\n  private variantsEditorCtrl:VariantsEditorCtrl;\n\n  //private listView:UIListView;\n  //private listViewModel:UIListViewModel;\n\n  constructor(){\n    super();\n    this.buildUI();\n  }\n\n  private buildUI(){\n    this.currentProjectRoot = ProjectManager.getInstance().getCurrentProjectPath();\n\n    this.variantsEditorCtrl = new VariantsEditorCtrl(this.currentProjectRoot);\n\n    let mainContainer = createElement('div',{\n      elements: [ this.variantsEditorCtrl.element() ]\n    });\n    mainContainer.style.height = \"80%\"\n\n    this.stackedPage = new UIStackedView({\n                          titleIconClass: 'icon-versions'\n                        })\n                        .setTitle('Build Variants')\n                        .setInnerView(mainContainer);\n    this.mainElement = this.stackedPage.element();\n\n  }\n\n  /**\n  private createVariantView(variantName:string):UITabbedViewItem {\n    let variantsCtrl = new VariantsGridCtrl();\n    variantsCtrl.element().style.width = \"100%\"\n    let variantView = new UITabbedViewItem(variantName, variantName, variantsCtrl.element())\n    return variantView;\n  }\n  **/\n\n\n}\n\n/**\nclass EditableListViewModel implements UIExtendedListViewModel {\n\n  constructor(){}\n\n  hasHeader():boolean{\n    return true\n  }\n\n  getRowCount():number {\n    return 3\n  }\n\n  getColCount():number {\n    return 2\n  }\n\n  getValueAt(row:number, col:number):any {\n    return \"\" + row +\" \" + col\n  }\n\n  getClassNameAt(row:number, col:number):string{\n    return \"\"\n  }\n\n  getColumnName(col:number):string {\n    if (col===0){\n      return \"Property\"\n    } else if (col===1){\n      return \"Value\"\n    }\n    return col+\"?\"\n  }\n\n  getClassName():string {\n    return \"\"\n  }\n\n  isCellEditable(row:number, col:number):boolean {\n    if (col==1){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  onValueChanged(row:number, col:number, value:any) {\n\n  }\n\n  onEditValidation(row:number, col:number, value:any):UIExtendedListViewValidationResult {\n    return {\n      validationStatus:false,\n      validationErrorMessage:\"Only numbers are allowed\",\n      showValidationError:true\n    };\n  }\n\n}\n**/\n"]}