{"version":3,"file":"NewProjectProgressPanel.js","sourceRoot":"","sources":["../../../src/views/NewProject/NewProjectProgressPanel.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAQV,OAAO,EAIL,aAAa,EACb,aAAa,EAQd,MAAM,qBAAqB,CAAC;AAK9B,OAAO,EAAE,eAAe,EAAe,MAAM,iCAAiC,CAAA;AAE9E,OAAO,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAA;AACzE,OAAO,EAAE,MAAM,EAA0B,MAAM,qBAAqB,CAAA;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,kCAAkC,CAAA;AAG/D,MAAM,8BAA+B,SAAQ,eAAe;IAM1D;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAES,MAAM;QAEd,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC,KAAK,EAAC;YACzC,SAAS,EAAG,qCAAqC;SACpD,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,GAAG,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAA;QACrF,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAA;QAYrE,IAAI,WAAW,GAAG,IAAI,YAAY,EAAE,CAAC;QACrC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,qBAAqB,GAAG,aAAa,CAAC,KAAK,EAAC;YAC9C,QAAQ,EAAE;gBACR,WAAW,CAAC,OAAO,EAAE;aACtB;YACD,SAAS,EAAE,oDAAoD;SAChE,CAAC,CAAA;QACF,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,qBAAqB,CAAC,CAAC;QAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAG1C,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEO,cAAc;QACpB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,MAAM,CAAC,WAAW,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACjE,CAAC;IAED,SAAS,CAAC,KAAc,EAAE,GAAU;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC;YAChB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAC,KAAK,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAGM,OAAO;QACZ,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAC/B,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAA;IAC5C,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAA;IACzC,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createLabel,\n   createBlock,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor,\n   createControlBlock\n } from '../../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { UIButtonGroup, UIButtonConfig, UIButtonGroupMode } from '../../ui-components/UIButtonGroup'\nimport { UITextEditorExtended } from '../../ui-components/UITextEditorExtended'\nimport { UIBaseComponent, UIComponent } from '../../ui-components/UIComponent'\nimport { UISelect, UISelectItem } from '../../ui-components/UISelect'\nimport { UILoggerComponent } from '../../ui-components/UILoggerComponent'\nimport { Logger,LoggerListener ,LogLevel} from '../../logger/Logger'\nimport { UILineLoader } from '../../ui-components/UILineLoader'\n\n\nexport class NewProjectProgressPanel extends UIBaseComponent implements LoggerListener {\n\n  private logOverlayElement:HTMLElement;\n  private loggerComponent: UILoggerComponent;\n  private started:boolean;\n\n  constructor(){\n    super();\n    this.initUI();\n  }\n\n  protected initUI(){\n    // Create Logger Overlay\n    this.logOverlayElement = createElement('div',{\n        className : 'de-workbench-newproj-logger-overlay'\n    });\n\n    this.loggerComponent = new UILoggerComponent(false);\n    this.loggerComponent.element().classList.add('de-workbench-newproj-logger-component')\n    insertElement(this.logOverlayElement, this.loggerComponent.element())\n\n    /*let progressLineContainer = createElement('div',{\n      elements: [\n        createElement('progress',{\n          className: 'de-workbench-newproj-logger-progressline'\n        })\n      ],\n      className: 'de-workbench-newproj-logger-progressline-container'\n    })\n    insertElement(this.logOverlayElement, progressLineContainer)*/\n\n    let progressInd = new UILineLoader();\n    progressInd.setOnLoading(true);\n\n    let progressLineContainer = createElement('div',{\n      elements: [\n        progressInd.element()\n      ],\n      className: 'de-workbench-newproj-logger-progressline-container'\n    })\n    insertElement(this.logOverlayElement, progressLineContainer);\n    this.mainElement = this.logOverlayElement;\n    //private loggerComponent: UILoggerComponent;\n\n    this.bindWithLogger();\n  }\n\n  private bindWithLogger(){\n    console.log(\"bindWithLogger\");\n    Logger.getInstance().addLoggingListener(this);\n    Logger.getInstance().debug(\"LoggerView -> bind with log done\");\n  }\n\n  onLogging(level:LogLevel, msg:string){\n    if (this.started){\n      this.loggerComponent.addLog(msg,level);\n    }\n  }\n\n\n  public destroy(){\n    this.loggerComponent.destroy();\n    super.destroy();\n  }\n\n  public show(){\n    this.mainElement.style.display = \"initial\"\n  }\n\n  public hide(){\n    this.mainElement.style.display = \"none\"\n  }\n\n  public startLog(){\n    this.started = true;\n  }\n\n  public stopLog(){\n    this.started = false;\n  }\n\n}\n"]}