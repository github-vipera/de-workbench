{"version":3,"file":"LoggerView.js","sourceRoot":"","sources":["../../src/views/LoggerView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAQV,OAAO,EAEL,aAAa,EACb,aAAa,EAOd,MAAM,kBAAkB,CAAC;AAO3B,OAAO,EAAE,MAAM,EAA0B,MAAM,kBAAkB,CAAA;AACjE,OAAO,EAAE,iBAAiB,EAA4B,gBAAgB,EAAE,MAAM,oCAAoC,CAAA;AAClH,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAA;AAEhD,MAAM,iBAAkB,SAAQ,MAAM;IAKpC,YAAa,GAAU;QACrB,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAA;IACxB,CAAC;IAKS,QAAQ;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAC,EAAE,CAAC,CAAC;QAE1E,IAAI,CAAC,eAAe,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAGjE,IAAI,OAAO,GAAG,aAAa,CAAC,KAAK,EAAC;YAChC,QAAQ,EAAG,EACV;SACF,CAAC,CAAC;QACH,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAKD,KAAK;IAEL,CAAC;IAED,OAAO;IAGP,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { CordovaUtils } from '../cordova/CordovaUtils'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { Cordova, CordovaPlatform, CordovaPlugin } from '../cordova/Cordova'\nimport { UIListView, UIListViewModel } from '../ui-components/UIListView'\nimport { Logger,LoggerListener ,LogLevel} from '../logger/Logger'\nimport { UILoggerComponent,LogLine, IFilterableModel ,FileTailLogModel } from '../ui-components/UILoggerComponent'\nimport { UIPane } from '../ui-components/UIPane'\n\nexport class LoggerView extends UIPane {\n\n  private logModel:FileTailLogModel;\n  private loggerComponent:UILoggerComponent;\n\n  constructor (uri:string) {\n    super(uri, \"Log View\")\n  }\n\n  /**\n   * Initialize the UI\n   */\n  protected createUI() {\n    this.logModel = new FileTailLogModel(Logger.getLoggerBufferFilePath(),10);\n\n    this.loggerComponent = new UILoggerComponent(true,this.logModel);\n\n    // Create the main UI\n    let element = createElement('div',{\n      elements : [\n      ]\n    });\n    insertElement(element, this.loggerComponent.element());\n\n    return element;\n  }\n\n  /**\n   * close this view\n   */\n  close () {\n    //console.log(\"Logger view close....\")\n  }\n\n  destroy(){\n    //console.log(\"Logger view destroy....\")\n    //this.logModel.destroy();\n  }\n\n}\n"]}