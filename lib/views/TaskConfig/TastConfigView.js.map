{"version":3,"file":"TastConfigView.js","sourceRoot":"","sources":["../../../src/views/TaskConfig/TastConfigView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AACX,OAAO,EAGL,aAAa,EAQb,wBAAwB,EAEzB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAA;AAE7D,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAA;AACpG,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAGhD,MAAM,qBAAsB,SAAQ,WAAW;IAK7C,YAAY,KAAa,EAAE,MAAoB;QAC7C,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC;aAC/D,SAAS,CAAC,IAAI,cAAc,EAAE;aAC5B,KAAK,CAAC,QAAQ,CAAC;aACf,UAAU,CAAC,QAAQ,CAAC;aACpB,gBAAgB,CAAC,GAAG,EAAE;YACrB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC,CAAC,CAAC;aACJ,SAAS,CAAC,IAAI,cAAc,EAAE;aAC5B,KAAK,CAAC,OAAO,CAAC;aACd,UAAU,CAAC,KAAK,CAAC;aACjB,UAAU,CAAC,OAAO,CAAC;aACnB,gBAAgB,CAAC,GAAG,EAAE;YACrB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;aACJ,SAAS,CAAC,IAAI,cAAc,EAAE;aAC5B,KAAK,CAAC,KAAK,CAAC;aACZ,UAAU,CAAC,KAAK,CAAC;aACjB,aAAa,CAAC,SAAS,CAAC;aACxB,UAAU,CAAC,KAAK,CAAC;aACjB,gBAAgB,CAAC,GAAG,EAAE;YACrB,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC,CAAA;QACP,IAAI,kBAAkB,GAAG,wBAAwB,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;QAChF,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IACzD,CAAC;IAGO,WAAW;QACjB,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAEO,SAAS;QACf,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,KAAK;QACH,KAAK,CAAC,IAAI,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,GAAG,EAAC,EAAE;YACxD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAA;QACF,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU,CAAC,OAA2B;QACpC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,cAAc,CAAC,GAAO;QACpB,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;CAIF","sourcesContent":["'use babel'\nimport {\n  createText,\n  createElement,\n  insertElement,\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  attachEventFromObject,\n  createTextEditor,\n  createSelect,\n  createModalActionButtons,\n  createOption\n} from '../../element/index';\nimport { UIModalView } from '../../ui-components/UIModalView'\nimport { UIComponent, UIBaseComponent } from '../../ui-components/UIComponent'\nimport { UIButtonGroup, UIButtonGroupMode, UIButtonConfig } from '../../ui-components/UIButtonGroup'\nimport { TaskViewPanel } from './TaskViewPanel';\nimport { EventEmitter } from 'events';\nimport { CordovaProjectInfo } from '../../cordova/Cordova';\nexport class TaskConfigView extends UIModalView {\n  taskPanel: TaskViewPanel;\n  events: EventEmitter;\n  actionButtons: UIButtonGroup;\n\n  constructor(title: string, events: EventEmitter) {\n    super(title);\n    this.events = events;\n  }\n\n  addFooter() {\n    this.actionButtons = new UIButtonGroup(UIButtonGroupMode.Standard)\n      .addButton(new UIButtonConfig()\n        .setId('cancel')\n        .setCaption('Cancel')\n        .setClickListener(() => {\n          this.close();\n        }))\n      .addButton(new UIButtonConfig()\n        .setId('apply')\n        .setEnabled(false)\n        .setCaption('Apply')\n        .setClickListener(() => {\n          this.handleApply();\n        }))\n      .addButton(new UIButtonConfig()\n        .setId('run')\n        .setEnabled(false)\n        .setButtonType('success')\n        .setCaption('Run')\n        .setClickListener(() => {\n          this.handleRun();\n        }))\n    let modalActionButtons = createModalActionButtons(this.actionButtons.element());\n    insertElement(this.modalContainer, modalActionButtons);\n  }\n\n\n  private handleApply(){\n    this.taskPanel.saveAllConfiguration();\n    this.events.emit('didStoreTasks',this.taskPanel.getConfiguration());\n    this.close();\n  }\n\n  private handleRun(){\n    let taskConfig = this.taskPanel.getConfiguration();\n    this.events.emit(\"didRunTask\", taskConfig);\n    this.close();\n  }\n\n  close() {\n    super.hide();\n    this.events.removeAllListeners('didAddTask');\n    this.events.removeAllListeners('didRemoveTask');\n    this.events.removeAllListeners('didChangeName');\n    this.destroy();\n  }\n\n  addContent(): void {\n    this.taskPanel = new TaskViewPanel();\n    this.taskPanel.addEventListener('didTaskSelected', (cfg)=>{\n      this.onTaskSelected(cfg);\n    })\n    insertElement(this.modalContainer, this.taskPanel.element());\n  }\n\n  setProject(project: CordovaProjectInfo) {\n    this.taskPanel.setProject(project);\n  }\n\n  onTaskSelected(cfg:any){\n    this.actionButtons.setButtonEnabled('run', true);\n    this.actionButtons.setButtonEnabled('apply', true);\n  }\n\n  \n\n}\n"]}