/// <reference types="node" />
import { UIBaseComponent } from '../../ui-components/UIComponent';
import { CordovaTaskConfiguration } from '../../cordova/CordovaTasks';
import { CordovaProjectInfo } from '../../cordova/Cordova';
import { EventEmitter } from 'events';
export declare class TaskViewContentPanel extends UIBaseComponent {
    private taskConfig;
    private projectInfo;
    private taskNameEl;
    private deviceManager;
    private variantManager;
    private platformSelect;
    private platformSelectListener;
    private deviceSelect;
    private variantSelect;
    private npmScriptsSelect;
    private deviceLineLoader;
    private variantsLineLoader;
    private isReleaseEl;
    private evtEmitter;
    private tabbedView;
    private taskViewEnvironmentTab;
    private deviceRequestId;
    constructor(evtEmitter: EventEmitter);
    private initUI();
    private initTabView();
    private initGeneralTabUI();
    private initEnvironmentTabUI();
    private createTaskNameEl(panelContainer);
    private createPlatformSelect(panelContainer);
    private createVariantSelect(panelContainer);
    private createNodeTaskSelect(panelContainer);
    private createDeviceSelect(panelContainer);
    private createReleaseCheckbox(panelContainer);
    private updateTaskName();
    private updatePlatforms(selected?);
    private updateNodeScripts(def?);
    private generateNewDeviceRid();
    private isOldDeviceRequest(rid);
    private updateDevices(platform, def?);
    private updateVariants(def?);
    private createRowId(elementId);
    private createFormRow(text, element, rowId?);
    contextualize(taskConfig: CordovaTaskConfiguration, projectInfo: CordovaProjectInfo): void;
    private setAllTabsVisibility(visible);
    private setRowVisible(rowId, visible);
    private setElementVisible(el, visible);
    private contextualizeImpl();
    private applyConstraintsToView(constraints);
    resetContext(): void;
    private getSelectedPlatform();
    private getSelectedDevice();
    private getSelectedVariantName();
    private getSelectedNpmScript();
    getCurrentConfiguration(): CordovaTaskConfiguration;
}
