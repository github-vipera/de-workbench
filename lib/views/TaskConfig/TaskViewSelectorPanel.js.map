{"version":3,"file":"TaskViewSelectorPanel.js","sourceRoot":"","sources":["../../../src/views/TaskConfig/TaskViewSelectorPanel.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport {\n  createText,\n  createElement,\n  insertElement,\n  createButton,\n  createIcon,\n  attachEventFromObject,\n  createSelect,\n  createInput\n} from '../../element/index';\n\nimport { UIBaseComponent } from '../../ui-components/UIComponent'\nimport { CordovaTaskConfiguration, CordovaTask } from '../../cordova/CordovaTasks'\nimport { UITreeViewModel, UITreeItem, UITreeView,UITreeViewSelectListener,findItemInTreeModel } from '../../ui-components/UITreeView'\nimport { map, filter, reject, find } from 'lodash'\nimport { EventEmitter }  from 'events'\nimport { Logger } from  '../../logger/Logger'\nconst StringHash = require('string-hash')\n\nexport class TaskViewSelectorPanel extends UIBaseComponent implements UITreeViewSelectListener{\n  private treeModel:UITreeViewModel;\n  private treeView:UITreeView;\n  private taskSelectionListener:(itemId:string) => void\n  private cdvTasks:Array<CordovaTaskConfiguration>\n  private evtEmitter:EventEmitter;\n  constructor(evtEmitter:EventEmitter){\n    super();\n    this.evtEmitter=evtEmitter;\n    this.initUI();\n  }\n\n  buildTreeModel(cvdTasks:Array<CordovaTaskConfiguration>):void{\n    let customTaskNode = this.createCustomTaskNode(filter(cvdTasks,(item) => {\n      return item.constraints.isCustom;\n    }));\n    let cvdTaskNode = this.createCdvTaskNode(reject(cvdTasks,(item) => {\n      return item.constraints.isCustom;\n    }));\n    let root:UITreeItem = {\n      id : 'root',\n      name: 'task',\n      expanded : true,\n      children: [\n          cvdTaskNode,\n          customTaskNode\n      ]\n    };\n    this.treeModel = {\n      root: root,\n      getItemById:(id:string)=>{ return findItemInTreeModel(id, this.treeModel) },\n      addEventListener:(event:string,listener)=>{},\n      removeEventListener:(event:string,listener)=>{},\n      destroy:()=>{}\n    };\n  }\n\n  initUI(){\n    this.mainElement = createElement('atom-panel',{\n      className:'de-workbench-taskpanel-tree-area',\n    });\n    this.createButtonToolbar();\n  }\n\n  private createButtonToolbar(){\n    /*let addTaskButton = createElement('button',{\n      //elements : [ createText(\"New...\")],\n      className: 'btn btn-xs icon icon-gist-new'\n    })\n    atom[\"tooltips\"].add(addTaskButton, {title:'Add task'})\n    addTaskButton.addEventListener('click', (evt)=>{\n      this.evtEmitter.emit('didAddTask');\n    })*/\n    let removeTaskButton = createElement('button',{\n      //elements : [ createText(\"Delete\")],\n      className: 'btn btn-xs icon icon-dash'\n    })\n    atom[\"tooltips\"].add(removeTaskButton, {title:'Remove selected task'})\n    removeTaskButton.addEventListener('click',()=>{\n      this.evtEmitter.emit('didRemoveTask');\n    })\n    let cloneTaskButton = createElement('button',{\n      className: 'btn btn-xs icon icon-clippy'\n    })\n    atom[\"tooltips\"].add(cloneTaskButton, {title:'Clone selected Variant'})\n    cloneTaskButton.addEventListener('click',()=>{\n      this.evtEmitter.emit('didCloneTask');\n    })\n    let toolbar = createElement('div',{\n      elements: [\n        createElement('div', {\n          elements: [removeTaskButton, cloneTaskButton],\n          className: 'btn-group'\n        })\n      ], className: 'btn-toolbar'\n    });\n    insertElement(this.mainElement,toolbar);\n  }\n\n  buildAndAddTreeView(cdvTasks:Array<CordovaTaskConfiguration>){\n    this.cdvTasks=cdvTasks;\n    this.buildTreeModel(cdvTasks);\n    if(!this.treeView){\n      this.treeView = new UITreeView(this.treeModel);\n      this.treeView.addEventListener('didItemSelected', this.onItemSelected.bind(this));\n      insertElement(this.mainElement,this.treeView.element());\n    }else{\n      this.treeView.setModel(this.treeModel);\n    }\n  }\n\n  createCustomTaskNode(cvdCustomTasks:Array<CordovaTaskConfiguration>):UITreeItem{\n    let children = map<CordovaTaskConfiguration,UITreeItem>(cvdCustomTasks,(item:CordovaTaskConfiguration) => {\n      return  { id: StringHash(item.name), name: item.name};\n    });\n    return { id: 'custom', name: 'Custom', icon: null,\n      expanded:true,\n      children:children\n    };\n  }\n\n  createCdvTaskNode(cvdTask:Array<CordovaTaskConfiguration>):UITreeItem{\n    let children = map<CordovaTaskConfiguration,UITreeItem>(cvdTask,(item:CordovaTaskConfiguration) => {\n      return  { id: StringHash(item.name), name: item.displayName};\n    });\n    return { id: 'default', name: 'Cordova', icon: null,\n      expanded : true,\n      children: children\n    };\n  }\n\n  onItemSelected(itemId:string,item:UITreeItem){\n    console.log(\"selected: \",itemId,item);\n    if(this.taskSelectionListener){\n      this.taskSelectionListener(this.translateItemIdToTaskId(itemId));\n    }\n  }\n\n  setSelected(itemId:string,value:boolean):void{\n    this.treeView.selectItemById(StringHash(itemId),value);\n  }\n\n  setOnTaskChangeListener(callback: (itemId:string) => void):void{\n    this.taskSelectionListener = callback;\n  }\n\n  translateItemIdToTaskId(itemId:string):string {\n    let task:CordovaTaskConfiguration = find(this.cdvTasks,(item) => {\n      return itemId == StringHash(item.name);\n    });\n    if(task){\n      return task.name;\n    }\n    return itemId;\n  }\n\n}\n"]}