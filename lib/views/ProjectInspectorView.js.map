{"version":3,"file":"ProjectInspectorView.js","sourceRoot":"","sources":["../../src/views/ProjectInspectorView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\nimport { EventEmitter }  from 'events'\nimport { CordovaUtils } from '../cordova/CordovaUtils'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { Cordova, CordovaPlatform, CordovaPlugin } from '../cordova/Cordova'\n\nexport class ProjectInspectorView {\n\n  private element: HTMLElement\n  private events: EventEmitter\n  private panel: any\n  private item: any;\n  private atomWorkspace:any;\n  private currentProjectPath: String;\n  private cordova: Cordova;\n\n  private installedPlatormsElement: HTMLElement;\n\n  constructor () {\n    this.atomWorkspace = atom.workspace;\n    this.events = new EventEmitter()\n\n    // create Cordova utilities and tools\n    this.cordova = new Cordova();\n\n    // Create the UI\n    this.element = document.createElement('xatom-debug-area') //'de-workbench-projinspector-view'\n    /**\n    let title =  createElement('scheme-label', {\n        elements: [createText('Project Inspector Ahahah')]\n    })\n    insertElement(this.element, title)\n    **/\n    let el = createElement('xatom-debug-group', {\n        elements: [\n          createElement('xatom-debug-group-header', {\n            elements: [createText('Installed Platforms')]\n          }),\n          createElement('xatom-debug-group-header', {\n            elements: [createText('Installed Plugins')]\n          })\n        ]\n    });\n    insertElement(this.element, el)\n\n    // Listen events\n    ProjectManager.getInstance().didProjectChanged((projectPath)=>this.onProjectChanged(projectPath));\n  }\n\n  open () {\n\n    if (this.item){\n      this.atomWorkspace.toggle(this.item);\n    } else {\n      const  prefix = \"dewb\";\n      const uri = prefix + '//' + '_prjinspector';\n      this.item = {\n        activatePane: true,\n        searchAllPanes: true,\n        location: 'right',\n        element: this.element,\n        getTitle: () => 'DE Project Inspector',\n        getURI: () => uri,\n        getDefaultLocation: () => 'right',\n        getAllowedLocations: () => ['left', 'right']\n      };\n      this.atomWorkspace.open(this.item).then((view)=>{\n      });\n    }\n  }\n\n  close () {\n    this.panel.hide()\n  }\n\n  onProjectChanged(projectPath:string){\n    this.cordova.getInstalledPlatforms(projectPath).then((platforms)=>{\n      this.displayInstalledPlatforms(platforms);\n    });\n\n    this.cordova.getInstalledPlugins(projectPath).then( (plugins:Array<CordovaPlugin>) => {\n        //console.log(\"Plugins installed: \", plugins);\n    })\n  }\n\n  displayInstalledPlatforms(platforms:Array<CordovaPlatform>){\n    console.log(\"Installed platforms:\", platforms);\n    for (let platform of platforms) {\n      console.log(platform.name);\n    }\n  }\n\n\n}\n"]}