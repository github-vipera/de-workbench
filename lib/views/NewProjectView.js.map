{"version":3,"file":"NewProjectView.js","sourceRoot":"","sources":["../../src/views/NewProjectView.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\n import { EventEmitter }  from 'events'\n\n\nexport class NewProjectView {\n\n  private element: HTMLElement\n  private events: EventEmitter\n  private panel: any\n  private txtProjectName: HTMLElement;\n  private txtPackageID:HTMLElement;\n  private txtDestinationPath:HTMLElement;\n  private editorElement: HTMLElement;\n\n  constructor () {\n    this.events = new EventEmitter()\n    this.element = document.createElement('xatom-debug-scheme') //de-workbench-newproject-view\n    this.editorElement = createElement('xatom-debug-scheme-editor', {\n      /*className: 'native-key-bindings'*/\n    })\n\n    let title =  createElement('scheme-label', {\n        elements: [createText('New Project')]\n    })\n    insertElement(this.editorElement, title)\n\n    // Project Name Element\n    let configElement = createElement('xatom-debug-scheme-config', {\n      elements: [\n        createElement('scheme-label', {\n          elements: [createText('New Project Name')]\n        })\n      ]\n    })\n    this.txtProjectName = this.createControlText(\"Project Name\", 'newPrjName', {default:'New Project'});\n    insertElement(configElement, this.txtProjectName)\n\n    // Package ID Element\n    let configElement2 = createElement('xatom-debug-scheme-config', {\n      elements: [\n        createElement('scheme-label', {\n          elements: [createText('Package ID')]\n        })\n      ]\n    })\n    this.txtPackageID = this.createControlText(\"Package ID\", 'packageID', {default:'com.yourcomapny.yourapp'});\n    insertElement(configElement2, this.txtPackageID)\n\n\n    // Destination Path Element\n    this.txtDestinationPath = this.createControlText(\"Destination Path\", 'destinationPath', {default:'Your project path', withButton:true, buttonCaption: 'Choose folder...'});\n    let configElement3 = createElement('xatom-debug-scheme-config', {\n      elements: [\n        createElement('scheme-label', {\n          elements: [createText('Destination Path')]\n        })\n      ]\n    })\n    insertElement(configElement3, this.txtDestinationPath)\n\n\n    // Add all\n    insertElement(this.editorElement, configElement)\n    insertElement(this.editorElement, configElement2)\n    insertElement(this.editorElement, configElement3)\n    insertElement(this.element, [ this.editorElement,\n      createElement('xatom-debug-scheme-buttons', {\n        elements: [\n          createButton({\n            click: () => this.close()\n          }, [createText('Create')]),\n          createButton({\n            click: () => this.close()\n          }, [createText('Cancel')])\n        ]\n      })]\n    )\n\n    let modalConfig = {\n      item: this.element,\n      visible: false\n    }\n    modalConfig['className'] = 'xatom-debug-modal'\n    this.panel = atom.workspace.addModalPanel(modalConfig)\n\n  }\n\n  open (activePlugin?: Plugin) {\n    this.panel.show()\n  }\n\n  close () {\n    this.panel.hide()\n  }\n\n\n  createControlText (pluginName: string, key: string, config: any) {\n    let value = ''\n    if (value === config.default) {\n      value = null\n    }\n    let inputElement = createTextEditor({\n      value,\n      placeholder: config.default,\n      change: (value) => {\n        console.log(\"Value changed: \", value)\n        this.events.emit('didChange')\n      }\n    })\n    let elements = [inputElement];\n    if (config && config.withButton){\n      let button = createButton({\n        click: () => {\n          this.events.emit('didRun');\n        }\n      },[\n        createText(config.buttonCaption)\n      ])\n      elements = [inputElement,button];\n    }\n    return createElement('scheme-control', {\n      elements: elements\n    })\n  }\n\n}\n"]}