{"version":3,"file":"DebugAreaView.js","sourceRoot":"","sources":["../../src/views/DebugAreaView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEF,OAAO,EACL,UAAU,EACV,aAAa,EACb,aAAa,EAEb,YAAY,EAIZ,gBAAgB,EACjB,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAA;AAGvC,MAAM;IAYJ;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;QAEpC,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAA;QAChC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAA;QAEpE,IAAI,KAAK,GAAI,aAAa,CAAC,cAAc,EAAE;YACvC,QAAQ,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;SACvC,CAAC,CAAA;QACF,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;IAGpC,CAAC;IAED,IAAI;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACb,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAO,MAAM,GAAG,MAAM,CAAC;YACvB,MAAM,GAAG,GAAG,MAAM,GAAG,IAAI,GAAG,YAAY,CAAC;YACzC,IAAI,CAAC,IAAI,GAAG;gBACV,YAAY,EAAE,IAAI;gBAClB,cAAc,EAAE,IAAI;gBACpB,QAAQ,EAAE,OAAO;gBACjB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,MAAM,eAAe;gBAC/B,MAAM,EAAE,MAAM,GAAG;gBACjB,kBAAkB,EAAE,MAAM,OAAO;gBACjC,mBAAmB,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC;aAC7C,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;YAC7C,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;IACnB,CAAC;IAGD,iBAAiB,CAAE,UAAkB,EAAE,GAAW,EAAE,MAAW;QAC7D,IAAI,KAAK,GAAG,EAAE,CAAA;QACd,EAAE,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7B,KAAK,GAAG,IAAI,CAAA;QACd,CAAC;QACD,IAAI,YAAY,GAAG,gBAAgB,CAAC;YAClC,KAAK;YACL,WAAW,EAAE,MAAM,CAAC,OAAO;YAC3B,MAAM,EAAE,CAAC,KAAK;gBACZ,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;gBACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC/B,CAAC;SACF,CAAC,CAAA;QACF,IAAI,QAAQ,GAAG,CAAC,YAAY,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,CAAA,CAAC;YAC/B,IAAI,MAAM,GAAG,YAAY,CAAC;gBACxB,KAAK,EAAE;oBACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7B,CAAC;aACF,EAAC;gBACA,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC;aACjC,CAAC,CAAA;YACF,QAAQ,GAAG,CAAC,YAAY,EAAC,MAAM,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE;YACrC,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAA;IACJ,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject,\n   createTextEditor\n } from '../element/index';\n\n import { EventEmitter }  from 'events'\n\n\nexport class DebugAreaView {\n\n  private element: HTMLElement\n  private events: EventEmitter\n  private panel: any\n  private txtProjectName: HTMLElement;\n  private txtPackageID:HTMLElement;\n  private txtDestinationPath:HTMLElement;\n  private editorElement: HTMLElement;\n  private item: any;\n  private atomWorkspace:any;\n\n  constructor () {\n    this.atomWorkspace = atom.workspace;\n\n    this.events = new EventEmitter()\n    this.element = document.createElement('de-workbench-debugarea-view')\n\n    let title =  createElement('scheme-label', {\n        elements: [createText('Debug Area')]\n    })\n    insertElement(this.element, title)\n\n\n  }\n\n  open () {\n    if (this.item){\n      this.atomWorkspace.toggle(this.item);\n    } else {\n      const  prefix = \"dewb\";\n      const uri = prefix + '//' + '_debugarea';\n      this.item = {\n        activatePane: true,\n        searchAllPanes: true,\n        location: 'right',\n        element: this.element,\n        getTitle: () => 'DE Debug Area',\n        getURI: () => uri,\n        getDefaultLocation: () => 'right',\n        getAllowedLocations: () => ['left', 'right']\n      };\n      this.atomWorkspace.open(this.item).then((view)=>{\n      });\n    }\n  }\n\n  close () {\n    this.panel.hide()\n  }\n\n\n  createControlText (pluginName: string, key: string, config: any) {\n    let value = ''\n    if (value === config.default) {\n      value = null\n    }\n    let inputElement = createTextEditor({\n      value,\n      placeholder: config.default,\n      change: (value) => {\n        console.log(\"Value changed: \", value)\n        this.events.emit('didChange')\n      }\n    })\n    let elements = [inputElement];\n    if (config && config.withButton){\n      let button = createButton({\n        click: () => {\n          this.events.emit('didRun');\n        }\n      },[\n        createText(config.buttonCaption)\n      ])\n      elements = [inputElement,button];\n    }\n    return createElement('scheme-control', {\n      elements: elements\n    })\n  }\n\n}\n"]}