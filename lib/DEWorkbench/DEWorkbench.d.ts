import { ToolbarView } from '../toolbar/ToolbarView';
import { ProjectManager } from '../DEWorkbench/ProjectManager';
import { LoggerView } from '../views/LoggerView';
import { CordovaProjectInfo } from '../cordova/Cordova';
import { CordovaTaskConfiguration } from '../cordova/CordovaTasks';
import { TaskManager } from '../tasks/TaskManager';
import { ServersView } from '../views/Servers/ServersView';
import { ViewManager } from './ViewManager';
export interface WorkbenchOptions {
    didToggleToolbar?: Function;
    didToggleDebugArea?: Function;
    didProjectSettings?: Function;
    didToggleConsole?: Function;
}
export declare class DEWorkbench {
    toolbarView: ToolbarView;
    loggerView: LoggerView;
    private events;
    projectManager: ProjectManager;
    selectedProjectForTask: CordovaProjectInfo;
    private taskManager;
    private taskConfiguration;
    serversView: ServersView;
    private updateToolbarTimeout;
    private _viewManager;
    private static _instance;
    constructor(options: WorkbenchOptions);
    static readonly default: DEWorkbench;
    showNewProjectModal(): void;
    toggleBreakpointsView(): void;
    toggleCallStackView(): void;
    toggleVariablesView(): void;
    toggleWatchExpressionsView(): void;
    onProjectChanged(projectPath: String): void;
    openProjectInspector(): void;
    openDebugArea(): void;
    showProjectSettings(): void;
    toggleToolbar(): void;
    toggleDebugArea(): void;
    toggleLogger(): void;
    getToolbarElement(): HTMLElement;
    showCordovaTaskModal(): Promise<void>;
    onStoreTasks(taskConfiguration: CordovaTaskConfiguration): void;
    onTaskSelected(taskConfiguration: CordovaTaskConfiguration, forceUpdate?: boolean): void;
    onTaskRunRequired(taskConfiguration: CordovaTaskConfiguration): void;
    onStopTask(): void;
    private updateToolbarStatus(taskConfiguration, taskDone?);
    getTaskManager(): TaskManager;
    destroy(): void;
    readonly viewManager: ViewManager;
}
