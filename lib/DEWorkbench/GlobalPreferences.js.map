{"version":3,"file":"GlobalPreferences.js","sourceRoot":"","sources":["../../src/DEWorkbench/GlobalPreferences.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAQX,WAAW,CAAA;AAGX,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAEzC,MAAM,EACF,eAAe,EACf,sBAAsB,EACzB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAExB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAE5B,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE7B,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAErC,MAAM;IAKJ;QACE,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAA;QACtD,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAC,+BAA+B,CAAC,CAAC;QAC/F,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,qBAAqB,EAAG,SAAS,CAAC,CAAA;IACtD,CAAC;IAEO,YAAY,CAAC,MAAM;QACzB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;YAC1B,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;IACH,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAE,CAAA;IAClD,CAAC;IAEM,MAAM,KAAK,iBAAiB;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;IAC/D,CAAC;IAES,MAAM,KAAK,QAAQ;QAC3B,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7E,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAC3C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,GAAG,CAAC,GAAU;QACnB,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAAC,KAAK,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAA,CAAC;IACJ,CAAC;IAEM,IAAI,CAAC,GAAU,EAAE,KAAS;QAC/B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEM,MAAM,CAAC,GAAU;QACtB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IACtB,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n'use babel'\n\nimport { EventEmitter }  from 'events'\nimport { Logger } from '../logger/Logger'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst fs = require('fs')\nconst path = require('path')\n\nconst _ = require('lodash');\nconst GUID = require('guid');\n\nvar JsonDB = require('node-json-db');\n\nexport class GlobalPreferences {\n\n  private static _instance:GlobalPreferences;\n  private _db:any;\n\n  private constructor(){\n    this.ensureFolder(GlobalPreferences.preferencesFolder)\n    let prefsFile = path.join(GlobalPreferences.preferencesFolder,'de_workbench_preferences.json');\n    this._db = new JsonDB(prefsFile, true, true);\n    Logger.consoleLog(\"Global Preferences:\" , prefsFile)\n  }\n\n  private ensureFolder(folder){\n    if (!fs.existsSync(folder)){\n      fs.mkdirSync(folder);\n    }\n  }\n\n  private saveTimestamp(){\n    this.save(\"last_access\", new Date().toString() )\n  }\n\n  public static get preferencesFolder():string {\n    return path.join(GlobalPreferences.userHome, \".de_workbench\")\n  }\n\n  protected static get userHome():string {\n    return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n  }\n\n  public static getInstance():GlobalPreferences{\n    if (!this._instance){\n      this._instance = new GlobalPreferences();\n    }\n    return this._instance;\n  }\n\n  public get(key:string){\n    try {\n      return this._db.getData(key);\n    } catch(error) {\n        return null;\n    };\n  }\n\n  public save(key:string, value:any){\n    this._db.push(key, value);\n  }\n\n  public delete(key:string){\n    this._db.delete(key)\n  }\n\n}\n"]}