{"version":3,"file":"ProjectSettings.js","sourceRoot":"","sources":["../../src/DEWorkbench/ProjectSettings.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAIX,MAAM,EACF,eAAe,EACf,sBAAsB,EACzB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAExB,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAE5B,MAAM;IAKJ,YAAY,WAAkB;QAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC,kBAAkB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,WAAW,EAAC,IAAI,EAAE,CAAC,CAAC;IAClJ,CAAC;IAEM,cAAc;QACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEM,sBAAsB,CAAC,WAAkB;QAC5C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAC,cAAc,CAAC,CAAA;IAChD,CAAC;IAEM,IAAI;QACT,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAC,EAAE;YACnC,EAAE,CAAA,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAA,CAAC;gBACjD,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAE,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,EAAC,MAAM,CAAC,CAAC;QACZ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,GAAG,CAAC,GAAU;QACnB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAEM,IAAI,CAAC,GAAU,EAAE,KAAS;QAC/B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAEO,uBAAuB;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC,uBAAuB,CAAC,CAAC;IAC1F,CAAC;CAEF","sourcesContent":["'use babel'\n\nimport { EventEmitter }  from 'events'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst trivialdb = require('trivialdb');\nconst fs = require('fs')\nconst path = require('path')\n\nexport class ProjectSettings  {\n\n  private projectRoot:string;\n  private db:any;\n\n  constructor(projectRoot:string){\n      this.projectRoot = projectRoot;\n      this.db = trivialdb.db('project_settings', { loadFromDisk: true, rootPath: this.getProjectInfoFilePath(this.projectRoot), prettyPrint:true });\n  }\n\n  public getProjectRoot():string {\n    return this.projectRoot;\n  }\n\n  public getProjectInfoFilePath(projectPath:string){\n      return path.join(projectPath,'.deworkbench')\n  }\n\n  public load():Promise<ProjectSettings>{\n    return new Promise((resolve,reject)=>{\n      if(!fs.existsSync(this.getCompleteIntarnalPath())){\n        resolve(this);\n        return;\n      }\n      this.db.reload().then(()=>{\n        resolve(this);\n      },reject);\n    })\n  }\n\n  public get(key:string){\n    return this.db.get(key);\n  }\n\n  public save(key:string, value:any){\n    return this.db.save(key, value);\n  }\n\n  private getCompleteIntarnalPath(){\n    return path.join(this.getProjectInfoFilePath(this.projectRoot),'project_settings.json');\n  }\n\n}\n"]}