{"version":3,"file":"BreakpointManager.js","sourceRoot":"","sources":["../../../src/DEWorkbench/debugger/BreakpointManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAgBX,MAAM;IAIJ;QAFQ,gBAAW,GAAgB,EAAE,CAAA;IAErB,CAAC;IAEV,cAAc;QACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,aAAa,CAAE,QAAgB,EAAE,UAAkB;QACjD,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAC9C,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IAChC,CAAC;IAED,sBAAsB,CAAC,QAAgB;QACrC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;YACtC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,gBAAgB,CAAE,UAAsB;QACtC,MAAM,CAAC,IAAI,OAAO,CAAE,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YAChD,EAAE,CAAA,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;oBAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;gBACnD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;gBAChC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YACtB,CAAC;YACD,MAAM,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,aAAa,CAAE,MAAW,EAAE,UAAkB,EAAE,QAAgB,EAAE,SAAkB;QAClF,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,UAAU,GAAG;gBACf,UAAU;gBACV,QAAQ;gBACR,MAAM;gBACN,SAAS,EAAE,SAAS,IAAI,EAAE;aACb,CAAA;YACf,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAC7C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,OAAO,CAAC,UAAU,CAAC,CAAA;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,0BAA0B,CAAC,CAAA;YACpC,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,mBAAmB;QACjB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YAChC,MAAM,CAAC;gBACL,QAAQ,EAAE,CAAC,CAAC,QAAQ;gBACpB,UAAU,EAAE,CAAC,CAAC,UAAU;gBACxB,SAAS,EAAE,CAAC,CAAC,SAAS;aACT,CAAA;QACjB,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n *\n * Based on xatom-debug plugin\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n *\n */\n\nimport { Breakpoint, Breakpoints } from './DebuggerCommons'\n\nexport class BreakpointManager {\n\n  private breakpoints: Breakpoints = []\n\n  constructor () {}\n\n  public getBreakpoints (): Breakpoints {\n    return this.breakpoints\n  }\n\n  getBreakpoint (filePath: String, lineNumber: Number): Breakpoint {\n    let index = this.breakpoints.findIndex((item) => {\n      return (item.filePath === filePath && item.lineNumber === lineNumber)\n    })\n    return this.breakpoints[index]\n  }\n\n  getBreakpointsFromFile(filePath: String): Breakpoints {\n    return this.breakpoints.filter((item) => {\n      return (item.filePath === filePath)\n    })\n  }\n\n  removeBreakpoint (breakpoint: Breakpoint): Promise<boolean> {\n    return new Promise ((resolve, reject) => {\n      let index = this.breakpoints.indexOf(breakpoint)\n      if(index != -1) {\n        if (breakpoint.marker) breakpoint.marker.destroy()\n      \tthis.breakpoints.splice(index, 1)\n        return resolve(true)\n      }\n      return reject('Breakpoint does not exists')\n    })\n  }\n\n  addBreakpoint (marker: any, lineNumber: number, filePath: string, condition?: string): Promise<Breakpoint> {\n    return new Promise((resolve, reject) => {\n      let breakpoint = {\n        lineNumber,\n        filePath,\n        marker,\n        condition: condition || ''\n      } as Breakpoint\n      let index = this.breakpoints.push(breakpoint)\n      if (index > -1) {\n        resolve(breakpoint)\n      } else {\n        reject('Unable to add breakpoint')\n      }\n    })\n  }\n  getPlainBreakpoints (): Breakpoints {\n    return this.breakpoints.map((b) => {\n      return {\n        filePath: b.filePath,\n        lineNumber: b.lineNumber,\n        condition: b.condition\n      } as Breakpoint\n    })\n  }\n}\n"]}