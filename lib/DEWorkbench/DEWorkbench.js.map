{"version":3,"file":"DEWorkbench.js","sourceRoot":"","sources":["../../src/DEWorkbench/DEWorkbench.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { ToolbarView } from '../toolbar/ToolbarView'\nimport { NewProjectView } from '../views/NewProject/NewProjectView'\nimport { EventEmitter }  from 'events';\nconst  { CompositeDisposable } = require('atom');\nimport { CordovaUtils } from '../cordova/CordovaUtils'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { Logger } from '../logger/Logger'\nimport { ProjectSettingsView } from '../views/ProjectSettings/ProjectSettingsView'\nimport { PushToolView } from '../views/PushTool/PushToolView'\nimport { LoggerView } from '../views/LoggerView'\nimport { TaskConfigView } from '../views/TaskConfig/TaskConfigView'\nimport { CordovaProjectInfo } from '../cordova/Cordova'\nimport { CordovaTaskConfiguration } from '../cordova/CordovaTasks'\nimport { TaskManager} from '../tasks/TaskManager'\nimport { UIIndicatorStatus } from '../ui-components/UIStatusIndicatorComponent'\nimport { ServersView }from '../views/Servers/ServersView'\nimport { BookmarkManager } from './BookmarkManager'\nimport { BookmarksView } from '../views/Bookmarks/BookmarksView'\nimport { ViewManager } from './ViewManager'\nimport { DEWBResourceManager } from './DEWBResourceManager'\n\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject\n } from '../element/index';\n\n export interface WorkbenchOptions {\n   didToggleToolbar?: Function,\n   didToggleDebugArea?:Function,\n   didProjectSettings?:Function,\n   didToggleConsole?:Function\n }\n\n\n export class DEWorkbench {\n\n   public toolbarView: ToolbarView\n   public loggerView: LoggerView\n   private events: EventEmitter;\n   public projectManager: ProjectManager;\n   public selectedProjectForTask: CordovaProjectInfo;\n   private taskManager:TaskManager;\n   private taskConfiguration:CordovaTaskConfiguration;\n   public serversView: ServersView\n   private updateToolbarTimeout:any;\n   private _viewManager:ViewManager;\n   private static _instance:DEWorkbench;\n\n   constructor(options:WorkbenchOptions){\n     Logger.getInstance().info(\"Initializing DEWorkbench...\");\n\n     this._viewManager = new ViewManager()\n    \n     this.projectManager = ProjectManager.getInstance();\n\n     BookmarkManager.getInstance();\n\n     this.events = new EventEmitter();\n\n     this.createToolbar();\n\n     attachEventFromObject(this.events, [\n       'didToggleToolbar'\n     ], options);\n\n     ProjectManager.getInstance().didProjectChanged((projectPath)=>this.onProjectChanged(projectPath));\n     this.events.on('didRunTask',this.onTaskRunRequired.bind(this));\n     this.events.on('didTaskSelected',this.onTaskSelected.bind(this));\n     this.events.on('didStoreTasks',this.onStoreTasks.bind(this));\n\n     DEWorkbench._instance = this;\n\n     let commands = atom.commands.add('atom-workspace', {\n         'dewb-menu-view-:debug-breakpoint-toggle': () => this.toggleBreakpointsView(),\n         'dewb-menu-view-:debug-call-stack-toggle': () => this.toggleCallStackView(),\n         'dewb-menu-view-:debug-variables-toggle': () => this.toggleVariablesView(),\n         'dewb-menu-view-:debug-watch-expressions-toggle': () => this.toggleWatchExpressionsView()\n       });\n       \n     Logger.getInstance().info(\"DEWorkbench initialized successfully.\");\n   }\n\n   private createToolbar(){\n     // Create the main toolbar\n     this.toolbarView = new ToolbarView({\n      didNewProject: () => {\n        this.showNewProjectModal();\n     },\n     didToggleToolbar: () => {\n         this.toggleToolbar();\n     },\n     didToggleDebugArea: () => {\n       this.toggleDebugArea();\n     },\n     didProjectSettings: () => {\n         this.showProjectSettings();\n     },\n     didToggleConsole:() => {\n       this.toggleLogger();\n     },\n     didSelectProjectForRun: (projectInfo:CordovaProjectInfo) => {\n       Logger.consoleLog(\"didSelectProjectForRun\",projectInfo);\n       this.selectedProjectForTask = projectInfo;\n     },\n     didSelectTaskClick: () => {\n       Logger.consoleLog(\"didSelectTaskClick\");\n       this.showCordovaTaskModal();\n     },\n     didTaskSelected:(task:CordovaTaskConfiguration) => {\n       this.onTaskSelected(task);\n     },\n     didStop:() => {\n       this.onStopTask();\n     },\n     didRun : () => {\n       this.onTaskRunRequired(this.taskConfiguration);\n     },\n     didReload : () => {\n       Logger.consoleLog('Reload');\n       this.getTaskManager().sendAction({\n         type: 'doLiveReload'\n       });\n     },\n     didOpenJSConsole: () => {\n       Logger.consoleLog('didOpenJSConsole');\n       let runtimeHandler=this.getTaskManager().getRuntimeSessionHandler();\n       if(runtimeHandler && runtimeHandler.canOpenJSSession()){\n         let consoleHandler = runtimeHandler.openConsole();\n       }\n     }\n    });\n  }\n\n   public static get default():DEWorkbench {\n     return this._instance;\n   }\n\n   public showNewProjectModal(){\n     // Create the New Project modal window\n     let newProjectView = new NewProjectView();\n     newProjectView.open();\n   }\n\n   toggleBreakpointsView(){\n     this.viewManager.toggleView(ViewManager.VIEW_DEBUG_BREAKPOINTS);\n   }\n\n   toggleCallStackView(){\n     this.viewManager.toggleView(ViewManager.VIEW_DEBUG_CALL_STACK);\n   }\n\n   toggleVariablesView(){\n     this.viewManager.toggleView(ViewManager.VIEW_DEBUG_VARIABLES);\n   }\n\n   toggleWatchExpressionsView(){\n     this.viewManager.toggleView(ViewManager.VIEW_DEBUG_WATCH_EXPRESSIONS);\n   }\n\n   onProjectChanged(projectPath:String){\n     Logger.getInstance().debug(\"DEWorkbench onProjectChanged: \", projectPath);\n   }\n\n   openProjectInspector(){\n   }\n\n\n\n   openDebugArea(){\n     this.viewManager.openView(ViewManager.VIEW_DEBUG_BREAKPOINTS);\n   }\n\n\n   showProjectSettings() {\n     let currentprojectPath:string = ProjectManager.getInstance().getCurrentProjectPath();\n     if (currentprojectPath){\n       this.viewManager.openView(ViewManager.VIEW_PROJECT_SETTINGS(currentprojectPath));\n     }\n   }\n\n   toggleToolbar() {\n     this.toolbarView.toggle();\n   }\n\n   toggleDebugArea(){\n     this.events.emit('didToggleDebugArea');\n     this.viewManager.toggleView(ViewManager.VIEW_DEBUG_BREAKPOINTS);\n   }\n\n   toggleLogger(){\n     this.events.emit('didToggleLogger');\n     this.viewManager.toggleView(ViewManager.VIEW_LOG_INSPECTOR)\n   }\n\n   getToolbarElement() {\n       return this.toolbarView.getElement();\n   }\n\n   async showCordovaTaskModal(){\n     if(this.selectedProjectForTask == null){\n       Logger.getInstance().warn(\"select project before run task\");\n       return;\n     }\n     let taskConfigView:TaskConfigView = new TaskConfigView(\"Task Configuration\",this.events);\n     // RELOAD PROJECT INFO\n     this.selectedProjectForTask = await this.projectManager.cordova.getProjectInfo(this.selectedProjectForTask.path,false);\n     taskConfigView.setProject(this.selectedProjectForTask);\n     taskConfigView.show();\n   }\n\n   onStoreTasks(taskConfiguration:CordovaTaskConfiguration){\n     if(taskConfiguration){\n       this.onTaskSelected(taskConfiguration,true);\n     }\n   }\n\n   onTaskSelected(taskConfiguration:CordovaTaskConfiguration,forceUpdate?:boolean){\n     Logger.consoleLog(\"onTaskSelected\",taskConfiguration);\n     this.taskConfiguration = taskConfiguration;\n     if(!taskConfiguration){\n       Logger.getInstance().warn(\"Null task selected\");\n       this.toolbarView.setTaskConfiguration(null);\n       return;\n     }\n     if(forceUpdate){\n       this.toolbarView.setTaskConfiguration(taskConfiguration);\n     }\n   }\n\n   onTaskRunRequired(taskConfiguration:CordovaTaskConfiguration){\n     Logger.consoleLog(\"onTaskRunRequired\",taskConfiguration);\n     this.taskConfiguration = taskConfiguration;\n     if(!taskConfiguration){\n       Logger.getInstance().warn(\"Null task selected\");\n       this.toolbarView.setTaskConfiguration(null);\n       return;\n     }\n     Logger.getInstance().info(\"Require execute of task\", taskConfiguration.name, this.selectedProjectForTask);\n     this.toolbarView.setTaskConfiguration(taskConfiguration);\n     let project = this.selectedProjectForTask;\n     let platform = taskConfiguration.selectedPlatform ? taskConfiguration.selectedPlatform.name : \"\";\n     this.toolbarView.setInProgressStatus(`${taskConfiguration.displayName} - ${platform}  in progress...`);\n     this.getTaskManager().executeTask(taskConfiguration,project).then(() => {\n       //this.cancelUpdateTimer();\n       Logger.getInstance().info(`${taskConfiguration.displayName} Done`);\n       this.updateToolbarStatus(taskConfiguration,true);\n     },(reason) => {\n        //this.cancelUpdateTimer();\n        Logger.getInstance().error(reason);\n        this.updateToolbarStatus(taskConfiguration,false);\n     }).catch((err:Error) => {\n       //this.cancelUpdateTimer();\n       Logger.getInstance().error(err.message, err.stack);\n       this.updateToolbarStatus(taskConfiguration,false);\n     });\n     // schedule update for task start\n     //this.setUpdateTimer(taskConfiguration);\n   }\n\n   /*private setUpdateTimer(taskConfiguration:CordovaTaskConfiguration){\n     this.updateToolbarTimeout=setTimeout(() => {\n       console.warn(\"updateToolbarStatus\");\n       this.updateToolbarStatus(taskConfiguration,false);\n       this.updateToolbarTimeout = null;\n     },4000);\n   }\n\n   private cancelUpdateTimer(){\n     clearTimeout(this.updateToolbarTimeout);\n     this.updateToolbarTimeout = null;\n   }*/\n\n\n   onStopTask(){\n     Logger.consoleLog(\"onStopTask\");\n     if(this.taskManager){\n       this.taskManager.stop();\n       this.updateToolbarStatus(this.taskConfiguration,false);\n     }\n   }\n\n   private updateToolbarStatus(taskConfiguration:CordovaTaskConfiguration,taskDone?:boolean){\n     let project = this.selectedProjectForTask;\n     let platform = taskConfiguration.selectedPlatform ? taskConfiguration.selectedPlatform.name : \"\";\n     if(this.taskManager){\n       let busy = this.taskManager.isBusy();\n       let serverRunning = this.taskManager.isPlatformServerRunning();\n       Logger.consoleLog(`updateToolbarStatus busy ${busy} -  serverRunning ${serverRunning}`);\n       if(busy){\n         this.toolbarView.setInProgressStatus(`${taskConfiguration.displayName} - ${platform}  in progress...`);\n         if(serverRunning){\n           this.toolbarView.updateStatus({\n             btnReloadEnable:true,\n             btnOpenJSConsoleEnable:true,\n           });\n         }\n         return;\n       }\n       if(serverRunning){\n         if(taskDone){\n           this.toolbarView.updateStatus({\n             prjSelectorEnable:false,\n             btnStopEnable:true,\n             btnRunEnable:true,\n             btnReloadEnable:true,\n             btnOpenJSConsoleEnable:true,\n             progressStatus: UIIndicatorStatus.Busy,\n             progressIcon: 'status-success',\n             progressMsg : 'Server running'\n           })\n         }else{\n           this.toolbarView.updateStatus({\n             prjSelectorEnable:false,\n             btnRunEnable:true,\n             btnStopEnable:true,\n             btnReloadEnable:false,\n             btnOpenJSConsoleEnable:false,\n             progressIcon: 'status-error',\n             progressStatus: UIIndicatorStatus.Error,\n             progressMsg : `${taskConfiguration.displayName} - ${platform} Fail (Server running)`\n           });\n         }\n       }else{\n         this.toolbarView.updateStatus({\n           btnReloadEnable:false,\n           btnOpenJSConsoleEnable:false,\n         });\n         if(taskDone){\n            this.toolbarView.setSuccessStatus(`${taskConfiguration.displayName} - ${platform} Done`);\n         }else{\n            this.toolbarView.setErrorStatus(`${taskConfiguration.displayName} - ${platform} Fail`);\n         }\n       }\n     }\n   }\n\n\n   getTaskManager():TaskManager{\n     if(!this.taskManager){\n       this.taskManager = new TaskManager();\n       this.taskManager.didRuntimeSessionAvailable(() => {\n         Logger.consoleLog(\"didRuntimeSessionAvailable exec\");\n         this.updateToolbarStatus(this.taskConfiguration,false);\n       });\n     }\n     return this.taskManager;\n   }\n\n   destroy () {\n     // destroy all\n     Logger.getInstance().info(\"DEWorkbench destroying...\");\n   }\n\n   public get viewManager():ViewManager {\n     return this._viewManager;\n   }\n\n}\n"]}