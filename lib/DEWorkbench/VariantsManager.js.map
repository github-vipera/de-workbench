{"version":3,"file":"VariantsManager.js","sourceRoot":"","sources":["../../src/DEWorkbench/VariantsManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAUX,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAGzC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAoB3B,MAAM;IAMJ,YAAY,WAAkB;QAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAC/E,CAAC;IAEM,IAAI;QACT,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QACjC,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACzC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAC,EAAE;YACpC,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA,CAAC;gBACtB,OAAO,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;gBAC7B,MAAM,CAAC;YACT,CAAC;YACD,EAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAS,GAAG,EAAE,IAAI;gBAC7C,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,MAAM;oBAC5C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA,CAAC;wBACP,MAAM,CAAC,GAAG,CAAC,CAAA;oBACb,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,UAAU,CAAC,uBAAuB,EAAG,MAAM,CAAC,CAAA;wBACnD,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;oBACvC,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAES,cAAc,CAAC,UAAc;QACrC,IAAI,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC;YAEhG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBACnD,IAAI,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBAC/C,IAAI,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAEtD,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC;oBAC3D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,UAAU,CAAC,UAAU,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;wBAC/C,IAAI,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;wBAC5C,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;oBACxE,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC;oBACvD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;wBAC7C,IAAI,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;wBACxC,IAAI,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;wBAE1D,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA,CAAC;4BAC3D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gCAChD,IAAI,aAAa,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;gCAC7C,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;4BACrE,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACL,CAAC;QAEH,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAES,cAAc,CAAC,KAAmB;QAC1C,IAAI,UAAU,GAAO,EAAE,CAAC;QACxB,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAC;QACzB,UAAU,CAAC,QAAQ,CAAC,OAAO,GAAG,EAAE,CAAC;QAEjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YACxC,IAAI,OAAO,GAAW,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACvC,IAAI,UAAU,GAAO,EAAE,CAAC;YACxB,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;YAClB,UAAU,CAAC,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACjC,UAAU,CAAC,UAAU,GAAG,EAAE,CAAA;YAG1B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBAC7C,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;gBACvC,IAAI,aAAa,GAAO,EAAE,CAAC;gBAC3B,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;gBACrB,aAAa,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;gBACvC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;gBACzC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5C,CAAC;YAED,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAA;YAExB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBAC3C,IAAI,QAAQ,GAAmB,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;gBACnD,IAAI,WAAW,GAAO,EAAE,CAAC;gBACzB,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC;gBACnB,WAAW,CAAC,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;gBACnC,WAAW,CAAC,UAAU,GAAG,EAAE,CAAC;gBAE5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;oBAC9C,IAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;oBACxC,IAAI,aAAa,GAAO,EAAE,CAAC;oBAC3B,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;oBACrB,aAAa,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oBACvC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;oBACzC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC7C,CAAC;gBACD,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YACvC,CAAC;YAED,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC9C,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,aAAa,EAAC,UAAU,CAAC,CAAA;QAC3C,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,KAAmB;QAC9B,IAAI,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnC,IAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1D,EAAE,CAAA,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAA,CAAC;YACtC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,EAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAA;IAC3C,CAAC;IAEM,UAAU;QACb,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;IAC/C,CAAC;IAEM,WAAW;QAChB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;CAEF;AAED,MAAM;IAIJ;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;IACpB,CAAC;IAEM,UAAU,CAAC,WAAkB;QAClC,IAAI,UAAU,GAAG,IAAI,OAAO,CAAC,WAAW,CAAC,CAAA;QACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/B,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAEM,UAAU,CAAC,WAAkB;QAClC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC,IAAI,EAAC,WAAW,EAAC,CAAC,CAAC;IASnD,CAAC;IAEM,aAAa,CAAC,WAAkB;QACrC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAC,UAAS,OAAO;YACrC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC;CAEF;AAED,MAAM;IAMJ,YAAY,WAAkB;QAC5B,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,IAAW,EAAC,KAAY;QAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED,WAAW,CAAC,IAAW;QACrB,IAAI,WAAW,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAChC,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAEM,yBAAyB,CAAC,YAAmB;QAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAA,CAAC;YACb,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;QAC3C,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEM,iBAAiB,CAAC,YAAmB;QAC1C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,KAAG,YAAY,CAAC,CAAA,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;YAC1B,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,SAAS,CAAC,cAAsB;QACrC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QAC7F,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YAClD,IAAI,sBAAsB,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAEpE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,sBAAsB,CAAC,WAAW,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBAC5D,eAAe,CAAC,aAAa,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YACxH,CAAC;QACH,CAAC;IACH,CAAC;CAEF;AAED,MAAM;IAGJ,YAAY,YAAmB;QAC7B,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IACD,aAAa,CAAC,IAAW,EAAC,KAAY;QACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;IAC3D,CAAC;CACF;AAED,MAAM;IAGF,YAAY,IAAW,EAAC,KAAY;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACJ","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { EventEmitter }  from 'events'\nimport { Cordova } from '../cordova/Cordova'\nimport { Logger } from '../logger/Logger'\nimport { EventBus } from '../DEWorkbench/EventBus'\n\nconst xml2js = require('xml2js');\nconst fs = require('fs');\nconst path = require('path')\nconst _ = require('lodash')\n\n/*\nexport interface VariantPlatform {\n    name:string;\n    preferences:Array<VariantPreference>\n}\n\nexport interface Variant {\n  name:string;\n  preferences:Array<VariantPreference>\n  platforms:Array<VariantPlatform>\n}\n\nexport interface VariantsModel {\n  variants:Array<Variant>;\n}\n**/\n\n\nexport class VariantsManager {\n\n  protected projectRoot:string;\n  protected variantsFilePath:string;\n  protected variantsFolder:string;\n\n  constructor(projectRoot:string){\n      this.projectRoot = projectRoot;\n      this.variantsFolder = path.join(this.projectRoot, 'variants');\n      this.variantsFilePath = path.join(this.variantsFolder, 'variants_def.xml');\n  }\n\n  public load():Promise<VariantsModel>{\n    var parser = new xml2js.Parser();\n    let variantsFieName = this.getFilePath();\n    return new Promise((resolve, reject)=>{\n      var that = this;\n      if (!this.fileExists()){\n        resolve(new VariantsModel());\n        return;\n      }\n      fs.readFile(variantsFieName, function(err, data) {\n        parser.parseString(data, function (err, result) {\n          if (err){\n            reject(err)\n          } else {\n            Logger.consoleLog(\"Variants file loaded:\" , result)\n            resolve(that.fromXMLtoModel(result));\n          }\n        });\n      });\n    })\n  }\n\n  protected fromXMLtoModel(xmlContent:any):VariantsModel {\n    let model = new VariantsModel();\n    // scan for variants\n    if (xmlContent.variants && xmlContent.variants.variant && xmlContent.variants.variant.length > 0){\n\n      for (var i=0;i<xmlContent.variants.variant.length;i++){\n          let xmlVariant = xmlContent.variants.variant[i]\n          let variantImpl = model.addVariant(xmlVariant.$.name);\n          // scan for preferences\n          if (xmlVariant.preference && xmlVariant.preference.length>0){\n            for (var p=0;p<xmlVariant.preference.length;p++){\n              let xmlPreference = xmlVariant.preference[p]\n              variantImpl.addPreference(xmlPreference.$.name, xmlPreference.$.value)\n            }\n          }\n          // scan for platforms\n          if (xmlVariant.platform && xmlVariant.platform.length>0){\n            for (var p=0;p<xmlVariant.platform.length;p++){\n              let xmlPlatform = xmlVariant.platform[p]\n              let platform = variantImpl.addPlatform(xmlPlatform.$.name)\n              // scan for preferences\n              if (xmlPlatform.preference && xmlPlatform.preference.length){\n                for (var k=0;k<xmlPlatform.preference.length;k++){\n                  let xmlPreference = xmlPlatform.preference[k]\n                  platform.addPreference(xmlPreference.$.name, xmlPreference.$.value)\n                }\n              }\n            }\n          }\n      }\n\n    }\n    return model;\n  }\n\n  protected fromModelToXML(model:VariantsModel):any {\n    var xmlContent:any = {};\n    xmlContent.variants = {};\n    xmlContent.variants.variant = [];\n\n    for (var i=0;i<model.variants.length;i++){\n      let variant:Variant = model.variants[i]\n      var xmlVariant:any = {};\n      xmlVariant.$ = {};\n      xmlVariant.$.name = variant.name;\n      xmlVariant.preference = []\n\n      // scan for preferences\n      for (var p=0;p<variant.preferences.length;p++){\n        let preference = variant.preferences[p]\n        var xmlPreference:any = {};\n        xmlPreference.$ = {};\n        xmlPreference.$.name = preference.name;\n        xmlPreference.$.value = preference.value;\n        xmlVariant.preference.push(xmlPreference);\n      }\n\n      xmlVariant.platform = []\n      // scan for platforms\n      for (var p=0;p<variant.platforms.length;p++){\n        let platform:VariantPlatform = variant.platforms[p]\n        var xmlPlatform:any = {};\n        xmlPlatform.$ = {};\n        xmlPlatform.$.name = platform.name;\n        xmlPlatform.preference = [];\n        // scan for platform preferences\n        for (var k=0;k<platform.preferences.length;k++){\n          let preference = platform.preferences[k]\n          var xmlPreference:any = {};\n          xmlPreference.$ = {};\n          xmlPreference.$.name = preference.name;\n          xmlPreference.$.value = preference.value;\n          xmlPlatform.preference.push(xmlPreference);\n        }\n        xmlVariant.platform.push(xmlPlatform)\n      }\n\n      xmlContent.variants.variant.push(xmlVariant)\n    }\n\n    Logger.consoleLog(\"xmlContent:\",xmlContent)\n    return xmlContent;\n  }\n\n  public store(model:VariantsModel){\n    var builder = new xml2js.Builder();\n    var xml = builder.buildObject(this.fromModelToXML(model));\n    if(!fs.existsSync(this.variantsFolder)){\n      fs.mkdirSync(this.variantsFolder);\n    }\n    fs.writeFileSync(this.variantsFilePath,xml);\n    Logger.consoleLog(\"Variants file stored\")\n  }\n\n  public fileExists():boolean {\n      return fs.existsSync(this.variantsFilePath)\n  }\n\n  public getFilePath():string {\n    return this.variantsFilePath;\n  }\n\n}\n\nexport class VariantsModel {\n\n  public variants:Array<Variant>;\n\n  constructor(){\n    this.variants = []\n  }\n\n  public addVariant(variantName:string):Variant {\n    let newVariant = new Variant(variantName)\n    this.variants.push(newVariant);\n    return newVariant;\n  }\n\n  public getVariant(variantName:string):Variant {\n    return _.find(this.variants, {name:variantName});\n    /**\n    for (var i=0;i<this.variants.length;i++){\n      if (this.variants[i].name===variantName){\n        return this.variants[i]\n      }\n    }\n    return null;\n    **/\n  }\n\n  public removeVariant(variantName:string){\n    _.remove(this.variants,function(variant){\n      return (variant.name === variantName)\n    })\n  }\n\n}\n\nexport class Variant {\n\n  name:string;\n  preferences:Array<VariantPreference>\n  platforms:Array<VariantPlatform>\n\n  constructor(variantName:string){\n    this.name = variantName;\n    this.preferences = [];\n    this.platforms = [];\n  }\n\n  addPreference(name:string,value:string){\n      this.preferences.push(new VariantPreference(name, value))\n  }\n\n  addPlatform(name:string):VariantPlatform{\n    let newPlatform = new VariantPlatform(name);\n    this.platforms.push(newPlatform)\n    return newPlatform;\n  }\n\n  public getOrCreatePlatformByName(platformName:string):VariantPlatform{\n      let platform = this.getPlatformByName(platformName);\n      if (!platform){\n        platform = this.addPlatform(platformName)\n      }\n      return platform;\n  }\n\n  public getPlatformByName(platformName:string):VariantPlatform{\n    for (var i=0;i<this.platforms.length;i++){\n        if (this.platforms[i].name===platformName){\n          return this.platforms[i]\n        }\n    }\n    return null;\n  }\n\n  public cloneFrom(variantToClone:Variant){\n    this.preferences = [];\n    this.platforms = [];\n    // clone preferences\n    for (var i=0;i<variantToClone.preferences.length;i++){\n      this.addPreference(variantToClone.preferences[i].name, variantToClone.preferences[i].value)\n    }\n    // clone platforms\n    for (var i=0;i<variantToClone.platforms.length;i++){\n      let variantPlatformToClone = variantToClone.platforms[i];\n      let variantPlatform = this.addPlatform(variantPlatformToClone.name);\n      // clone preferences\n      for (var k=0;k<variantPlatformToClone.preferences.length;k++){\n        variantPlatform.addPreference(variantPlatformToClone.preferences[k].name, variantPlatformToClone.preferences[k].value)\n      }\n    }\n  }\n\n}\n\nexport class VariantPlatform  {\n  name:string;\n  preferences:Array<VariantPreference>\n  constructor(platformName:string){\n    this.name = platformName;\n    this.preferences = [];\n  }\n  addPreference(name:string,value:string){\n    this.preferences.push(new VariantPreference(name, value))\n  }\n}\n\nexport class VariantPreference {\n    name:string;\n    value:string;\n    constructor(name:string,value:string){\n      this.name = name;\n      this.value = value;\n    }\n}\n"]}