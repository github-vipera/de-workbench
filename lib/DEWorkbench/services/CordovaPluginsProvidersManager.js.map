{"version":3,"file":"CordovaPluginsProvidersManager.js","sourceRoot":"","sources":["../../../src/DEWorkbench/services/CordovaPluginsProvidersManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAQX,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAA;AAc5C,MAAM;IAKJ;QACE,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAA;QACxE,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,WAAW;QACd,EAAE,CAAC,CAAC,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3C,8BAA8B,CAAC,QAAQ,GAAG,IAAI,8BAA8B,EAAE,CAAC;QACnF,CAAC;QACD,MAAM,CAAC,8BAA8B,CAAC,QAAQ,CAAC;IACnD,CAAC;IAEM,uBAAuB,CAAC,eAA6C;QAC1E,IAAI,CAAC;YACH,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gDAAgD,EAAC,eAAe,CAAC,CAAA;YAC5F,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,eAAe,CAAC,CAAA;YACtE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC9C,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC;YACX,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,8CAA8C,EAAE,EAAE,CAAC,CAAA;YAC9E,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,EAAE,CAAC,CAAA;QACnE,CAAC;IACH,CAAC;IAEM,oBAAoB;QACzB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { Logger } from '../../logger/Logger'\nimport { CordovaPlugin } from '../../cordova/Cordova'\n\nexport interface CordovaPluginsProviderFactory {\n  createProvider():CordovaPluginsProviderService;\n}\n\nexport interface CordovaPluginsProviderService {\n  getCordovaPlugins():Promise<Array<CordovaPlugin>>;\n  getProviderName():string;\n  getExtendedUI():HTMLElement;\n  addEventHandler(handler:Function);\n}\n\nexport class CordovaPluginsProvidersManager {\n\n  private static instance:CordovaPluginsProvidersManager;\n  private providerFactories:Array<CordovaPluginsProviderFactory>\n\n  private constructor() {\n    Logger.getInstance().debug(\"Creating CordovaPluginsProvidersManager...\")\n    this.providerFactories = [];\n  }\n\n  static getInstance() {\n      if (!CordovaPluginsProvidersManager.instance) {\n          CordovaPluginsProvidersManager.instance = new CordovaPluginsProvidersManager();\n      }\n      return CordovaPluginsProvidersManager.instance;\n  }\n\n  public registerProviderFactory(providerFactory:CordovaPluginsProviderFactory){\n    try {\n      Logger.getInstance().debug(\"Registering Cordova Plugins Provider Factory: \",providerFactory)\n      console.log(\"Registering Cordova Plugins Provider: \", providerFactory)\n      this.providerFactories.push(providerFactory)\n    } catch (ex){\n      Logger.getInstance().error(\"Error registering Cordova Plugins Provider: \", ex)\n      console.error(\"Error registering Cordova Plugins Provider: \", ex)\n    }\n  }\n\n  public getProviderFactories():Array<CordovaPluginsProviderFactory>{\n    return this.providerFactories;\n  }\n\n}\n"]}