{"version":3,"file":"ServerManager.js","sourceRoot":"","sources":["../../../src/DEWorkbench/services/ServerManager.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { Logger } from '../../logger/Logger'\nimport { CordovaPlugin } from '../../cordova/Cordova'\nimport { EventBus } from '../EventBus'\nimport { GlobalPreferences } from '../GlobalPreferences'\nimport { UINotifications } from '../../ui-components/UINotifications'\n\nconst _ = require('lodash');\nconst GUID = require('guid');\nvar md5 = require('md5');\n\nexport enum ServerStatus {\n  Stopped = 0,\n  Starting,\n  Running,\n  Stopping\n}\n\nexport interface ServerInstance {\n  start();\n  stop();\n  status:ServerStatus;\n  configure(configuration:any);\n  addEventListener(event:string, listener);\n  removeEventListener(event:string, listener);\n  getConfigurator(configuration:any):ServerInstanceConfigurator;\n}\n\nexport interface ServerInstanceConfigurator {\n    getConfiguration():any;\n    addEventListener(event:string, listener);\n    removeEventListener(event:string, listener);\n    getConfigurationPane():HTMLElement;\n    revertChanges();\n    applyConfiguration(configuration:any);\n}\n\nexport interface ServerProvider {\n  createInstance(configuration:any):ServerInstance;\n  destroyInstance(instance:ServerInstance);\n  getProviderName():string;\n}\n\nexport class ServerManager {\n\n  public static get EVT_PROVIDER_REGISTERED():string { return \"dewb.serverManager.provider.registered\"; }\n  public static get EVT_SERVER_INSTANCE_CREATED():string { return \"dewb.serverManager.serverInstance.created\"; }\n  public static get EVT_SERVER_INSTANCE_REMOVED():string { return \"dewb.serverManager.serverInstance.removed\"; }\n  public static get EVT_SERVER_INSTANCE_CONFIG_CHANGED():string { return \"dewb.serverManager.serverInstance.configChanged\"; }\n  public static get EVT_SERVER_INSTANCE_NAME_CHANGED():string { return \"dewb.serverManager.serverInstance.nameChanged\"; }\n  public static get EVT_SERVER_INSTANCE_STATUS_CHANGED():string { return \"dewb.serverManager.serverInstance.statusChange\"; }\n\n\n  private static instance:ServerManager;\n  private providers:Array<ServerProviderWrapper>\n  private instances:Array<ServerInstanceWrapper>\n  private pendingConfigInstances:Array<any> //are the configured instances, ready to instantiated when the provider will ben installed\n  //private _preferences:GlobalPreferences;\n\n  private constructor() {\n    Logger.getInstance().debug(\"Creating ServerManager...\")\n    this.providers = [];\n    this.instances = [];\n    //this._preferences = GlobalPreferences.getInstance();\n    //let instances = this._preferences.get('/server/instances')\n    this.checkForDefaultPreferences();\n    this.reloadFromConfiguration();\n  }\n\n  static getInstance() {\n      if (!ServerManager.instance) {\n          ServerManager.instance = new ServerManager();\n      }\n      return ServerManager.instance;\n  }\n\n  protected checkForDefaultPreferences(){\n    let preferences = GlobalPreferences.getInstance();\n    let serverPrefs = preferences.get('server')\n    if (!serverPrefs){\n      preferences.save('/server', { instances: [] })\n    }\n    let instancesPrefs = preferences.get('/server/instances')\n    if (!instancesPrefs){\n      preferences.save('/server/instances', [])\n    }\n  }\n\n  /**\n   * Reload global preferences and restore saved instances\n   */\n  protected reloadFromConfiguration(){\n    return new Promise((resolve,reject)=>{\n      let preferences = GlobalPreferences.getInstance();\n      let instances = preferences.get('/server/instances')\n      if (!instances){\n        instances = [];\n      }\n      this.pendingConfigInstances = _.cloneDeep(instances);\n      this.checkForPendingInstances();\n      resolve(\"done\")\n    });\n  }\n\n  public loadSettingsForServerInstance(instanceId:string):any {\n    let preferences = GlobalPreferences.getInstance();\n    let instances = preferences.get('/server/instances')\n    if (!instances){\n      instances = [];\n    }\n    let instance = _.find(instances, { serverInstanceId : instanceId});\n    return instance;\n  }\n\n  /**\n   * This method check pending instances for instantiation\n   */\n  protected async checkForPendingInstances():Promise<any>{\n    for (var i=0;i<this.pendingConfigInstances.length;i++){\n      let pendingInstance = this.pendingConfigInstances[i];\n      let providerName = pendingInstance[\"providerName\"];\n      let providerId = pendingInstance[\"providerId\"];\n      let serverInstanceId = pendingInstance[\"serverInstanceId\"];\n      let instanceName = pendingInstance[\"instanceName\"];\n      let serverProvider = this.getProviderById(providerId);\n      if (serverProvider){\n        console.log(\"Server provider \" + providerName +\" available. Creating instance...\")\n        let serverInstance = await this.restoreServerInstance(providerId, instanceName, serverInstanceId, pendingInstance[\"configuration\"])\n        let newInstanceId = serverInstance.instanceId;\n        //TODO!! change id on config\n        this.pendingConfigInstances[i][\"toRemove\"] = true;\n      } else {\n        console.log(\"Server provider: \" + providerName +\" not yet available.\")\n      }\n    }\n    //then remove all marked \"toRemove\"\n    _.remove(this.pendingConfigInstances, function (intance) {\n        return intance[\"toRemove\"]\n    });\n  }\n\n  /**\n   * Register a new server provider\n   */\n  public registerProvider(provider:ServerProvider):ServerProviderWrapper{\n    try {\n      Logger.getInstance().debug(\"Registering Server Provider: \",provider)\n      console.log(\"Registering Server Provider: \", provider)\n      let wrapper = new ServerProviderWrapper(provider);\n      this.providers.push(wrapper)\n      this.checkForPendingInstances();\n      EventBus.getInstance().publish(ServerManager.EVT_PROVIDER_REGISTERED, wrapper);\n      return wrapper;\n    } catch (ex){\n      Logger.getInstance().error(\"Error registering Server Provider: \", ex)\n      console.error(\"Error registering Server Provider: \", ex)\n      throw ex;\n    }\n  }\n\n  /**\n   * Return the list of registered providers\n   */\n  public getProviders():Array<ServerProviderWrapper>{\n    return this.providers;\n  }\n\n  protected getProviderByName(providerName:string):ServerProviderWrapper {\n      for (var i=0;i<this.providers.length;i++){\n        if (this.providers[i].getProviderName()===providerName){\n          return this.providers[i];\n        }\n      }\n      return null;\n  }\n\n  protected getProviderById(providerId:string):ServerProviderWrapper {\n    return _.find(this.providers, { id : providerId});\n  }\n\n  /**\n   * Restore a global preferences saved instanceName\n   */\n  protected restoreServerInstance(providerId:string, instanceName:string, previousInstanceId:string, configuration:any):ServerInstanceWrapper{\n      let serverProvider:ServerProviderWrapper = this.getProviderById(providerId);\n      if (serverProvider){\n        Logger.getInstance().info(\"Restoring server instance for \" + serverProvider.getProviderName()+\"...\")\n        let instance = serverProvider.createInstance(configuration);\n        let wrapper =  this.registerInstance(serverProvider.getProviderName(), serverProvider.id, instanceName, instance, configuration, previousInstanceId)\n        EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_CREATED, wrapper);\n        Logger.getInstance().info(\"Server instance restored \" + serverProvider.getProviderName()+\" [instanceId:\"+wrapper.instanceId+\"].\")\n        return wrapper;\n      } else {\n        Logger.getInstance().error(\"Error restoring server instance for \" + serverProvider.getProviderName()+\": Provider not found.\")\n        throw(\"Server Provider not found for '\"+ providerId +\"'.\")\n      }\n  }\n\n  /**\n   * Create a new server instance\n   */\n  public createServerInstance(providerId:string, instanceName:string, configuration:any):ServerInstanceWrapper {\n      let serverProvider:ServerProviderWrapper = this.getProviderById(providerId);\n      if (serverProvider){\n        Logger.getInstance().info(\"Creating new server instance for \" + serverProvider.getProviderName()+\"...\")\n        let instance = serverProvider.createInstance(configuration);\n        let wrapper =  this.registerInstance(serverProvider.getProviderName(), serverProvider.id, instanceName, instance, configuration);\n        EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_CREATED, wrapper);\n        Logger.getInstance().info(\"New server instance created \" + serverProvider.getProviderName()+\" [instanceId:\"+wrapper.instanceId+\"].\")\n        return wrapper\n      } else {\n        Logger.getInstance().error(\"Error creating new server instance for \" + serverProvider.getProviderName()+\": Provider not found.\")\n        throw (\"Server Provider not found for '\"+ providerId +\"'.\")\n      }\n  }\n\n  public removeServerInstance(serverInstance:ServerInstance){\n    let wrapped = this.getInstanceWrapper(serverInstance);\n    let instanceId = wrapped;\n    let instanceName = wrapped.name;\n    if (wrapped.status===ServerStatus.Running){\n      wrapped.stop()\n    }\n    this.unregisterInstance(wrapped)\n\n    //from now wrapped instance is invalid\n    Logger.getInstance().info(\"Server instance removed \" + wrapped.name +\" [instanceId:\"+instanceId+\"].\")\n    UINotifications.showInfo(\"Server '\" + instanceName +\"' was removed.\")\n  }\n\n  /**\n   * Register a new server instance\n   */\n  private registerInstance(providerName:string, providerId:string, instanceName:string, serverInstance:ServerInstance, configuration:any, oldServerInstanceId?:string):ServerInstanceWrapper {\n    Logger.getInstance().debug(\"Registering new server instance for provider=\" + providerName +\"...\")\n      let wrapper = new ServerInstanceWrapper(providerName, instanceName, serverInstance, configuration)\n      let preferences = GlobalPreferences.getInstance();\n\n      let prefInstances = preferences.get('/server/instances');\n      if (!prefInstances){\n        prefInstances = [];\n      }\n\n      if (oldServerInstanceId){\n        //update existing\n        let instance = _.find(prefInstances, { serverInstanceId : oldServerInstanceId});\n        instance[\"serverInstanceId\"] = wrapper.instanceId;\n      } else {\n        // store new\n        let instancePrefs = {\n          providerName: providerName,\n          providerId: providerId,\n          serverInstanceId: wrapper.instanceId,\n          instanceName: wrapper.name,\n          configuration: configuration\n        }\n        prefInstances.push(instancePrefs)\n      }\n\n      preferences.save('/server/instances', prefInstances);\n\n      Logger.getInstance().debug(\"New server instance registered with id=\" + wrapper.instanceId +\".\")\n      this.instances.push(wrapper)\n\n      //listen for events\n      wrapper.addEventListener('onDidStatusChange', (evt)=>{\n          this.onServerInstanceStatusChanged(evt)\n      })\n      return wrapper;\n  }\n\n  /**\n   * Store the new configuration into the global preferences\n   */\n  public storeInstanceConfiguration(instanceId:string, configuration:any):Promise<any>{\n    Logger.getInstance().debug(\"Saving server instance preferences for id=\" + instanceId +\"...\")\n    return new Promise((resolve,reject)=>{\n      let preferences = GlobalPreferences.getInstance();\n      let instances = preferences.get('/server/instances');\n      if (!instances){\n        Logger.getInstance().error(\"Error saving server instance preferences for id=\" + instanceId +\": server instance preferences not found.\")\n        reject(\"No server instances defined.\")\n        return;\n      }\n      let instance = _.find(instances, { serverInstanceId : instanceId});// _.find(instances, { serverInstanceId : instanceId});\n      if (!instance){\n        reject(\"Server instance not found.\")\n        Logger.getInstance().error(\"Error saving server instance preferences for id=\" + instanceId +\": server instance not found.\")\n        return;\n      }\n      instance.configuration = configuration;\n      preferences.save('/server/instances', instances);\n      let instanceWrapped = this.getInstanceById(instanceId);\n      EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_CONFIG_CHANGED, instanceWrapped);\n      Logger.getInstance().debug(\"Server instance preferences saved for id=\" + instanceId +\".\")\n      resolve(instanceId);\n    })\n  }\n\n  /**\n   * Store the new configuration into the global preferences\n   */\n  public changeInstanceName(instanceId:string, name:string):Promise<any>{\n    return new Promise((resolve,reject)=>{\n      let preferences = GlobalPreferences.getInstance();\n      let instances = preferences.get('/server/instances');\n      if (!instances){\n        Logger.getInstance().error(\"Error changing server instance name for id=\" + instanceId +\": server instance preferences not found.\")\n        reject(\"No server instances defined.\")\n        return;\n      }\n      let instance = _.find(instances, { serverInstanceId : instanceId});// _.find(instances, { serverInstanceId : instanceId});\n      if (!instance){\n        reject(\"Server instance not found.\")\n        Logger.getInstance().error(\"Error changing server instance name for id=\" + instanceId +\": server instance not found.\")\n        return;\n      }\n      instance.instanceName = name;\n      preferences.save('/server/instances', instances);\n      let instanceWrapped = this.getInstanceById(instanceId);\n      instanceWrapped.setName(name);\n      EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_NAME_CHANGED, instanceWrapped);\n      Logger.getInstance().debug(\"Server instance name changed to '\"+ name +\"' for id=\" + instanceId +\".\")\n      resolve(instanceId);\n    })\n  }\n\n  private onServerInstanceStatusChanged(serverInstance:ServerInstance){\n    let wrapper = this.getInstanceWrapper(serverInstance)\n    if (wrapper){\n      Logger.getInstance().info(\"Server \"+ wrapper.name +\"' [\"+ wrapper.instanceId +\"] now is \" + wrapper.statusStr)\n      EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_STATUS_CHANGED, wrapper)\n      UINotifications.showInfo(\"Server '\" + wrapper.name +\"' is now \" + wrapper.statusStr)\n    } else {\n      //nop, probably alredy removed\n    }\n  }\n\n  /**\n   * Unregister an instance\n   */\n  private unregisterInstance(instanceWrapped:ServerInstanceWrapper){\n    let instanceId = instanceWrapped.instanceId;\n    let instanceName = instanceWrapped.name;\n    let preferences = GlobalPreferences.getInstance();\n    let prefInstances = preferences.get('/server/instances');\n    if (!prefInstances){\n      prefInstances = [];\n    }\n    _.remove(prefInstances, { serverInstanceId : instanceWrapped.instanceId})\n    preferences.save('/server/instances', prefInstances);\n\n    _.remove(this.instances, { instanceId : instanceWrapped.instanceId})\n    instanceWrapped.destroy();\n\n    EventBus.getInstance().publish(ServerManager.EVT_SERVER_INSTANCE_REMOVED, instanceId);\n  }\n\n  /**\n   * Return all current instances\n   */\n  public getInstances():Array<ServerInstanceWrapper>{\n      return this.instances;\n  }\n\n  /**\n   * Return instances for a given provider\n   */\n  public getInstancesForProvider(providerName:string):Array<ServerInstanceWrapper>{\n      return _.filter(this.instances, { provider : providerName});\n  }\n\n  public getInstanceById(instanceId:string):ServerInstanceWrapper {\n    return _.find(this.instances, { instanceId : instanceId});\n  }\n\n  /**\n   * Return the wrapper for the given instance\n   */\n  private getInstanceWrapper(serverInstance:ServerInstance):ServerInstanceWrapper{\n    if (serverInstance instanceof ServerInstanceWrapper){\n      return serverInstance\n    }\n    for (var i=0;i<this.instances.length;i++){\n      if (this.instances[i].serverInstance===serverInstance){\n        return (this.instances[i]);\n      }\n    }\n    return null;\n  }\n\n}\n\nexport class ServerProviderWrapper implements ServerProvider {\n  _provider: ServerProvider;\n  _id: string;\n  constructor(serverProvider:ServerProvider){\n    this._provider = serverProvider;\n    this._id = ServerProviderWrapper.idFromName(this._provider.getProviderName());\n  }\n  createInstance(configuration:any):ServerInstance {\n    return this._provider.createInstance(configuration)\n  }\n  destroyInstance(instance:ServerInstance) {\n    this._provider.destroyInstance(instance)\n  }\n  getProviderName():string {\n    return this._provider.getProviderName()\n  }\n  public get id():string {\n    return this._id;\n  }\n  public provider():ServerProvider {\n    return this._provider\n  }\n  public static idFromName(name:string):string{\n    let id = md5(name)\n    return id;\n  }\n\n}\n\nexport class ServerInstanceWrapper implements ServerInstance {\n\n  _serverInstance: ServerInstance;\n  _instanceId: string;\n  _configuration:any;\n  _providerName: any;\n  _name:string;\n\n  constructor(providerName:string, instanceName:string, serverInstance: ServerInstance, configuration:any){\n    this._instanceId = GUID.raw();\n    this._providerName = providerName;\n    this._name = instanceName;\n    this._configuration = configuration;\n    this._serverInstance = serverInstance;\n    this._serverInstance.addEventListener('onDidStatusChange',this.onDidStatusChange)\n  }\n\n  public get name():string{\n    return this._name;\n  }\n\n  public get provider():string{\n    return this._providerName;\n  }\n\n  protected onDidStatusChange(evt){\n    //TODO!!\n  }\n\n  public get configuration():any {\n    return this._configuration;\n  }\n\n  public get serverInstance():ServerInstance {\n    return this._serverInstance\n  }\n\n  public get instanceId():string{\n    return this._instanceId;\n  }\n\n  public destroy(){\n    this._serverInstance.removeEventListener('onDidStatusChange', this.onDidStatusChange)\n  }\n\n  public start(){\n    try {\n      this._serverInstance.start();\n    } catch(err){\n      UINotifications.showError(\"Start '\" + this._name + \"' Server Error:\\n\" + err)\n    }\n  }\n\n  public stop(){\n    try {\n      this._serverInstance.stop();\n    } catch(err){\n      UINotifications.showError(\"Stop '\" + this._name + \"' Server Error: \" + err)\n    }\n  }\n\n  public configure(configuration:any){\n    this._serverInstance.configure(configuration);\n  }\n\n  addEventListener(event:string, listener) {\n    this._serverInstance.addEventListener(event, listener);\n  }\n\n  removeEventListener(event:string, listener){\n    this._serverInstance.removeEventListener(event, listener);\n  }\n\n  public get status():ServerStatus{\n      return this._serverInstance.status;\n  }\n\n  getConfigurator(configuration:any):ServerInstanceConfigurator {\n    return this._serverInstance.getConfigurator(configuration);\n  }\n\n  public setName(name:string){\n    this._name = name;\n  }\n\n  public get statusStr():string{\n    if (this.status===ServerStatus.Running){\n      return \"Running\"\n    }\n    else if (this.status===ServerStatus.Stopped){\n      return \"Stopped\"\n    }\n    else if (this.status===ServerStatus.Starting){\n      return \"Starting\"\n    }\n    else if (this.status===ServerStatus.Stopping){\n      return \"Stopping\"\n    }\n  }\n\n\n}\n"]}