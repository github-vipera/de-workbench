{"version":3,"file":"ExternalServerManager.js","sourceRoot":"","sources":["../../../src/DEWorkbench/services/ExternalServerManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAA;AAI5C,MAAM,CAAN,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,qDAAW,CAAA;IACX,uDAAQ,CAAA;IACR,qDAAO,CAAA;IACP,uDAAQ,CAAA;AACV,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB;AAcD,MAAM;IAMJ;QACE,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAA;QAC/D,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,WAAW;QACd,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClC,qBAAqB,CAAC,QAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;QACjE,CAAC;QACD,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAEM,gBAAgB,CAAC,QAAuB;QAC7C,IAAI,CAAC;YACH,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,+BAA+B,EAAC,QAAQ,CAAC,CAAA;YACpE,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAA;YACtD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC/B,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC;YACX,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAA;YACrE,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAA;QAC1D,CAAC;IACH,CAAC;IAEM,YAAY;QACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAES,iBAAiB,CAAC,YAAmB;QAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;YACxC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,KAAG,YAAY,CAAC,CAAA,CAAC;gBACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,oBAAoB,CAAC,YAAmB,EAAE,aAAiB;QAChE,IAAI,cAAc,GAAkB,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,cAAc,CAAC,CAAA,CAAC;YAClB,IAAI,QAAQ,GAAG,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC5D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAC7B,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,iCAAiC,GAAE,YAAY,GAAE,IAAI,CAAC,CAAA;QAC/D,CAAC;IACH,CAAC;CAGF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nimport { Logger } from '../../logger/Logger'\nimport { CordovaPlugin } from '../../cordova/Cordova'\n\n\nexport enum ServerStatus {\n  Stopped = 0,\n  Starting,\n  Running,\n  Stopping\n}\n\nexport interface ServerInstance {\n  start();\n  stop();\n  status:ServerStatus;\n  configure();\n}\n\nexport interface ServerProvider {\n  createInstance(configuration:any):ServerInstance;\n  getProviderName():string;\n}\n\nexport class ExternalServerManager {\n\n  private static instance:ExternalServerManager;\n  private providers:Array<ServerProvider>\n  private instances:Array<ServerInstance>\n\n  private constructor() {\n    Logger.getInstance().debug(\"Creating ExternalServerManager...\")\n    this.providers = [];\n    this.instances = [];\n  }\n\n  static getInstance() {\n      if (!ExternalServerManager.instance) {\n          ExternalServerManager.instance = new ExternalServerManager();\n      }\n      return ExternalServerManager.instance;\n  }\n\n  public registerProvider(provider:ServerProvider){\n    try {\n      Logger.getInstance().debug(\"Registering Server Provider: \",provider)\n      console.log(\"Registering Server Provider: \", provider)\n      this.providers.push(provider)\n    } catch (ex){\n      Logger.getInstance().error(\"Error registering Server Provider: \", ex)\n      console.error(\"Error registering Server Provider: \", ex)\n    }\n  }\n\n  public getProviders():Array<ServerProvider>{\n    return this.providers;\n  }\n\n  protected getProviderByName(providerName:string):ServerProvider {\n      for (var i=0;i<this.providers.length;i++){\n        if (this.providers[i].getProviderName()===providerName){\n          return this.providers[i];\n        }\n      }\n      return null;\n  }\n\n  public createServerInstance(providerName:string, configuration:any):ServerInstance{\n    let serverProvider:ServerProvider = this.getProviderByName(providerName);\n    if (serverProvider){\n      let instance = serverProvider.createInstance(configuration);\n      this.instances.push(instance)\n      return instance;\n    } else {\n      throw (\"Server Provider not found for '\"+ providerName +\"'.\")\n    }\n  }\n\n\n}\n"]}