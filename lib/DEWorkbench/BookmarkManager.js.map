{"version":3,"file":"BookmarkManager.js","sourceRoot":"","sources":["../../src/DEWorkbench/BookmarkManager.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { ProjectManager } from './ProjectManager'\n\nexport interface Bookmark {\n  lineNumber: number,\n  filePath: string,\n  marker: any,\n  id:string\n}\nimport { get } from 'lodash'\nimport { EventEmitter }  from 'events'\nimport { EventBus } from './EventBus'\nconst GUID = require('guid');\nconst _ = require('lodash');\n\nexport type Bookmarks = Array<Bookmark>\n\nexport class BookmarkManager {\n\n  public static get EVT_BOOKMARK_ADDED():string { return \"dewb.workbench.bookmarks.bookmarkAdded\" }\n  public static get EVT_BOOKMARK_REMOVED():string { return \"dewb.workbench.bookmarks.bookmarkRemoved\" }\n\n  private static instance: BookmarkManager;\n  protected bookmarks:Bookmarks;\n  protected events:EventEmitter;\n\n  static getInstance() {\n      if (!BookmarkManager.instance) {\n          BookmarkManager.instance = new BookmarkManager();\n      }\n      return BookmarkManager.instance;\n  }\n\n  private constructor() {\n    this.init();\n  }\n\n  protected init(){\n    this.events = new EventEmitter();\n    this.bookmarks = [];\n\n    atom.workspace['observeActivePaneItem']((editor) => {\n      if (editor) {\n        this.addFeatures(editor)\n      }\n    })\n\n    this.reloadBookmarks();\n  }\n\n  public getBookmarkById(bookmarkId:string):Bookmark{\n    return  _.find(this.bookmarks, {id:bookmarkId});\n  }\n\n  public getBookmarks():Bookmarks {\n    return this.bookmarks;\n  }\n\n  async reloadBookmarks():Promise<any>{\n      //TODO!!\n      this.bookmarks = [];\n  }\n\n  async storeBookmarks():Promise<any>{\n      //TODO!!\n  }\n\n  async addFeatures (editor) {\n    // restore bookmarks\n    if (get(editor, 'getPath', false)) {\n      let sourceFile = editor.getPath()\n      let bookmarks = this.getBookmarksFromFile(sourceFile)\n      bookmarks.forEach((bookmark: Bookmark) => {\n        if (bookmark.marker) bookmark.marker.destroy()\n        bookmark.marker = this.createBookmarkMarkerForEditor(editor, bookmark.lineNumber)\n      })\n      //this.currentEditor = editor\n      if (get(editor, 'element.addEventListener', false)&&\n        !get(editor, 'element.__dewbEnabledFeatures', false)) {\n        let bookmarkHandler = (e) => {\n          this.addBookmarkFromEvent(e, editor)\n        }\n        // add bookmark handler\n        editor.element.__dewbEnabledFeatures = true\n        editor.element.addEventListener('click', bookmarkHandler)\n        editor.onDidDestroy(() => {\n          editor.element.removeEventListener('click', bookmarkHandler)\n        })\n      }\n    }\n  }\n\n  public async addBookmark(marker: any, lineNumber: number, filePath: string): Promise<Bookmark> {\n    let id = this.createBookmarkId(lineNumber, filePath);\n    let bookmark = {\n        lineNumber,\n        filePath,\n        marker,\n        id\n      } as Bookmark\n      this.bookmarks.push(bookmark);\n      await this.storeBookmarks();\n      return bookmark;\n  }\n\n  protected createBookmarkId(lineNumber: number, filePath: string){\n    return GUID.raw();\n  }\n\n  private createBookmarkMarkerForEditor (editor: any, lineNumber: any) {\n    let range = [[lineNumber, 0], [lineNumber, 0]]\n    let marker = editor.markBufferRange(range)\n    let decorator = editor.decorateMarker(marker, {\n      type: 'line-number',\n      class: 'bookmarked dewb-bookmark' // dewb-bookmark'\n    })\n    return marker\n  }\n\n  getBookmarksFromFile(filePath: String): Bookmarks {\n    return this.bookmarks.filter((item) => {\n      return (item.filePath === filePath)\n    })\n  }\n\n\n\n  private addBookmarkFromEvent (e: MouseEvent, editor: any) {\n    let element = e.target as HTMLElement\n    if (element.classList.contains('line-number') && e.shiftKey) {\n      // toggle bookmark\n      let lineNumber = Number(element.textContent) - 1\n      if (lineNumber >= 0) {\n        let sourceFile = editor.getPath()\n        let exists = this.getBookmark(sourceFile, lineNumber)\n        if (exists) {\n          this.removeBookmark(exists)\n        } else {\n          let marker = this.createBookmarkMarkerForEditor(editor, lineNumber)\n          this\n            .addBookmark(marker, lineNumber, sourceFile)\n            .then((bookmark) => {\n              this.events.emit('didAddBookmark', sourceFile, lineNumber)\n              EventBus.getInstance().publish(BookmarkManager.EVT_BOOKMARK_ADDED, bookmark);\n            })\n        }\n        this.events.emit('didChange')\n      }\n    }\n  }\n\n  removeBookmark (bookmark: Bookmark): Promise<boolean> {\n    return new Promise ((resolve, reject) => {\n      let index = this.bookmarks.indexOf(bookmark)\n      if(index != -1) {\n        if (bookmark.marker) bookmark.marker.destroy()\n      \tthis.bookmarks.splice(index, 1)\n        EventBus.getInstance().publish(BookmarkManager.EVT_BOOKMARK_REMOVED, bookmark);\n        return resolve(true)\n      }\n      return reject('Breakpoint does not exists')\n    })\n  }\n\n  getBookmark (filePath: String, lineNumber: Number): Bookmark {\n    let index = this.bookmarks.findIndex((item) => {\n      return (item.filePath === filePath && item.lineNumber === lineNumber)\n    })\n    return this.bookmarks[index]\n  }\n\n  public deleteBookmarkById(bookmarkId:string):boolean{\n    let beforeLen = this.bookmarks.length;\n    let bookmark = this.getBookmarkById(bookmarkId);\n    this.removeBookmark(bookmark)\n    let afterLen = this.bookmarks.length;\n    return (beforeLen>afterLen)\n  }\n\n}\n"]}