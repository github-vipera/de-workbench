{"version":3,"file":"CordovaPluginScanner.js","sourceRoot":"","sources":["../../src/cordova/CordovaPluginScanner.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * CordovaUtils - Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\")\nconst xml2js = require('xml2js');\n\nexport class CordovaPluginScanner {\n\n  private pluginIds: Array<string>;\n  private path: string;\n  private pluginsPath: string;\n  private fetchJson: any;\n  private completionCallback: Function;\n  private scanningPlugins: number;\n\n  constructor() {\n  }\n\n  scan(projectRootPath: string, callbackFunc) {\n    console.log(\"Scanning folder '\" + path + \"' for plugins...\");\n    try {\n      this.pluginIds = new Array();\n      this.path = projectRootPath;\n      this.pluginsPath = projectRootPath + \"/plugins\";\n      this.fetchJson = JSON.parse(fs.readFileSync(this.pluginsPath + \"/fetch.json\", 'utf8'));\n      this.completionCallback = callbackFunc;\n      this.scanningPlugins = 0;\n\n      console.log(\"Plugins loaded: \" + JSON.stringify(this.fetchJson));\n\n      //mark total plugins to notify when completed\n      this.scanningPlugins = Object.keys(this.fetchJson).length;\n      if (this.scanningPlugins === 0) {\n        this.completionCallback(this.getInstalledPlugin());\n        return true;\n      }\n\n      for (var pluginId in this.fetchJson) {\n        var pluginInfo = this.fetchJson[pluginId];\n        var path = this.pluginsPath + \"/\" + pluginId;\n        if (pluginInfo.source.type === 'local') {\n          if (pluginInfo.source.path && pluginInfo.source.path.startsWith(\".\")) {\n            path = this.path + \"/\" + pluginInfo.source.path;\n          } else {\n            path = pluginInfo.source.path;\n          }\n        }\n        try {\n          this.scanPlugin(pluginId, path);\n        } catch (ex) {\n          console.log(\"Error in plugin scan: \" + ex);\n        }\n      }\n\n      return true;\n    } catch (err) {\n      this.fetchJson = {};\n      //atom.notifications.addError(\"Uhm...this project does not seem to be a Cordova project.\");\n      console.log(\"Error: \" + err);\n    }\n  }\n\n\n  scanPlugin(pluginId, path) {\n    var that = this;\n    console.log(\"scanPlugin for \" + pluginId + \" in path \" + path);\n    this.pluginIds.push(pluginId);\n    var parser = new xml2js.Parser();\n    fs.readFile(path + \"/plugin.xml\", function(err, data) {\n      if (err) {\n        console.error(\"Error scanning plugin '\" + pluginId + \"' in path \" + path + \":\", err);\n      } else {\n        parser.parseString(data, function(err, result) {\n          var pluginId = result.plugin.$.id;\n          that.fetchJson[pluginId].plugin = result.plugin;\n        });\n\n        let packageJsonJsonPath = path + \"/package.json\";\n        if (fs.existsSync(packageJsonJsonPath)){\n          try {\n            let packageJson = JSON.parse(fs.readFileSync(path + \"/package.json\", 'utf8'));\n            that.fetchJson[pluginId].packageJson = packageJson;\n          } catch (ex){\n              console.log(\"Error reading package.json: \", ex);\n          }\n        }\n\n      }\n      that.scanningPlugins--;\n      if (that.scanningPlugins == 0) {\n        that.completionCallback(that.getInstalledPlugin());\n      }\n    });\n\n  }\n\n  getInstalledPlugin() {\n    var countVal = Object.keys(this.fetchJson).length;\n    var ret = { plugins: this.fetchJson, count: countVal };\n    return ret;\n  }\n\n  isPluginInstalled(pluginId) {\n    var check = this.fetchJson[pluginId];\n    return ((check != null) && (check != undefined));\n  }\n\n\n}\n"]}