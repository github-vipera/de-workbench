{"version":3,"file":"CordovaTasks.js","sourceRoot":"","sources":["../../src/cordova/CordovaTasks.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport {Cordova, CordovaPlatform} from './Cordova'\nimport { CordovaDevice } from './CordovaDeviceManager'\n\nexport type CordovaTaskType = \"prepare\" | \"compile\" | \"build\" | \"run\" | \"buildRun\";\nexport interface TaskConstraints {\n  isDeviceEnabled:boolean,\n  isMockConfigEnabled:boolean,\n  isNodeTaskEnabled:boolean\n  isVariantEnabled:boolean\n  isEnvVarEnabled:boolean\n  isCustom?:boolean\n}\n\nexport interface CordovaCliOptions {\n  flags:Array<string>\n  envVariables:Array<{name:string, value:string}>\n}\n\n\nexport class CordovaTaskConfiguration {\n  private _name:string\n  private _displayName:string\n  private _taskType: CordovaTaskType\n  private _selectedPlatform: CordovaPlatform\n  private _variantName:string\n  private _isRelease:boolean\n  private _nodeTasks:Array<string>\n  private _device:CordovaDevice\n  private _envVariables: Array<{name:string, value:string}>\n  private _cliParams: Array<string>\n  private _constraints: TaskConstraints\n\n  constructor(name?:string,taskType?:CordovaTaskType){\n    this._name=name\n    this.taskType = taskType;\n  }\n\n  get name():string{\n    return this._name;\n  }\n\n  set name(value:string){\n    this._name=value;\n  }\n\n  get displayName():string{\n    return this._displayName;\n  }\n\n  set displayName(value:string){\n    this._displayName=value;\n  }\n\n  get taskType():CordovaTaskType{\n    return this._taskType;\n  }\n\n  set taskType(value:CordovaTaskType){\n    this._taskType = value;\n  }\n\n  get selectedPlatform():CordovaPlatform{\n    return this._selectedPlatform\n  }\n\n  set selectedPlatform(value:CordovaPlatform){\n    this._selectedPlatform = value;\n  }\n\n  get variantName():string{\n    return this._variantName\n  }\n\n  set variantName(value:string){\n    this._variantName = value;\n  }\n\n  get isRelease():boolean{\n    return this._isRelease\n  }\n\n  set isRelease(value:boolean){\n    this._isRelease = value;\n  }\n\n  get nodeTasks():Array<string>{\n    return this._nodeTasks\n  }\n\n  set nodeTasks(value:Array<string>){\n    this._nodeTasks = value;\n  }\n\n  get constraints():TaskConstraints {\n    return this._constraints;\n  }\n\n  set constraints(value:TaskConstraints) {\n    this._constraints=value;\n  }\n\n  get device():CordovaDevice {\n    return this._device;\n  }\n\n  set device(value:CordovaDevice) {\n    this._device=value;\n  }\n\n  get envVariables():Array<{name:string,value:string}> {\n    return this._envVariables;\n  }\n\n  set envVariables(value:Array<{name:string,value:string}>) {\n    this._envVariables=value;\n  }\n\n  get cliParams():Array<string> {\n    return this._cliParams;\n  }\n\n  set cliParams(value:Array<string>) {\n    this._cliParams=value;\n  }\n\n  static fromJSON(json:Object):CordovaTaskConfiguration {\n    let result=new CordovaTaskConfiguration();\n    Object.assign(result,json);\n    return result;\n  }\n\n  static toJSON(taskConfig: CordovaTaskConfiguration):string {\n    return JSON.stringify(taskConfig);\n  }\n\n}\n\nexport abstract class CordovaTask {\n  private _name:string;\n  private _configuration: CordovaTaskConfiguration;\n  constructor (name:string,configuration?:CordovaTaskConfiguration){\n    this._name=name;\n    this._configuration= configuration;\n  }\n\n  get name():string{\n    return this._name;\n  }\n\n  get configuration():CordovaTaskConfiguration{\n    return this._configuration;\n  }\n\n  set configuration(configuration:CordovaTaskConfiguration){\n    this._configuration= configuration;\n  }\n\n}\n"]}