{"version":3,"file":"CordovaExecutor.js","sourceRoot":"","sources":["../../src/cordova/CordovaExecutor.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAQX,MAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAC3C,MAAM,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;AAC7C,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAClC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChC,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C,MAAM,CAAC,MAAM,eAAe,GAAE,QAAQ,CAAA;AAEtC,MAAM,sBAAuB,SAAQ,eAAe;IAElD,YAAY,WAAmB;QAC7B,KAAK,CAAC,WAAW,CAAC,CAAC;IACrB,CAAC;IAKM,gBAAgB,CAAC,WAAgB;QACtC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,wCAAwC,EAAE,WAAW,CAAC,CAAC;QACjF,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACnC,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA,CAAC;YACrB,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAI,WAAW,CAAC,IAAI,CAAC,CAAC;QACzE,CAAC;QACD,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAClC,GAAG,GAAG,OAAO,CAAA;YACb,IAAI,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;YACnC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACtC,IAAI,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YACvC,GAAG,GAAG,OAAO,CAAA;YACb,IAAI,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;YACnC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACtC,IAAI,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YACxE,cAAc,GAAG,KAAK,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,GAAG,GAAG,SAAS,CAAA;YACf,IAAI,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC;QACD,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACvC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sBAAsB,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAA;gBAC9E,MAAM,CAAC,UAAU,CAAC,WAAW,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACvC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,sBAAsB,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBACjC,MAAM,CAAC,UAAU,CAAC,sBAAsB,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACpG,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sBAAsB,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBAC3G,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACf,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;wBAChD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;4BAC1C,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gCACpB,OAAO,CAAC,eAAe,CAAC,CAAC;4BAC3B,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACN,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;gCAClE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;4BAC9D,CAAC;wBACH,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;4BACT,MAAM,CAAC,mBAAmB,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC;wBACtC,CAAC,CAAC,CAAA;oBACJ,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;wBACT,MAAM,CAAC,mBAAmB,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC;oBACtC,CAAC,CAAC,CAAA;gBACJ,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,iBAAiB,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB,CAAC,WAAgB;QACxC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,6BAA6B,EAAE,WAAW,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACtE,EAAE,CAAA,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,SAAS,IAAI,kBAAkB,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;gBACnI,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,8BAA8B,EAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,SAAS,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAC,MAAM,CAAC,CAAC;YAC3F,CAAC;YAAA,IAAI,CAAC,CAAC;gBACL,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,WAAW,CAAC,WAAW,EAAE,YAAmB;QACjD,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAkB,GAAE,YAAY,GAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACjF,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,UAAU,EAAC,KAAK,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACtD,IAAI,YAAY,GAAG,GAAG,GAAG,YAAY,GAAE,GAAG,CAAC;QAC3C,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW,CAAC,IAAI;YACrB,QAAQ,EAAC,KAAK;SACjB,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sBAAsB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAA;gBACnG,MAAM,CAAC,UAAU,CAAC,uBAAuB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAChG,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,sBAAsB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,qBAAqB,YAAY,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACvH,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,qBAAqB,YAAY,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBAC9H,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,mBAAmB,CAAC,CAAC;gBAC9B,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,YAAY,CAAC,WAAW;QAC7B,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;QAChE,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,UAAU,EAAC,KAAK,EAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAC,CAAC,QAAQ,EAAE,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;YAC7B,YAAY,IAAI,GAAG,GAAG,QAAQ,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW,CAAC,IAAI;YACrB,QAAQ,EAAC,KAAK;SACjB,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sBAAsB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAA;gBACnG,MAAM,CAAC,UAAU,CAAC,uBAAuB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAChG,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,sBAAsB,YAAY,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,qBAAqB,YAAY,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACvH,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,qBAAqB,YAAY,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBAC9H,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,mBAAmB,CAAC,CAAC;gBAC/B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,mBAAmB,CAAC,CAAC;gBAC9B,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,cAAc,CAAC,WAAkB;QACtC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAA;QAC9D,IAAI,GAAG,GAAC,KAAK,CAAA;QACb,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,IAAI,OAAO,GAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAC5C,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAA;gBACpD,MAAM,CAAC,UAAU,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,gDAAgD,IAAI,EAAE,CAAC,CAAC;gBAC1E,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,gDAAgD,IAAI,EAAE,CAAC,CAAA;gBACjF,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,kBAAkB,CAAC,CAAC;gBAC9B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAC7B,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU;QAClD,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACxD,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAC,CAAC,QAAQ,EAAC,KAAK,EAAC,UAAU,CAAC,CAAC;QACrC,UAAU,GAAE,UAAU,IAAI,EAAE,CAAC;QAC7B,EAAE,CAAA,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAC,cAAc,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAC,UAAU,CAAC,UAAU,CAAC;QAC1C,CAAC;QACD,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW,CAAC,IAAI;YACrB,QAAQ,EAAC,KAAK;SACjB,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,oBAAoB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAA;gBAC/F,MAAM,CAAC,UAAU,CAAC,oBAAoB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,oBAAoB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,qBAAqB,UAAU,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACrH,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,mBAAmB,UAAU,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBAC1H,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBAC7B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,iBAAiB,CAAC,CAAC;gBAC5B,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,YAAY,CAAC,WAAW,EAAE,UAAU;QACzC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;QAC1D,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAC,CAAC,QAAQ,EAAC,QAAQ,EAAC,UAAU,CAAC,CAAC;QACxC,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW,CAAC,IAAI;YACrB,QAAQ,EAAC,KAAK;SACjB,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sBAAsB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAA;gBACjG,MAAM,CAAC,UAAU,CAAC,sBAAsB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YAC7F,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,sBAAsB,UAAU,SAAS,WAAW,CAAC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;YACzF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,uBAAuB,UAAU,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACvH,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,qBAAqB,UAAU,QAAQ,WAAW,CAAC,IAAI,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBAC5H,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,oBAAoB,CAAC,CAAC;gBAChC,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,oBAAoB,CAAC,CAAC;gBAC/B,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAGM,eAAe,CAAC,YAAY,EAAC,WAAkB;QACpD,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,6BAA6B,EAAE,YAAY,CAAC,CAAC;QACxE,CAAC,CAAC,OAAO,CAAC,YAAY,EAAC,CAAC,IAAI,EAAC,KAAK,EAAC,EAAE;YACnC,EAAE,CAAC,CAAC,OAAM,CAAC,IAAI,CAAC,KAAG,QAAQ,CAAC,CAAA,CAAC;gBAC3B,YAAY,CAAC,KAAK,CAAC,GAAC,IAAI,CAAC;YAC3B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,YAAY,CAAC,KAAK,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,UAAU,CAAC,gCAAgC,EAAC,YAAY,CAAC,CAAC;QACjE,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,UAAU,EAAC,QAAQ,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,OAAO,GAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAC5C,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,qBAAqB,YAAY,MAAM,IAAI,EAAE,CAAC,CAAA;gBACzE,MAAM,CAAC,UAAU,CAAC,qBAAqB,YAAY,MAAM,IAAI,EAAE,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAClE,OAAO,CAAC,KAAK,CAAC,qBAAqB,YAAY,MAAM,IAAI,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,qBAAqB,YAAY,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBAC/F,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,qBAAqB,YAAY,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBACtG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,sBAAsB,CAAC,CAAC;gBAClC,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,sBAAsB,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qBAAqB,CAAC,eAAsB;QACjD,MAAM,CAAC,IAAI,YAAY,EAAE,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;IACnE,CAAC;IAEM,QAAQ,CAAC,WAAkB,EAAC,QAAe,EAAC,UAAc;QAC/D,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAC,WAAW,EAAE,QAAQ,EAAC,UAAU,CAAC,CAAC;QAEnF,IAAI,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAA;QACvD,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,OAAO,EAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAC,CAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,GAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAC,GAAG,CAAC,CAAC;QAChD,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAA;gBAC3D,MAAM,CAAC,UAAU,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAC9D,OAAO,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,WAAW,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACjF,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBACxF,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBAC7B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,YAAY,CAAC,CAAC;gBACvB,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,WAAkB,EAAE,QAAe;QACjD,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAA,CAAC;YACX,IAAI,CAAC,CAAC,CAAC,GAAC,QAAQ,CAAC;QACnB,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,QAAQ,GAAC,KAAK,CAAC;QACjB,CAAC;QACD,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW;YAChB,QAAQ,EAAC,KAAK;SACjB,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAA;gBAC3D,MAAM,CAAC,UAAU,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBACxD,OAAO,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,WAAW,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBACjF,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBACxF,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,YAAY,CAAC,CAAC;gBACxB,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,YAAY,CAAC,CAAC;gBACvB,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,UAAU,CAAC,WAAkB,EAAE,QAAgB,EAAE,UAAe;QACrE,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,wBAAwB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAA;YACvD,IAAI,OAAO,GAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,GAAG,EAAC,OAAO,EAAC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;gBACzC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;oBACR,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAChC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;oBACrD,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,MAAM,CAAC;gBACT,CAAC;gBACD,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAC,WAAW,EAAC,QAAQ,CAAC,CAAC;gBACpE,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,0BAA0B,CAAC,WAAkB,EAAC,QAAgB,EAAC,UAAe;QACnF,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAC,QAAQ,EAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACzD,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC;YACZ,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB,CAAC,WAAkB;QAC9C,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAC,qCAAqC,CAAC,CAAC,CAAC;QAC/E,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAC,kCAAkC,CAAC,CAAC,CAAC;QAC5E,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAG,sDAAsD,CAAC,EAAC,WAAW,GAAG,yDAAyD,CAAC,CAAC;QACvK,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAG,+CAA+C,CAAC,EAAC,WAAW,GAAG,+CAA+C,CAAC,CAAC;IACxJ,CAAC;IAEO,qBAAqB,CAAC,UAAU;QACtC,EAAE,CAAA,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA,CAAC;YAC1B,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,EAAC,CAAC,MAAM,EAAE,EAAE;gBAC3C,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEO,4BAA4B,CAAC,UAAU;QAC7C,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpC,EAAE,CAAA,CAAC,UAAU,IAAI,UAAU,CAAC,YAAY,CAAC,CAAA,CAAC;YACxC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,EAAC,CAAC,MAAM,EAAE,EAAE;gBAC3C,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChF,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,aAAa,CAAC,QAAe;QACnC,IAAI,GAAG,GAAC,iBAAiB,CAAA;QACzB,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAA,CAAC;YACX,GAAG,IAAI,GAAG,GAAG,QAAQ,CAAC;QACxB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,UAAU,CAAC,WAAkB,EAAC,QAAe,EAAC,MAAa,EAAC,UAAc;QACxE,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,WAAW,EAAE,QAAQ,EAAC,MAAM,CAAC,CAAC;QAChF,MAAM,CAAC,UAAU,CAAC,6BAA6B,GAAG,QAAQ,EAAC,gBAAgB,EAAC,UAAU,CAAC,CAAC;QAExF,IAAI,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAC;QACxD,IAAI,GAAG,GAAC,SAAS,CAAA;QACjB,IAAI,IAAI,GAAG,CAAC,KAAK,EAAC,QAAQ,CAAC,CAAC;QAC5B,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,KAAK,eAAgB,CAAC,CAAA,CAAC;YACxC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,GAAG,MAAM,CAAC;QACjC,CAAC;QACD,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,EAAC,CAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,GAAC;YACR,GAAG,EAAE,WAAW;YAChB,QAAQ,EAAC,KAAK;YACd,GAAG,EAAC,GAAG;SACV,CAAC;QACF,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,SAAS,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAA;gBACzD,MAAM,CAAC,UAAU,CAAC,SAAS,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBACtD,OAAO,CAAC,KAAK,CAAC,SAAS,QAAQ,MAAM,IAAI,EAAE,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,CAAC,UAAU,CAAC,SAAS,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAC;gBAC/E,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,SAAS,QAAQ,oCAAoC,IAAI,EAAE,CAAC,CAAA;gBACtF,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAC;oBACb,OAAO,CAAC,eAAe,CAAC,CAAC;gBAC3B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,MAAM,CAAC,UAAU,CAAC,CAAC;gBACrB,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,QAAe;QACpC,EAAE,CAAA,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAA,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,GAAG,GAAC,cAAc,GAAG,QAAQ,GAAG,SAAS,CAAC;QAC9C,IAAI,OAAO,GAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,GAAG,EAAC,OAAO,EAAC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;gBACzC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;oBACR,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAChC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,MAAM,CAAC;gBACT,CAAC;gBACD,MAAM,CAAC,UAAU,CAAC,mCAAmC,GAAG,MAAM,CAAC,CAAC;gBAChE,IAAI,cAAc,GAAE,IAAI,YAAY,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC/D,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBACxC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS;QACP,KAAK,CAAC,SAAS,EAAE,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IACD,MAAM;QACJ,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC;IACnD,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nconst exec = require('child_process').exec;\nconst spawn = require('child_process').spawn;\nconst kill = require('tree-kill');\nconst fse = require('fs-extra');\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nimport { CommandExecutor } from '../utils/CommandExecutor';\nimport { Logger } from '../logger/Logger'\nimport { CordovaUtils } from './CordovaUtils'\n\nexport const DEVICE_AUTO_DEF =\"[AUTO]\"\n\nexport class CordovaExecutor extends CommandExecutor {\n\n  constructor(projectRoot: string) {\n    super(projectRoot);\n  }\n\n  /**\n   * Creates a new Cordova project with the given parameters\n   */\n  public createNewProject(projectInfo: any): Promise<any> {\n    Logger.getInstance().info(\"Creating new Cordova project with for \", projectInfo);\n    var cmd = \"\";\n    var args = [];\n    var options = this.getCmdOptions();\n    var execNpmInstall = false;\n    if (!projectInfo.path){\n      projectInfo.path = path.join(projectInfo.basePath ,  projectInfo.name);\n    }\n    if (projectInfo.type === 'ionic1') {\n      cmd = \"ionic\"\n      var newPath = projectInfo.basePath;\n      options = this.getCmdOptions(newPath);\n      args = [\"start\", projectInfo.name, projectInfo.template, \"--type\", \"ionic1\", \"--skip-link\"];\n    }\n    else if (projectInfo.type === 'ionic2') {\n      cmd = \"ionic\"\n      var newPath = projectInfo.basePath;\n      options = this.getCmdOptions(newPath);\n      args = [\"start\", projectInfo.name, projectInfo.template, \"--skip-link\"];\n      execNpmInstall = false;\n    } else {\n      //by default is cordova (projectInfo.type==='cordova')\n      cmd = \"cordova\"\n      args = [\"create\", projectInfo.path, projectInfo.packageId, projectInfo.name];\n    }\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve, reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n        Logger.getInstance().debug(`[Creating Project  ${projectInfo.name}]: ${data}`)\n        Logger.consoleLog(`[Build  ${projectInfo.name}]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n        Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n        console.error(`[Creating Project  ${projectInfo.name}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n        Logger.consoleLog(`[Creating Project  ${projectInfo.name}] child process exited with code ${code}`);\n        Logger.getInstance().info(`[Creating Project  ${projectInfo.name}] child process exited with code ${code}`)\n        this.spawnRef = undefined;\n        if (code === 0) {\n          this.removeAllPlatforms(projectInfo).then((res) => {\n            this.addPlatforms(projectInfo).then((res) => {\n              if (!execNpmInstall) {\n                resolve(\"Creation done\");\n              } else {\n                Logger.getInstance().info(\"This project requires npm install...\");\n                this.execNpmInstall(projectInfo.path).then(resolve, reject);\n              }\n            }, (err) => {\n              reject(\"Creation Failed (\"+err+\")\");\n            })\n          }, (err) => {\n            reject(\"Creation Failed (\"+err+\")\");\n          })\n        } else {\n          reject(\"Creation Failed\");\n        }\n      });\n    });\n  }\n\n  public removeAllPlatforms(projectInfo: any): Promise<any>{\n    Logger.getInstance().info(\"Removing all platforms for \", projectInfo);\n    return new Promise((resolve,reject) => {\n      let installedPlatforms = this.getInstalledPlatforms(projectInfo.path);\n      if(installedPlatforms && installedPlatforms.installed && installedPlatforms.installed.length > 0 && installedPlatforms.installed[0]){\n        Logger.getInstance().info(\"Detected installed platform,\",JSON.stringify(installedPlatforms.installed));\n        this.removePlatforms(installedPlatforms.installed,projectInfo.path).then(resolve,reject);\n      }else {\n        resolve();\n      }\n    });\n  }\n\n  public addPlatform(projectInfo, platformName:string): Promise<any>{\n    Logger.getInstance().info(\"Adding platform \"+ platformName+\" for \", projectInfo);\n    var cmd=\"cordova\"\n    var args = [\"platform\",\"add\", platformName, \"--save\"];\n    var platformsStr = \" \" + platformName +\" \";\n    var options={\n        cwd: projectInfo.path,\n        detached:false\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Adding platform  [${platformsStr}] to  ${projectInfo.name}]: ${data}`)\n          Logger.consoleLog(`[Adding platforms  [${platformsStr}] to  ${projectInfo.name}]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n          console.error(`[Adding platform  [${platformsStr}] to  ${projectInfo.name}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Adding Platform [${platformsStr}] to ${projectInfo.name}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Adding Platform [${platformsStr}] to ${projectInfo.name}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Add Platform done\");\n          }else{\n            reject(\"Add Platform Fail\");\n          }\n      });\n    });\n  }\n\n  public addPlatforms(projectInfo): Promise<any>{\n    Logger.getInstance().info(\"Adding platforms for \", projectInfo);\n    var cmd=\"cordova\"\n    var args = [\"platform\",\"add\",\"--save\"];\n    var platformsStr = \"\";\n    _.forEach(projectInfo.platforms,(platform) => {\n      args[args.length] = platform;\n      platformsStr += \" \" + platform;\n    });\n    var options={\n        cwd: projectInfo.path,\n        detached:false\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Adding platform  [${platformsStr}] to  ${projectInfo.name}]: ${data}`)\n          Logger.consoleLog(`[Adding platforms  [${platformsStr}] to  ${projectInfo.name}]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n          console.error(`[Adding platform  [${platformsStr}] to  ${projectInfo.name}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Adding Platform [${platformsStr}] to ${projectInfo.name}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Adding Platform [${platformsStr}] to ${projectInfo.name}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Add Platform done\");\n          }else{\n            reject(\"Add Platform Fail\");\n          }\n      });\n    });\n  }\n\n  public execNpmInstall(projectRoot:string){\n    Logger.getInstance().info(\"execNpmInstall for: \", projectRoot)\n    var cmd=\"npm\"\n    var args = [\"install\"];\n    var options=this.getCmdOptions(projectRoot);\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[npm install]: ${data}`)\n          Logger.consoleLog(`[npm install]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[npm install] \" + data.toString())\n          console.error(`[npm install]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[npm install] child process exited with code ${code}`);\n          Logger.getInstance().info(`[npm install] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"npm install done\");\n          }else{\n            reject(\"npm install Fail\");\n          }\n      });\n    });\n  }\n\n  public addPlugin(projectInfo, pluginSpec, installOpt):Promise<any>{\n    Logger.getInstance().info(\"Adding plugin \", pluginSpec);\n    var cmd=\"cordova\"\n    var args=[\"plugin\",\"add\",pluginSpec];\n    installOpt= installOpt || {};\n    if(installOpt.searchPath){\n      args[args.length]='--searchpath';\n      args[args.length]=installOpt.searchPath;\n    }\n    var options={\n        cwd: projectInfo.path,\n        detached:false\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Adding Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`)\n          Logger.consoleLog(`[Adding Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n          console.error(`[Adding Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Adding Platform [${pluginSpec}] to ${projectInfo.name}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Adding Plugin [${pluginSpec}] to ${projectInfo.name}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Add Plugin done\");\n          }else{\n            reject(\"Add Plugin Fail\");\n          }\n      });\n    });\n  }\n\n  public removePlugin(projectInfo, pluginSpec):Promise<any>{\n    Logger.getInstance().info(\"Removing plugin \", pluginSpec);\n    var cmd=\"cordova\"\n    var args=[\"plugin\",\"remove\",pluginSpec];\n    var options={\n        cwd: projectInfo.path,\n        detached:false\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Removing Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`)\n          Logger.consoleLog(`[Removing Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`);\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n          console.error(`[Removing Plugin  [${pluginSpec}] to  ${projectInfo.name}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Removing Platform [${pluginSpec}] to ${projectInfo.name}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Removing Plugin [${pluginSpec}] to ${projectInfo.name}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Remove Plugin done\");\n          }else{\n            reject(\"Remove Plugin Fail\");\n          }\n      });\n    });\n  }\n\n\n  public removePlatforms(platformList,projectRoot:string){\n    Logger.getInstance().debug(\"removePlatforms called for \", platformList);\n    _.forEach(platformList,(item,index)=>{\n      if (typeof(item)===\"string\"){\n        platformList[index]=item;\n      } else {\n        platformList[index]=item.name;\n      }\n    })\n    Logger.consoleLog(\"Executing remove-platform for \",platformList);\n    var cmd=\"cordova\"\n    var args = [\"platform\",\"remove\",\"--save\"].concat(platformList);\n    var options=this.getCmdOptions(projectRoot);\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Remove-platform  ${platformList}]: ${data}`)\n          Logger.consoleLog(`[Remove-platform  ${platformList}]: ${data}`);\n      });\n\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[Remove-platform] \" + data.toString())\n          console.error(`[Remove-platform  ${platformList}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Remove-platform  ${platformList}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Remove-platform  ${platformList}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Remove-platform Done\");\n          }else{\n            reject(\"Remove-platform Fail\");\n          }\n      });\n    });\n  }\n\n  public getInstalledPlatforms(rootProjectPath:string):any{\n    return new CordovaUtils().getInstalledPlatforms(rootProjectPath);\n  }\n\n  public runBuild(projectRoot:string,platform:string,cliOptions:any){\n    Logger.getInstance().info(\"Executing build for \",projectRoot, platform,cliOptions);\n    //this.applyGlobalCliOptions(cliOptions);\n    var env = this.getGlobalEnvCloneWithOptions(cliOptions)\n    var cmd=\"cordova\"\n    var args = [\"build\",platform];\n    _.forEach(cliOptions.flags,(single) => {\n      args[args.length] = single;\n    });\n    var options=this.getCmdOptions(projectRoot,env);\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Build  ${platform}]: ${data}`)\n          Logger.consoleLog(`[Build  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[scriptTools] \" + data.toString())\n          console.error(`[Build  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Build  ${platform}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Build  ${platform}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Build done Done\");\n          }else{\n            reject(\"Build Fail\");\n          }\n      });\n    });\n  }\n\n  public runClean(projectRoot:string, platform:string){\n    Logger.getInstance().info(\"Executing clean for \", projectRoot, platform);\n    var cmd=\"cordova\"\n    var args = [\"clean\"];\n    if(platform){\n      args[1]=platform;\n    }else{\n      platform=\"all\";\n    }\n    var options={\n        cwd: projectRoot,\n        detached:false\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Clean  ${platform}]: ${data}`)\n          Logger.consoleLog(`[Clean  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[Clean] \" + data.toString())\n          console.error(`[Clean  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Clean  ${platform}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Clean  ${platform}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Clean Done\");\n          }else{\n            reject(\"Clean Fail\");\n          }\n      });\n    });\n  }\n\n  public runPrepare(projectRoot:string, platform?:string, cliOptions?:any){\n    Logger.getInstance().info(\"Executing prepare for \", projectRoot, platform);\n    return new Promise((resolve,reject) => {\n      var cmd = this.createPrepare(platform);\n      var env = this.getGlobalEnvCloneWithOptions(cliOptions)\n      var options=this.getCmdOptions(projectRoot,env);\n      exec(cmd,options,(error, stdout, stderr) => {\n        if(error){\n          console.error(error.toString());\n          Logger.getInstance().error(\"Prepare error: \", error);\n          reject(error);\n          return;\n        }\n        Logger.getInstance().info(\"Prepare done for \",projectRoot,platform);\n        Logger.consoleLog(\"exec prepare done\");\n        resolve();\n      });\n    });\n  }\n\n  public runPrepareWithBrowserPatch(projectRoot:string,platform?:string,cliOptions?:any){\n    return new Promise((resolve,reject) => {\n      this.runPrepare(projectRoot,platform,cliOptions).then(() => {\n        this.patchExtraBrowserFile(projectRoot);\n        resolve();\n      },(err) => {\n        reject(err);\n      });\n    });\n  }\n\n  private patchExtraBrowserFile(projectRoot:string){\n    fse.emptyDirSync(path.join(projectRoot,\"/platforms/browser/www/__dedebugger\"));\n    fse.emptyDirSync(path.join(projectRoot,\"/platforms/browser/www/socket.io\"));\n    fse.copySync(path.resolve(__dirname , \"../services/remote/injectedfiles/DEDebuggerClient.js\"),projectRoot + \"/platforms/browser/www/__dedebugger/DEDebuggerClient.js\");\n    fse.copySync(path.resolve(__dirname , \"../services/remote/injectedfiles/socket.io.js\"),projectRoot + \"/platforms/browser/www/socket.io/socket.io.js\");\n  }\n\n  private applyGlobalCliOptions(cliOptions){\n    if(cliOptions.envVariables){\n      _.forEach(cliOptions.envVariables,(single) => {\n        Logger.getInstance().debug(\"Set Env variable:\",single.name, \" \" , single.value);\n        process.env[single.name] = single.value;\n      });\n    }\n  }\n\n  private getGlobalEnvCloneWithOptions(cliOptions){\n    let cloneEnv = _.clone(process.env);\n    if(cliOptions && cliOptions.envVariables){\n      _.forEach(cliOptions.envVariables,(single) => {\n        Logger.getInstance().debug(\"Set Env variable:\",single.name, \" \" , single.value);\n        cloneEnv[single.name] = single.value;\n      });\n    }\n    return cloneEnv;\n  }\n\n  private createPrepare(platform:string):string{\n    let cmd=\"cordova prepare\"\n    if(platform){\n      cmd += \" \" + platform;\n    }\n    return cmd;\n  }\n\n  runProject(projectRoot:string,platform:string,target:string,cliOptions:any){\n    Logger.getInstance().info(\"Running project for \", projectRoot, platform,target);\n    Logger.consoleLog(\"Execute run with spawn for \" + platform,\"and cliOptions\",cliOptions);\n    //this.applyGlobalCliOptions(cliOptions);\n    var env = this.getGlobalEnvCloneWithOptions(cliOptions);\n    var cmd=\"cordova\"\n    var args = [\"run\",platform];\n    if(target && target !== DEVICE_AUTO_DEF ){\n      args[2] = \"--target=\" + target;\n    }\n    _.forEach(cliOptions.flags,(single) => {\n      args[args.length] = single;\n    });\n    var options={\n        cwd: projectRoot,\n        detached:false,\n        env:env\n    };\n    cmd = this.prepareCommand(cmd);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve,reject) => {\n      this.spawnRef.stdout.on('data', (data) => {\n          Logger.getInstance().debug(`[Run  ${platform}]: ${data}`)\n          Logger.consoleLog(`[Run  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.stderr.on('data', (data) => {\n          Logger.getInstance().error(\"[Run] \" + data.toString())\n          console.error(`[Run  ${platform}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n          Logger.consoleLog(`[Run  ${platform}] child process exited with code ${code}`);\n          Logger.getInstance().info(`[Run  ${platform}] child process exited with code ${code}`)\n          this.spawnRef = undefined;\n          if(code === 0){\n            resolve(\"Run done Done\");\n          }else{\n            reject(\"Run Fail\");\n          }\n      });\n    });\n  }\n\n  getAllDeviceByPlatform(platform:string):Promise<any>{\n    if(platform === \"browser\"){\n      return Promise.resolve([DEVICE_AUTO_DEF]);\n    }\n\n    var cmd=\"cordova run \" + platform + \" --list\";\n    var options=this.getCmdOptions();\n    return new Promise((resolve,reject) => {\n      exec(cmd,options,(error, stdout, stderr) => {\n        if(error){\n          console.error(error.toString());\n          reject(error);\n          return;\n        }\n        Logger.consoleLog(\"exec getAllDeviceByPlatform done \" + stdout);\n        var detectedDevice= new CordovaUtils().parseDeviceList(stdout);\n        detectedDevice.unshift(DEVICE_AUTO_DEF);\n        resolve(detectedDevice);\n      });\n    });\n  }\n\n  stopSpawn(){\n    super.stopSpawn();\n    if (!this.spawnRef) {\n      return;\n    }\n    kill(this.spawnRef.pid);\n  }\n  isBusy():boolean{\n    Logger.consoleLog(\"isBusy called\");\n    return (super.isBusy() || this.spawnRef != null);\n  }\n\n}\n"]}