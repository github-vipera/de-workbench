{"version":3,"file":"CordovaUtils.js","sourceRoot":"","sources":["../../src/cordova/CordovaUtils.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * CordovaUtils - Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\")\nimport { Logger } from '../logger/Logger'\n\nexport class CordovaUtils {\n\n  private atomProject:any;\n\n  constructor(){\n    this.atomProject = atom.project;\n  }\n\n  scanDeviceParts(parts:Array<String>){\n    var res = new Array();\n    for(var i=0; i< parts.length; i++){\n      if(parts[i] && !parts[i].endsWith(\":\")){\n        res.push(parts[i].trim());\n      }\n    }\n    return res;\n  }\n\n  scanPlatformParts(parts:Array<String>,skipBrowser:boolean){\n    var res={\n      installed:new Array(),\n      available:new Array(),\n    }\n    var sepCount=0;\n    for(var i=0; i<parts.length; i++){\n      if(parts[i]){\n        if(parts[i].endsWith(\":\") || parts[i].endsWith(\": \")){\n          sepCount++;\n        }else if(sepCount === 1 && !(skipBrowser && parts[i].indexOf(\"browser\") != -1 )){\n          res.installed.push(parts[i].trim());\n        }else if(sepCount === 2){\n          res.available.push(parts[i].trim());\n        }\n      }\n    }\n    return res;\n  }\n\n  public parseDeviceList(stringValue){\n      if(!stringValue){\n        return [];\n      }\n      var parts=stringValue.split('\\n');\n      var deviceList=this.scanDeviceParts(parts);\n      Logger.consoleLog(deviceList.toString());\n      return deviceList;\n    }\n\n    parsePlatformList(stringValue){\n      if(!stringValue){\n        return [];\n      }\n      var parts=stringValue.split('\\n');\n      var platforms=this.scanPlatformParts(parts,true);\n      return platforms;\n    }\n\n    getPlatformValue(item){\n      if(!item){\n        return undefined;\n      }\n      return item.split(\" \")[0];\n    }\n\n    parsePluginList(stringValue){\n      Logger.consoleLog(\"parsePluginList\");\n      var listParts=stringValue.split(\"\\n\");\n      var result=new Array();\n      _.forEach(listParts,(item)=>{\n        result.push(this.parsePluginRecord(item));\n      });\n      Logger.consoleLog(\"parsePluginsList results:\", result);\n      return result;\n    }\n\n    parsePluginRecord(record){\n      var values=record.split(\" \");\n      return{\n        id: values[0].trim(),\n        version: values[1].trim(),\n        name: values.slice(2).join(\" \").trim()\n      };\n    }\n\n    public getInstalledPlatforms(rootProjectPath:string){\n      if (!rootProjectPath){\n        return [];\n      }\n      var completePath = path.join(rootProjectPath, 'platforms/platforms.json');\n      if(!fs.existsSync(completePath)){\n        return [];\n      }\n      var platforms = JSON.parse(fs.readFileSync(completePath, 'utf8'));\n      var platformsList = new Array();\n      for(var key in platforms){\n          var platform = {\n              \"name\": key,\n              \"version\" : platforms[key],\n              \"virtualRun\" : false\n          }\n          if(platform.name === \"browser\"){\n            platform.virtualRun = true;\n          }else{\n            platform.virtualRun = false;\n          }\n          platformsList.push(platform);\n      }\n\n      return {\n        \"installed\": platformsList\n      }\n    }\n\n    public getPlatformPath(platform:string,basePath:string):String{\n      var result=basePath != undefined ? basePath : this.atomProject.getPaths()[0];\n      if(platform === \"android\"){\n        return result + \"/platforms/android/assets/www\";\n      }else if(platform === \"ios\"){\n        return result + \"/platforms/ios/www\";\n      }else{\n        console.error(\"getPlatformPath with unknown platform:\" + platform);\n        return undefined;\n      }\n      //return result;\n    }\n\n    public getAndroidAssetsPath(basePath:string){\n      return this.getPlatformPath(\"android\",basePath);\n    }\n\n    public getiOSAssetsPath(basePath:string){\n      return this.getPlatformPath(\"ios\",basePath);\n    }\n\n    isCordovaProject(rootProjectPath):boolean {\n      return false; //TODO!!\n    }\n\n\n}\n"]}