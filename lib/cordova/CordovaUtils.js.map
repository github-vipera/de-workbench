{"version":3,"file":"CordovaUtils.js","sourceRoot":"","sources":["../../src/cordova/CordovaUtils.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * CordovaUtils - Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\")\nimport { Logger } from '../logger/Logger'\n\nexport class CordovaUtils {\n\n  private atomProject:any;\n\n  constructor(){\n    this.atomProject = atom.project;\n  }\n\n  scanDeviceParts(parts:Array<String>){\n    var res = new Array();\n    for(var i=0; i< parts.length; i++){\n      if(parts[i] && !parts[i].endsWith(\":\")){\n        res.push(parts[i].trim());\n      }\n    }\n    return res;\n  }\n\n  scanPlatformParts(parts:Array<String>,skipBrowser:boolean){\n    var res={\n      installed:new Array(),\n      available:new Array(),\n    }\n    var sepCount=0;\n    for(var i=0; i<parts.length; i++){\n      if(parts[i]){\n        if(parts[i].endsWith(\":\") || parts[i].endsWith(\": \")){\n          sepCount++;\n        }else if(sepCount === 1 && !(skipBrowser && parts[i].indexOf(\"browser\") != -1 )){\n          res.installed.push(parts[i].trim());\n        }else if(sepCount === 2){\n          res.available.push(parts[i].trim());\n        }\n      }\n    }\n    return res;\n  }\n\n  public parseDeviceList(stringValue){\n      if(!stringValue){\n        return [];\n      }\n      var parts=stringValue.split('\\n');\n      var deviceList=this.scanDeviceParts(parts);\n      Logger.consoleLog(deviceList.toString());\n      return deviceList;\n    }\n\n    parsePlatformList(stringValue){\n      if(!stringValue){\n        return [];\n      }\n      var parts=stringValue.split('\\n');\n      var platforms=this.scanPlatformParts(parts,true);\n      return platforms;\n    }\n\n    getPlatformValue(item){\n      if(!item){\n        return undefined;\n      }\n      return item.split(\" \")[0];\n    }\n\n    parsePluginList(stringValue){\n      Logger.consoleLog(\"parsePluginList\");\n      var listParts=stringValue.split(\"\\n\");\n      var result=new Array();\n      _.forEach(listParts,(item)=>{\n        result.push(this.parsePluginRecord(item));\n      });\n      Logger.consoleLog(\"parsePluginsList results:\", result);\n      return result;\n    }\n\n    parsePluginRecord(record){\n      var values=record.split(\" \");\n      return{\n        id: values[0].trim(),\n        version: values[1].trim(),\n        name: values.slice(2).join(\" \").trim()\n      };\n    }\n\n    public getInstalledPlatforms(rootProjectPath:string){\n      if (!rootProjectPath){\n        return [];\n      }\n      let completePath = path.join(rootProjectPath, 'package.json');\n      if(!fs.existsSync(completePath)){\n        return [];\n      }\n      var packageJSON = JSON.parse(fs.readFileSync(completePath, 'utf8'));\n      if(!packageJSON || !packageJSON.cordova || !packageJSON.cordova.platforms){\n        return [];\n      }\n      let platforms = packageJSON.cordova.platforms;\n      let dependencies = packageJSON.dependencies || {};\n      let platformsList = new Array();\n      console.log(\"PLATFORMS:\",platforms);\n      _.forEach(platforms,(key) => {\n        var platform = {\n            \"name\": key,\n            \"version\" : \"0.0.0\",\n            \"virtualRun\" : false\n        }\n        let pKey = \"cordova-\" + key;\n        let versionStr = dependencies[pKey];\n        if(versionStr){\n          platform.version = this.parseVersion(versionStr);\n        }\n        if(platform.name === \"browser\"){\n          platform.virtualRun = true;\n        }else{\n          platform.virtualRun = false;\n        }\n        platformsList.push(platform);\n      });\n      return {\n        \"installed\": platformsList\n      }\n    }\n\n    /**\n     * Returns the assets path for the given platform\n     */\n    public getPlatformPath(projectRoot: string, platform: string): string {\n      Logger.getInstance().debug(\"getPlatformPath \", projectRoot, platform)\n      if (platform === \"android\") {\n        return path.resolve(this.getAndroidPlatformPath(projectRoot),\"assets\");\n      } else if (platform === \"ios\") {\n        return path.resolve(projectRoot,\"platforms\",\"ios\");\n      } else if(platform === 'browser'){\n        return path.resolve(projectRoot,\"platforms\",\"browser\");\n      }else {\n        console.error(\"getPlatformPath with unknown platform:\" + platform);\n        return undefined;\n      }\n    }\n\n    public getPlatformAssetsPath(projectRoot:string,platform: string):string{\n      return path.resolve(this.getPlatformPath(projectRoot,platform),\"www\");\n    }\n\n\n    public getAndroidPlatformPath(projectRoot:string):string{\n      let completePath = path.join(projectRoot, 'package.json');\n      if(!fs.existsSync(completePath)){\n        throw new Error(\"package.json not found\");\n      }\n      let packageJSON = JSON.parse(fs.readFileSync(completePath, 'utf8'));\n      let dependencies = packageJSON.dependencies || {};\n      let pKey = \"cordova-android\";\n      let versionStr = dependencies[pKey];\n      if(versionStr){\n        let version = this.parseVersion(versionStr);\n        let versionParts = version.split(\"\\.\");\n        if(versionParts && versionParts[0] && parseInt(versionParts[0])>= 7){\n          return path.join('platforms', 'android','app','src','main');\n        }\n      }\n      return path.resolve(projectRoot,\"platforms\",\"android\");\n    }\n\n\n\n    isCordovaProject(rootProjectPath):boolean {\n      return false; //TODO!!\n    }\n\n    public parseVersion(versionStr:string):string{\n      return versionStr.replace(/^[^0-9]+/, '');\n    }\n}\n"]}