{"version":3,"file":"Cordova.js","sourceRoot":"","sources":["../../src/cordova/Cordova.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n// --------------------------------------------------------------------------------\n//import CordovaCommandBuilder from './CordovaCommandBuilder';\n\n// --------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst spawn = require('child_process').spawn;\nconst kill = require('tree-kill');\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\");\nimport { CordovaUtils } from './CordovaUtils';\nimport { CordovaPluginScanner } from './CordovaPluginScanner';\nimport { Logger } from '../logger/Logger'\nimport { CordovaExecutor } from './CordovaExecutor';\nimport { EventBus } from '../DEWorkbench/EventBus'\n\nexport class CordovaPlatform {\n  public name: string;\n  public version?: string;\n  public virtualRun?: boolean;\n}\n\nexport class CordovaPlugin {\n  public name: string;\n  public id: string;\n  public version: string;\n  public description: string;\n  public isTopLevel: boolean;\n  public info: any;\n  public installed: boolean = false;\n  public author:string = '';\n  public homepage:string = '';\n  public license:string = '';\n  public repository:string = '';\n  public repositoryType:string = '';\n  public sourceType:string = '';\n  public lastUpdateTime:string = '';\n  public rating:number = 0;\n  public localPath:string = '';\n  public platforms:Array<string> = [];\n}\n\nexport interface NewProjectInfo {\n  name:string;\n  packageId:string;\n  basePath:string;\n  path:string;\n  platforms:Array<string>,\n  type:string;\n  template:string;\n}\n\nexport interface CordovaProjectInfo {\n  path:string\n  name:string\n  displayName:string\n  description:string\n  author:string\n  license:string\n  version:string\n  platforms:Array<CordovaPlatform>\n  variants:Array<string>\n  projectSettings?:any\n  plugins?:Array<CordovaPlugin>\n  npmScripts?:Array<string>\n}\n\n\nexport class Cordova {\n\n  private cordovaUtils: CordovaUtils;\n  //private cordovaPluginScanner: CordovaPluginScanner;\n  private sharedExecutor : CordovaExecutor;\n\n  constructor() {\n    Logger.getInstance().debug(\"Creating Cordova...\");\n    this.cordovaUtils = new CordovaUtils();\n  }\n\n  public isCordovaProject(projectRoot:string):Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      resolve(this.isCordovaProjectSync(projectRoot));\n    });\n  }\n\n  public isCordovaProjectSync(projectRoot:string):boolean {\n    try {\n      let ret = this.getInstalledPlatformsSync(projectRoot);\n      if (ret && ret.length>0){\n        return true;\n      } else {\n        return false;\n      }\n    } catch (ex){\n      return false;\n    }\n  }\n\n\n  /**\n   * Returns a list of installed platforms for a Cordova Project\n   */\n  public getInstalledPlatforms(projectRoot: string): Promise<Array<CordovaPlatform>> {\n    return new Promise((resolve, reject) => {\n      let ret = this.getInstalledPlatformsSync(projectRoot);\n      resolve(ret);\n    });\n  }\n\n  /**\n   * Returns a list of installed platforms for a Cordova Project in a sync way\n   */\n  public getInstalledPlatformsSync(projectRoot: string): Array<CordovaPlatform> {\n    let ret: any = this.cordovaUtils.getInstalledPlatforms(projectRoot);\n    return ret.installed;\n  }\n\n  public async addPlatform(projectRoot:string, platformName:string){\n    Logger.getInstance().debug(\"addPlatform called for ...\", projectRoot, platformName);\n    let executor = new CordovaExecutor(null);\n    let projectInfo = await this.getProjectInfo(projectRoot, false);\n    await executor.addPlatform(projectInfo, platformName);\n    EventBus.getInstance().publish(EventBus.EVT_PLATFORM_ADDED, projectRoot, platformName)\n  }\n\n  public async removePlatform(projectRoot:string, platformName:string){\n    Logger.getInstance().debug(\"removePlatform called \"+platformName +\" for ...\", projectRoot);\n    let executor = new CordovaExecutor(null);\n    await executor.removePlatforms([platformName], projectRoot);\n    EventBus.getInstance().publish(EventBus.EVT_PLATFORM_REMOVED, projectRoot, platformName)\n  }\n\n  public async addPlugin(projectRoot: string,pluginInfo:CordovaPlugin){\n    Logger.getInstance().debug(\"addPlugin called with \"+ pluginInfo.name +\" for \" + projectRoot);\n    let executor = new CordovaExecutor(null);\n    let projectInfo = await this.getProjectInfo(projectRoot, false);\n    let installOpt = undefined;\n    if (pluginInfo.repository==='local'){\n      installOpt = {};\n      installOpt.searchPath = pluginInfo.localPath;\n    }\n    await executor.addPlugin(projectInfo, pluginInfo.id, installOpt);\n    EventBus.getInstance().publish(EventBus.EVT_PLUGIN_ADDED, projectRoot, pluginInfo)\n  }\n\n  public async removePlugin(projectRoot: string,pluginInfo:CordovaPlugin){\n    Logger.getInstance().debug(\"removePlugin called with \"+ pluginInfo.name +\" for \" + projectRoot);\n    let executor = new CordovaExecutor(null);\n    let projectInfo = await this.getProjectInfo(projectRoot, false);\n    await executor.removePlugin(projectInfo, pluginInfo.id);\n    EventBus.getInstance().publish(EventBus.EVT_PLUGIN_REMOVED, projectRoot, pluginInfo)\n  }\n\n  /**\n   * Returns a list of installed plugins for a Cordova Project\n   */\n  public getInstalledPlugins(projectRoot: string): Promise<Array<CordovaPlugin>> {\n    Logger.consoleLog(\"getInstalledPlugins called...\");\n    return new Promise((resolve, reject) => {\n      let that = this;\n      let cordovaPluginScanner = new CordovaPluginScanner();\n      cordovaPluginScanner.scan(projectRoot, (results)=> {\n        let pluginsRaw = cordovaPluginScanner.getInstalledPlugin();\n        let plugins = new Array();\n        Object.keys(results.plugins).forEach((key) => {\n          let pluginRaw = pluginsRaw.plugins[key];\n          if (pluginRaw[\"plugin\"] && pluginRaw[\"plugin\"][\"$\"]){\n            let plugin = new CordovaPlugin();\n            plugin.name = key;\n            plugin.id = pluginRaw[\"plugin\"][\"$\"][\"id\"];\n            plugin.version = pluginRaw[\"plugin\"][\"$\"][\"version\"];\n            plugin.description = (pluginRaw[\"plugin\"][\"description\"] || [\"n.a\"])[0];\n            plugin.isTopLevel = pluginRaw[\"is_top_level\"];\n            plugin.installed = true;\n            plugin.info = pluginRaw;\n            // gets extra info if availables\n            if (pluginRaw[\"packageJson\"]){\n              if (pluginRaw[\"packageJson\"][\"author\"]){\n                if (pluginRaw[\"packageJson\"][\"author\"] instanceof Object){\n                  if (pluginRaw[\"packageJson\"][\"author\"]){\n                    plugin.author = pluginRaw[\"packageJson\"][\"author\"][\"name\"];\n                  }\n                } else {\n                  plugin.author = pluginRaw[\"packageJson\"][\"author\"];\n                }\n              }\n              if (pluginRaw[\"packageJson\"][\"license\"]){\n                plugin.license = pluginRaw[\"packageJson\"][\"license\"];\n              }\n              if (pluginRaw[\"packageJson\"][\"repository\"] && pluginRaw[\"packageJson\"][\"repository\"][\"url\"]){\n                plugin.repository = pluginRaw[\"packageJson\"][\"repository\"][\"url\"];\n              }\n              if (pluginRaw[\"packageJson\"][\"repository\"] && pluginRaw[\"packageJson\"][\"repository\"][\"type\"]){\n                plugin.repositoryType = pluginRaw[\"packageJson\"][\"type\"];\n              }\n              if (pluginRaw[\"packageJson\"][\"homepage\"]){\n                plugin.homepage = pluginRaw[\"packageJson\"][\"homepage\"];\n              }\n            }\n            if (pluginRaw[\"source\"] && pluginRaw[\"source\"][\"type\"]){\n              plugin.sourceType = pluginRaw[\"source\"][\"type\"];\n            }\n            plugins.push(plugin);\n          }\n        });\n        resolve(plugins);\n      });\n    });\n  }\n\n\n  /**\n   * Creates a new Cordova project with the given parameters\n   */\n  public createNewProject(projectInfo: NewProjectInfo): Promise<any> {\n    Logger.getInstance().debug(\"createNewProject: \", projectInfo)\n    let executor = new CordovaExecutor(null);\n    return executor.createNewProject(projectInfo);\n  }\n\n  /**\n   * Creates a new Cordova project with the given parameters\n   */\n  public removeAllPlatforms(projectInfo: any): Promise<any> {\n    Logger.getInstance().debug(\"removeAllPlatforms: \", projectInfo)\n    let executor = new CordovaExecutor(null);\n    return executor.removeAllPlatforms(projectInfo);\n  }\n\n  /**\n   * Adds platforms to a project\n   */\n  public addPlatforms(projectInfo): Promise<any>{\n    Logger.getInstance().debug(\"removeAllPlatforms: \", projectInfo)\n    let executor = new CordovaExecutor(null);\n    return executor.addPlatforms(projectInfo);\n  }\n\n  /**\n   * Removes platforms from project\n   **/\n  public removePlatforms(projectRoot: string,platformList:Array<String>): Promise<any>{\n    Logger.getInstance().debug(\"removePlatforms: \", projectRoot)\n    let executor = new CordovaExecutor(null);\n    return executor.removePlatforms(platformList, projectRoot);\n  }\n\n\n  private rejectForBusySharedExecutor():Promise<any> {\n    return Promise.reject({\n      'ERROR_CODE':'EXECUTOR_BUSY',\n      'ERROR_MESSAGE':'Executor is busy'\n    });\n  }\n\n  /**\n   * Runs build command fot the given Cordova project\n   */\n  public buildProject(projectRoot: string, platform:string, options:any): Promise<any> {\n    Logger.getInstance().debug(\"buildProject: \", projectRoot, JSON.stringify(options));\n    if(this.isBusy()){\n      return this.rejectForBusySharedExecutor();\n    }\n    this.sharedExecutor = new CordovaExecutor(null);\n    return this.sharedExecutor.runBuild(projectRoot, platform, options);\n  }\n\n  /**\n   * Clean the given Cordova project\n   */\n  public cleanProject(projectRoot: string, platform:string): Promise<any> {\n    Logger.getInstance().debug(\"cleanProject: \", projectRoot)\n    if(this.isBusy()){\n      return this.rejectForBusySharedExecutor();\n    }\n    this.sharedExecutor = new CordovaExecutor(null);\n    return this.sharedExecutor.runClean(projectRoot, platform);\n  }\n\n  public isBusy():boolean{\n    return this.sharedExecutor && this.sharedExecutor.isBusy();\n  }\n\n  /**\n   * Prepare the given Cordova project\n   */\n  public prepareProject(projectRoot: string, platform:string,cliOptions?:any): Promise<any> {\n    Logger.getInstance().debug(\"prepareProject: \", projectRoot)\n    if(this.isBusy()){\n      return this.rejectForBusySharedExecutor();\n    }\n    this.sharedExecutor = new CordovaExecutor(null);\n    return this.sharedExecutor.runPrepare(projectRoot, platform,cliOptions);\n  }\n\n  public prepareProjectWithBrowserPatch(projectRoot: string, platform?:string,cliOptions?:any): Promise<any> {\n    Logger.getInstance().debug(\"prepareProject: \", projectRoot);\n    let executor = new CordovaExecutor(null);\n    return executor.runPrepareWithBrowserPatch(projectRoot,platform,cliOptions);\n  }\n\n  public runProject(projectRoot:string,platform:string,target:string,options:any): Promise<any> {\n    Logger.getInstance().debug(\"runProject: \", projectRoot)\n    if(this.isBusy()){\n      return this.rejectForBusySharedExecutor();\n    }\n    this.sharedExecutor = new CordovaExecutor(null);\n    return this.sharedExecutor.runProject(projectRoot, platform, target, options);\n  }\n\n  public getPackageJson(projectRoot:string):any {\n    let jsonPath = path.join(projectRoot, \"package.json\");\n    return JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n  }\n\n  public storePackageJson(projectRoot:string, packageJson:Object) {\n    let jsonPath = path.join(projectRoot, \"package.json\");\n    fs.writeFileSync(jsonPath, JSON.stringify(packageJson, null, \"\\t\"), 'utf8')\n  }\n\n  public stopExecutor(){\n    if(this.sharedExecutor){\n      this.sharedExecutor.stopSpawn();\n    }\n  }\n\n  public markInstalledPlugins(pluginList:Array<CordovaPlugin>, installedPlugins:Array<CordovaPlugin>):Array<CordovaPlugin>{\n      for (var i=0;i<installedPlugins.length;i++){\n        let index = _.findIndex(pluginList, { 'name' : installedPlugins[i].name })\n        if (index>-1){\n          pluginList[index].installed = true\n        }\n      }\n      return pluginList;\n  }\n\n  public async getProjectInfo(projectRoot:string,loadPlugins?:boolean):Promise<CordovaProjectInfo>{\n    let json = this.getPackageJson(projectRoot);\n    if(!json){\n      return null;\n    }\n    let cordovaPlatforms:Array<CordovaPlatform> = [];\n    let cordovaPlugins:Array<CordovaPlugin> = [];\n    if (json.cordova){\n      let cdv= json.cordova;\n      if(!cdv.platforms){\n        cdv.platforms = [];\n      }\n      cdv.platforms.forEach((single) => {\n          cordovaPlatforms.push({name: single});\n      });\n      if(loadPlugins){\n        cordovaPlugins = await this.getInstalledPlugins(projectRoot);\n      }\n    }\n    return {\n      name:json.name,\n      displayName:json.displayName,\n      description:json.description,\n      author:json.author,\n      license:json.license,\n      version:json.version,\n      path:projectRoot,\n      platforms:cordovaPlatforms,\n      npmScripts:json.scripts || [],\n      plugins:cordovaPlugins,\n      variants:[]\n    };\n  }\n\n\n  public async saveProjectInfo(projectRoot:string, projectInfo:CordovaProjectInfo):Promise<any>{\n    var packageJson = this.getPackageJson(projectRoot);\n    packageJson.name = projectInfo.name;\n    packageJson.displayName = projectInfo.displayName;\n    packageJson.description = projectInfo.description;\n    packageJson.author = projectInfo.author;\n    packageJson.license = projectInfo.license;\n    packageJson.version = projectInfo.version;\n    this.storePackageJson(projectRoot, packageJson)\n  }\n\n}\n"]}