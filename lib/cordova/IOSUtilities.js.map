{"version":3,"file":"IOSUtilities.js","sourceRoot":"","sources":["../../src/cordova/IOSUtilities.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * CordovaUtils - Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import { Logger } from '../logger/Logger'\n\nconst path = require(\"path\");\n\nconst fs = require(\"fs\");\nconst _ = require(\"lodash\")\nconst xml2js = require('xml2js');\nconst provisioning = require('provisioning');\nconst plist = require('simple-plist');\nvar parseString = require('xml2js').parseString;\n\nexport class IOSUtilities {\n\n  public static loadProvisioningProfiles():Promise<any>{\n\n    return new Promise((resolve, reject)=>{\n      Logger.getInstance().debug(\"Loading iOS Provisioning Profiles...\")\n      let provisioningProfiles:any = {};\n\n      let provisioningProfileFolder = IOSUtilities.getProvisionigProfilesFolder();// path.join(homeFolder, \"Library\", \"MobileDevice\" , \"Provisioning Profiles\");\n      Logger.getInstance().debug(\"iOS Provisioning Profiles folder: \" + provisioningProfileFolder)\n\n        let provisioningFileNames = fs.readdirSync(provisioningProfileFolder);\n        let totalFilesToProcess = provisioningFileNames.length;\n        let profilesAdded = 0;\n        Logger.getInstance().debug(\"Found \"+ totalFilesToProcess +\" files found.\");\n        for (var i=0;i<provisioningFileNames.length;i++){\n          let filename = path.join(provisioningProfileFolder,provisioningFileNames[i]);\n          \n          var fileContent = fs.readFileSync(filename, \"utf8\");\n          // Convert a plist xml string or a binary plist buffer to a Javascript object\n          try {\n            let plistContentStart = fileContent.indexOf(\"<plist\");\n            let plistContentEnd = fileContent.indexOf(\"</plist>\");\n            let plistContent = fileContent.substring(plistContentStart, plistContentEnd + \"</plist>\".length);\n            var data = plist.parse(plistContent);\n            if (data){\n              var appIdentifier = data.Entitlements['application-identifier'];\n              var teamIdentifier = data.TeamIdentifier;\n              var teamName = data.TeamName;\n              var applicationIdentifierPrefix = data.ApplicationIdentifierPrefix;\n              var appId = appIdentifier.substring(applicationIdentifierPrefix[0].length + 1, appIdentifier.length);\n              provisioningProfiles[appIdentifier] = {\n                \"appId\" : appId,\n                \"appIdentifier\" : appIdentifier,\n                \"teamIdentifier\" : teamIdentifier,\n                \"teamName\" : teamName,\n                \"data\" : data\n              };\n              profilesAdded++;\n            }\n          } catch (ex){\n            Logger.getInstance().debug(\"The file \"+ filename + \" does not seem to be a provisioning profile.\");\n          }\n          totalFilesToProcess--;\n          if (totalFilesToProcess==0){\n            Logger.getInstance().debug(\"Profiles loaded \" + profilesAdded);\n            resolve(provisioningProfiles);\n          }\n\n        }\n    })\n  }\n\n  public static getProvisionigProfilesFolder():string {\n    let homeFolder = process.env['HOME'];\n    let provisioningProfileFolder = path.join(homeFolder, \"Library\", \"MobileDevice\" , \"Provisioning Profiles\");\n    return provisioningProfileFolder;\n  }\n\n}\n"]}