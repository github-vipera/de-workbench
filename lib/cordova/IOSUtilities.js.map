{"version":3,"file":"IOSUtilities.js","sourceRoot":"","sources":["../../src/cordova/IOSUtilities.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX;;;;GAIG;AAEF,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAE1C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAC/B,MAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC3B,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE7C,MAAM;IAEG,MAAM,CAAC,wBAAwB;QAEpC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAC,EAAE;YACpC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAA;YAClE,IAAI,oBAAoB,GAAO,EAAE,CAAC;YAElC,IAAI,yBAAyB,GAAG,YAAY,CAAC,4BAA4B,EAAE,CAAC,CAAA,8EAA8E;YAC1J,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,oCAAoC,GAAG,yBAAyB,CAAC,CAAA;YAE5F,IAAI,qBAAqB,GAAG,EAAE,CAAC,WAAW,CAAC,yBAAyB,CAAC,CAAC;YACpE,IAAI,mBAAmB,GAAG,qBAAqB,CAAC,MAAM,CAAC;YACvD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,qBAAqB,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7E,+EAA+E;gBAC/E,YAAY,CAAC,QAAQ,EAAE,UAAS,KAAK,EAAE,IAAI;oBACzC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC;wBACT,4EAA4E;oBAC9E,CAAC;oBACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAA,CAAC;wBACb,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;wBAChE,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;wBACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC7B,IAAI,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC;wBACnE,IAAI,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;wBACrG,oBAAoB,CAAC,aAAa,CAAC,GAAG;4BACpC,OAAO,EAAG,KAAK;4BACf,eAAe,EAAG,aAAa;4BAC/B,gBAAgB,EAAG,cAAc;4BACjC,UAAU,EAAG,QAAQ;4BACrB,MAAM,EAAG,IAAI;yBACd,CAAC;oBACJ,CAAC;oBAAC,IAAI,CAAC,CAAC;oBAER,CAAC;oBACD,mBAAmB,EAAE,CAAC;oBACtB,EAAE,CAAC,CAAC,mBAAmB,IAAE,CAAC,CAAC,CAAA,CAAC;wBAC1B,OAAO,CAAC,oBAAoB,CAAC,CAAC;oBAChC,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,MAAM,CAAC,4BAA4B;QACxC,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,yBAAyB,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,cAAc,EAAG,uBAAuB,CAAC,CAAC;QAC3G,MAAM,CAAC,yBAAyB,CAAC;IACnC,CAAC;CAEF","sourcesContent":["'use babel'\n\n/*!\n * CordovaUtils - Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import { Logger } from '../logger/Logger'\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst _ = require(\"lodash\")\nconst xml2js = require('xml2js');\nconst provisioning = require('provisioning');\n\nexport class IOSUtilities {\n\n  public static loadProvisioningProfiles():Promise<any>{\n\n    return new Promise((resolve, reject)=>{\n      Logger.getInstance().debug(\"Loading iOS Provisioning Profiles...\")\n      let provisioningProfiles:any = {};\n\n      let provisioningProfileFolder = IOSUtilities.getProvisionigProfilesFolder();// path.join(homeFolder, \"Library\", \"MobileDevice\" , \"Provisioning Profiles\");\n      Logger.getInstance().debug(\"iOS Provisioning Profiles folder: \" + provisioningProfileFolder)\n\n      var provisioningFileNames = fs.readdirSync(provisioningProfileFolder);\n        let totalFilesToProcess = provisioningFileNames.length;\n        for (var i=0;i<provisioningFileNames.length;i++){\n          var filename = path.join(provisioningProfileFolder,provisioningFileNames[i]);\n          //Logger.getInstance().debug('Loading provisioning profile '+ filename +'...');\n          provisioning(filename, function(error, data){\n            if (error){\n              //Logger.getInstance().debug('Error loading provisioning profile: '+ error);\n            }\n            else if (data){\n              var appIdentifier = data.Entitlements['application-identifier'];\n              var teamIdentifier = data.TeamIdentifier;\n              var teamName = data.TeamName;\n              var applicationIdentifierPrefix = data.ApplicationIdentifierPrefix;\n              var appId = appIdentifier.substring(applicationIdentifierPrefix[0].length + 1, appIdentifier.length);\n              provisioningProfiles[appIdentifier] = {\n                \"appId\" : appId,\n                \"appIdentifier\" : appIdentifier,\n                \"teamIdentifier\" : teamIdentifier,\n                \"teamName\" : teamName,\n                \"data\" : data\n              };\n            } else {\n\n            }\n            totalFilesToProcess--;\n            if (totalFilesToProcess==0){\n              resolve(provisioningProfiles);\n            }\n          });\n        }\n    })\n  }\n\n  public static getProvisionigProfilesFolder():string {\n    let homeFolder = process.env['HOME'];\n    let provisioningProfileFolder = path.join(homeFolder, \"Library\", \"MobileDevice\" , \"Provisioning Profiles\");\n    return provisioningProfileFolder;\n  }\n\n}\n"]}