{"version":3,"file":"CordovaDeviceManager.js","sourceRoot":"","sources":["../../src/cordova/CordovaDeviceManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;;;;;;;;;AACX,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAA;AACjD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAA;AAK5B,MAAM;IAIJ,YAAY,WAAe;QAFnB,oBAAe,GAAmB,IAAI,CAAC;QAG7C,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;IAEK,aAAa,CAAC,QAAe;;YACjC,IAAI,OAAO,GAAc,MAAM,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YACrF,EAAE,CAAA,CAAC,OAAO,CAAC,CAAA,CAAC;gBACV,MAAM,CAAC,GAAG,CAAoB,OAAO,EAAC,CAAC,MAAM,EAAE,EAAE;oBAC/C,MAAM,CAAC;wBACL,QAAQ,EAAG,MAAM;wBACjB,IAAI,EAAG,MAAM;qBACd,CAAA;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;KAAA;CAEF","sourcesContent":["'use babel'\nimport {CordovaExecutor} from './CordovaExecutor'\nimport { map } from 'lodash'\nexport interface CordovaDevice {\n  targetId:string,\n  name:string\n}\nexport class CordovaDeviceManager {\n\n  private cordovaExecutor:CordovaExecutor = null;\n\n  constructor(projectPath:any){\n    this.cordovaExecutor = new CordovaExecutor(projectPath);\n  }\n\n  async getDeviceList(platform:string):Promise<Array<CordovaDevice>>{\n    let devices:Array<any> = await this.cordovaExecutor.getAllDeviceByPlatform(platform);\n    if(devices){\n      return map<any,CordovaDevice>(devices,(single) => {\n        return {\n          targetId : single,\n          name : single\n        }\n      });\n    }\n    return null;\n  }\n  \n}\n"]}