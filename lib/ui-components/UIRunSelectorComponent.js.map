{"version":3,"file":"UIRunSelectorComponent.js","sourceRoot":"","sources":["../../src/ui-components/UIRunSelectorComponent.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX,OAAO,EAGL,aAAa,EACb,aAAa,EAOd,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAe,eAAe,EAAE,MAAM,eAAe,CAAA;AAC5D,OAAO,EAAE,QAAQ,EAAiC,MAAM,YAAY,CAAA;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAA;AAEjD,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAA;AAG9D,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAA;AAEzC,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAA;AAC3B,OAAO,KAAK,IAAI,MAAM,MAAM,CAAA;AAO5B,MAAM,cAAc,GAAgB;IAClC,IAAI,EAAC,WAAW;IAChB,KAAK,EAAC,EAAE;CACT,CAAC;AAEF,MAAM,6BAA8B,SAAQ,eAAe;IAWzD,YAAY,MAAmB;QAC7B,KAAK,EAAE,CAAC;QAXF,oBAAe,GAAY,IAAI,CAAC;QAEhC,eAAU,GAAY,IAAI,CAAC;QAM3B,gBAAW,GAAmC,EAAE,CAAC;QAIvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,qBAAqB,GAAG;YAC3B,cAAc,EAAC,CAAC,SAAgB;gBAC9B,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAClC,CAAC;SACF,CAAA;QACD,IAAI,CAAC,kBAAkB,GAAG;YACxB,cAAc,EAAC,CAAC,SAAgB;gBAC9B,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC,CAAA,CAAC;oBACb,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAC/B,UAAU,CAAC;wBACT,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;wBACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;oBAC5C,CAAC,EAAC,EAAE,CAAC,CAAC;gBACR,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,IAAI,IAAI,GAA4B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAC,CAAC,IAAI;wBAC/D,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,SAAS,CAAC;oBAC9B,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAC,IAAI,CAAC,CAAC;oBACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;SACF,CAAC;QACF,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,KAAK,EAAC;YACrC,SAAS,EAAE,uCAAuC;SACnD,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,kBAAkB;QAChB,IAAI,QAAQ,GAAiB,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC5D,IAAI,CAAC,eAAe,GAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,CAAC,YAAY,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,eAAe,EAAC,gBAAgB,EAAC,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAC,YAAY,EAAC,CAAC,CAAC;QACzH,aAAa,CAAC,IAAI,CAAC,WAAW,EAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,eAAe;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EAAC,KAAK,EAAC,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC,YAAY,EAAC,CAAC,CAAC;QAC9G,aAAa,CAAC,IAAI,CAAC,WAAW,EAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,eAAe;QACb,cAAc,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,iBAAiB;QACf,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACvC,IAAI,QAAQ,GAAiB,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC5D,IAAI,KAAK,GAAuB,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAC1E,IAAI,QAAQ,GAAU,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,eAAe,GAAW,CAAC,CAAC,QAAQ,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QAC/G,EAAE,CAAA,CAAC,eAAe,CAAC,CAAA,CAAC;YAClB,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YACjD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED,uBAAuB;QACrB,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,uBAAuB,EAAE,CAAC;IAChE,CAAC;IAED,qBAAqB,CAAC,QAAsB;QAC1C,IAAI,OAAO,GAAuB,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAC5E,MAAM,CAAC,UAAU,CAAC,UAAU,EAAC,OAAO,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,0BAA0B,CAAC,QAAsB;QAC/C,IAAI,OAAO,GAAuB,EAAE,CAAC;QACrC,EAAE,CAAA,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAC,aAAa;gBAClB,KAAK,EAAC,EAAE;aACT,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC;QACD,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAC,CAAC,IAAI;YACtB,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACzB,KAAK,EAAC,IAAI;aACX,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED,gBAAgB;QACd,IAAI,OAAO,GAAuB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjF,MAAM,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAA;IAC1E,CAAC;IAED,uBAAuB,CAAC,KAAqC;QAC3D,IAAI,OAAO,GAAuB,EAAE,CAAC;QACrC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAC,CAAC,IAAI;YACnB,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe;gBAChE,KAAK,EAAE,IAAI,CAAC,EAAE;aACf,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED,uBAAuB;QACrB,MAAM,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACzC,CAAC;IAED,eAAe,CAAC,IAAW;QACzB,MAAM,CAAC,UAAU,CAAC,iBAAiB,EAAC,IAAI,CAAC,CAAC;QAC1C,UAAU,CAAC;YACT,cAAc,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAuB;gBACnF,MAAM,CAAC,UAAU,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAC,IAAI,CAAC,CAAC;YACpD,CAAC,EAAC,CAAC,MAAM;gBACP,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG;gBACX,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAA;QAEJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,cAAc,CAAC,QAAiC;QACtD,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAA,CAAC;YACZ,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;QACzC,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC5B,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAED,oBAAoB,CAAC,QAAiC;QACpD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;QAC/B,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,YAAY;QACV,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAEO,gBAAgB,CAAC,QAAiC;QACxD,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAA,CAAC;YACZ,MAAM,CAAC;QACT,CAAC;QACD,IAAI,KAAK,GAAU,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAC,CAAC,IAAI;YACnD,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAA;QAC1B,CAAC,CAAC,CAAC;QACH,EAAE,CAAA,CAAC,KAAK,IAAI,CAAC,CAAC,CAAA,CAAC;YACb,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACjD,CAAC;IAED,oBAAoB;QAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC9D,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;CAGF","sourcesContent":["'use babel'\n\nimport {\n  createText,\n  createSelect,\n  createElement,\n  insertElement,\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  attachEventFromObject,\n  createTextEditor\n} from '../element/index';\nimport { EventEmitter }  from 'events';\nimport { UIComponent, UIBaseComponent } from './UIComponent'\nimport { UISelect, UISelectItem, UISelectListener} from './UISelect'\nimport { UISelectButton } from './UISelectButton'\nimport { UIStatusIndicatorComponent , UIIndicatorStatus } from './UIStatusIndicatorComponent'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager'\nimport { CordovaProjectInfo } from '../cordova/Cordova'\nimport { CordovaTaskConfiguration } from '../cordova/CordovaTasks'\nimport { Logger } from '../logger/Logger'\n\nimport * as _ from 'lodash'\nimport * as path from 'path'\n\nexport interface UITaskInfo {\n  id:string;\n  name:string;\n}\n\nconst OPEN_TASK_CONF:UISelectItem = {\n  name:'Custom...',\n  value:''\n};\n\nexport class UIRunSelectorComponent extends UIBaseComponent {\n  private projectSelector:UISelect = null;\n  private selectButton:UISelectButton;\n  private taskSelect:UISelect = null;\n  private taskSelectButton:UISelectButton;\n  private taskInfo:CordovaTaskConfiguration;\n  private events:EventEmitter\n  private projectSelectListener:UISelectListener;\n  private taskSelectListener:UISelectListener;\n  private taskHistory:Array<CordovaTaskConfiguration> = [];\n\n  constructor(events:EventEmitter){\n    super();\n    this.events = events;\n    this.projectSelectListener = {\n      onItemSelected:(selection:string) => {\n        this.onSelectProject(selection);\n      }\n    }\n    this.taskSelectListener = {\n      onItemSelected:(selection:string) => {\n        if(!selection){\n          this.onCustomTaskSelectClick();\n          setTimeout(() => {\n            this.taskSelectButton.resetSelection();\n            this.events.emit(\"didTaskSelected\", null);\n          },20);\n        }else{\n          let task:CordovaTaskConfiguration = _.find(this.taskHistory,(item) => {\n            return item.id == selection;\n          });\n          Logger.consoleLog('emit event for',task);\n          this.events.emit(\"didTaskSelected\", task);\n        }\n      }\n    };\n    this.initUI();\n    this.subscribeEvents();\n  }\n\n  initUI():void{\n    this.mainElement = createElement('div',{\n      className: \"de-workbench-uiruncomponent-container\"\n    });\n    this.addProjectSelector();\n    this.addTaskSelector();\n  }\n\n  addProjectSelector(){\n    let projects:Array<string> = this.getAllAvailableProjects();\n    this.projectSelector=this.createProjectSelector(projects);\n    this.projectSelector.addSelectListener(this.projectSelectListener);\n    this.projectSelector.resetSelection();\n    this.selectButton = new UISelectButton(this.projectSelector,\"Select Project\",{ withArrow: true, rightIcon:'arrow-down'});\n    insertElement(this.mainElement,this.selectButton.element());\n  }\n\n  addTaskSelector(){\n    this.taskSelect = this.createTaskSelect();\n    this.taskSelect.resetSelection();\n    this.taskSelect.addSelectListener(this.taskSelectListener);\n    this.taskSelectButton = new UISelectButton(this.taskSelect,\"...\",{ withArrow: false, rightIcon:'arrow-down'});\n    insertElement(this.mainElement,this.taskSelectButton.element());\n  }\n\n  subscribeEvents(){\n    ProjectManager.getInstance().didPathChanged(this.reloadProjectList.bind(this));\n  }\n\n  reloadProjectList(){\n    Logger.consoleLog(\"reloadProjectList\");\n    let projects:Array<string> = this.getAllAvailableProjects();\n    let items:Array<UISelectItem> = this.createProjectSelectOptions(projects);\n    let selected:string = this.projectSelector.getSelectedItem();\n    this.projectSelector.setItems(items);\n    let reloadSelection:boolean = (!selected || selected != this.projectSelector.getSelectedItem()) ? true : false;\n    if(reloadSelection){\n      this.selectButton.setSelectedItem(items[0].value)\n      this.onSelectProject(items[0].value);\n    }\n  }\n\n  getAllAvailableProjects():Array<string>{\n    return ProjectManager.getInstance().getAllAvailableProjects();\n  }\n\n  createProjectSelector(projects:Array<string>):UISelect{\n    let options:Array<UISelectItem> = this.createProjectSelectOptions(projects);\n    Logger.consoleLog(\"OPTIONS:\",options);\n    return new UISelect(options);\n  }\n\n  createProjectSelectOptions(projects:Array<string>):Array<UISelectItem>{\n    let options:Array<UISelectItem> = [];\n    if(!projects || projects.length == 0){\n      options.push({\n        name:'No projects',\n        value:''\n      });\n      return options;\n    }\n    _.forEach(projects,(item) => {\n      options.push({\n        name: path.basename(item),\n        value:item\n      })\n    })\n    return options;\n  }\n\n  createTaskSelect(){\n    let options:Array<UISelectItem> = this.createTaskSelectOptions(this.taskHistory);\n    return new UISelect(options);\n  }\n\n  reloadTaskList(){\n    this.taskSelect.setItems(this.createTaskSelectOptions(this.taskHistory))\n  }\n\n  createTaskSelectOptions(tasks:Array<CordovaTaskConfiguration>):Array<UISelectItem>{\n    let options:Array<UISelectItem> = [];\n    _.forEach(tasks,(item) => {\n      options.push({\n        name: item.constraints.isCustom ? item.id : item.longDisplayName,\n        value: item.id\n      })\n    })\n    options.push(OPEN_TASK_CONF);\n    return options;\n  }\n\n  onCustomTaskSelectClick(){\n    Logger.consoleLog(\"onCustomTaskSelectClick\");\n    this.events.emit('didSelectTaskClick');\n  }\n\n  onSelectProject(path:string){\n    Logger.consoleLog(\"onSelectProject\",path);\n    setTimeout(() => {\n      ProjectManager.getInstance().cordova.getProjectInfo(path).then((info:CordovaProjectInfo) => {\n          Logger.consoleLog(\"onSelectProject info:\", info);\n          this.events.emit('didSelectProjectForRun',info);\n      },(reason) => {\n        console.error(reason);\n      }).catch((err) => {\n        console.error(err);\n      })\n\n    })\n  }\n\n  private updateTaskText(taskInfo:CordovaTaskConfiguration){\n    if(!taskInfo){\n      this.taskSelectButton.resetSelection();\n    }else{\n      let textVal = taskInfo.name;// + \" (\" + taskInfo.selectedPlatform.name +\")\";\n      this.taskSelectButton.setSelectedItem(taskInfo.id);\n    }\n  }\n\n  setTaskConfiguration(taskInfo:CordovaTaskConfiguration):void{\n    this.taskInfo = taskInfo;\n    this.addTaskToHistory(taskInfo)\n    this.reloadTaskList();\n    this.updateTaskText(taskInfo);\n  }\n\n  clearHistory(){\n    this.taskHistory = [];\n  }\n\n  private addTaskToHistory(taskInfo:CordovaTaskConfiguration){\n    if(!taskInfo){\n      return;\n    }\n    let index:number = _.findIndex(this.taskHistory,(item) => {\n      return item === taskInfo // check instance, not name\n    });\n    if(index >= 0){\n      return;\n    }\n    this.taskHistory.unshift(taskInfo);\n    this.taskHistory = this.taskHistory.slice(0,5);\n  }\n\n  getTaskConfiguration():CordovaTaskConfiguration {\n    return this.taskInfo;\n  }\n\n  setEnable(value:boolean){\n    this.projectSelector.setEnable(value);\n  }\n\n  destroy(){\n    this.taskSelect.removeSelectListener(this.taskSelectListener);\n    this.projectSelector.removeSelectListener(this.projectSelectListener);\n    this.selectButton.destroy();\n    this.element().remove();\n  }\n\n\n}\n"]}