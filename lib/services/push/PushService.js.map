{"version":3,"file":"PushService.js","sourceRoot":"","sources":["../../../src/services/push/PushService.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;;;;;;;;;AAIX,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAA;AAErD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AAEzC,MAAM,EACF,eAAe,EACf,sBAAsB,EACzB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAExB,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAO1D,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,2BAAW,CAAA;IACX,2BAAW,CAAA;AACb,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAED,MAAM;IAEG,MAAM,KAAK,0BAA0B,KAAY,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAK7F;QACE,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAES,oBAAoB;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAElB,IAAI,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QAE5B,IAAI,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;IAChC,CAAC;IAEY,eAAe,CAAC,OAAmB,EAAE,QAAqB,EAAE,OAA0B;;YACjG,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACjD,IAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAClE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAA,CAAC;gBACd,IAAG,CAAC;oBACF,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBACtC,MAAM,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;oBACzC,QAAQ,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAA;gBACjF,CAAC;gBAAC,KAAK,CAAA,CAAC,EAAE,CAAC,CAAA,CAAC;oBACV,MAAK,CAAC,yBAAyB,GAAE,EAAE,CAAC,CAAA;gBACtC,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAK,CAAC,sBAAsB,GAAE,QAAQ,GAAE,EAAE,CAAC,CAAA;YAC7C,CAAC;QACH,CAAC;KAAA;IAES,oBAAoB,CAAC,OAA0B,EAAE,QAAqB;QAC9E,EAAE,CAAC,CAAC,QAAQ,KAAG,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC;YAC/B,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,KAAG,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;QACrB,CAAC;IACH,CAAC;IAES,gBAAgB,CAAC,QAAqB;QAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;IAC9C,CAAC;CAEF","sourcesContent":["'use babel'\n\nimport { EventEmitter }  from 'events'\nimport { Logger } from '../../logger/Logger'\nimport { EventBus } from '../../DEWorkbench/EventBus'\nimport { PushSender, PushMessage } from './PushSender'\nimport { APNService } from './APNService'\nimport { GCMService } from './GCMService'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst express = allowUnsafeEval(() => require('express'));\n\nexport interface PushServiceOptions {\n  apn:any;\n  gcm:any;\n}\n\nexport enum PushPlatform {\n  APN = 'apn',\n  GCM = 'gcm'\n}\n\nexport class PushService {\n\n  public static get EVT_PUSH_NOTIFICATION_SENT():string { return \"dewb.pushtool.messageSent\"; }\n\n  private platforms:any;\n  private options:PushServiceOptions;\n\n  constructor(){\n    this.initPlatformServices();\n  }\n\n  protected initPlatformServices(){\n    this.platforms = {};\n\n      let apn = new APNService();\n      this.platforms[\"apn\"] = apn;\n\n      let gcm = new GCMService();\n      this.platforms[\"gcm\"] = gcm;\n  }\n\n  public async sendPushMessage(message:PushMessage, platform:PushPlatform, options:PushServiceOptions):Promise<any>{\n    let pushSender = this.getSenderService(platform);\n    let platformConfig = this.getConfigForPlatform(options, platform);\n    if (pushSender){\n      try{\n        pushSender.initialize(platformConfig);\n        await pushSender.sendPushMessage(message)\n        EventBus.getInstance().publish(PushService.EVT_PUSH_NOTIFICATION_SENT, message)\n      } catch(ex){\n        throw('Error sending message: '+ ex)\n      }\n    } else {\n      throw('No sender found for '+ platform +'')\n    }\n  }\n\n  protected getConfigForPlatform(options:PushServiceOptions, platform:PushPlatform){\n    if (platform===PushPlatform.APN){\n      return options.apn;\n    } else if (platform===PushPlatform.GCM){\n      return options.gcm;\n    }\n  }\n\n  protected getSenderService(platform:PushPlatform):PushSender {\n      return this.platforms[platform.toString()]\n  }\n\n}\n"]}