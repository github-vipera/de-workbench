{"version":3,"file":"APNService.js","sourceRoot":"","sources":["../../../src/services/push/APNService.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { EventEmitter }  from 'events'\nimport { Logger } from '../../logger/Logger'\nimport { EventBus } from '../../DEWorkbench/EventBus'\nimport { PushSender, PushMessage } from './PushSender'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst apn = allowUnsafeNewFunction(()=> allowUnsafeEval(() => require('apn')));\n\nexport class APNService implements PushSender {\n\n  private projectRoot: string;\n  private configuration:any;\n  private ready:boolean=false;\n  private apnProvider:any;\n  private options:{};\n\n  constructor(){\n  }\n\n  public initialize(configuration:any){\n    this.configuration = configuration;\n\n    if(!this.configuration.cert || !this.configuration.key || !this.configuration.passphrase){\n      this.configuration=undefined;\n      Logger.getInstance().warn(\"Invalid apn configuration.\");\n      return;\n    }\n\n    this.options = {\n        cert: this.configuration.cert,\n        key: this.configuration.key,\n        passphrase: this.configuration.passphrase,\n        production: this.configuration.production\n    };\n    this.apnProvider = new apn.Provider(this.options);\n\n    this.ready = true;\n  }\n\n  public sendPushMessage(message:PushMessage):Promise<any>{\n    return new Promise((resolve,reject)=>{\n      Logger.getInstance().debug(\"Sending to APN...Data: \" + JSON.stringify(message));\n        if(!this.ready){\n          Logger.getInstance().warn(\"sendPush fail: apnProvider is undefined\");\n          return;\n        }\n        var note = this.toApnNotification(message);\n\n        var recipients = message.recipients;\n\n        Logger.getInstance().debug(\"APN note: \" + JSON.stringify(note));\n\n        for (var i=0;i<recipients.length;i++){\n          this.apnProvider.send(note, recipients[i]).then( (result) => {\n              if (result.failed.length>0){\n                var details = \"Error results: \" + JSON.stringify(result.failed);\n                Logger.getInstance().error(\"Error sending push message: \"+ result.failed[0].error +\" \", details)\n                reject(result.failed[0].error.message)\n                //reject({ message: result.failed[0].error.message, severity:\"error\", details: result.failed[0].error.stack});\n              } else {\n                resolve(\"APN Message sent.\");\n              }\n              //console.dir(result);\n          });\n        }\n    })\n\n  }\n\n  protected toApnNotification(message:PushMessage){\n    let apnNotification = new apn.Notification();\n    if (message.badge){\n      apnNotification.badge = message.badge;\n    }\n    if (message.sound){\n      apnNotification.sound = message.sound;\n    }\n    if (message.title){\n      apnNotification.title = message.title;\n    }\n    if (message.body){\n      apnNotification.body = message.body;\n    }\n    if (message.topic){\n      apnNotification.topic = message.topic;\n    }\n    if (message.category){\n      apnNotification.category = message.category;\n    }\n    if (message.alert){\n      apnNotification.alert = message.alert;\n    }\n    if (message.payload){\n      apnNotification.payload = message.payload;\n    }\n    return apnNotification\n  }\n\n\n  public isReady():boolean {\n    return this.ready;\n  }\n\n\n}\n"]}