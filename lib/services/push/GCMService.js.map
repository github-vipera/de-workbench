{"version":3,"file":"GCMService.js","sourceRoot":"","sources":["../../../src/services/push/GCMService.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { EventEmitter }  from 'events'\nimport { Logger } from '../../logger/Logger'\nimport { EventBus } from '../../DEWorkbench/EventBus'\nimport { PushSender, PushMessage } from './PushSender'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst gcm = allowUnsafeNewFunction(()=> allowUnsafeEval(() => require('node-gcm')));\n\nexport class GCMService implements PushSender {\n\n  private projectRoot: string;\n  private configuration:any;\n  private ready:boolean=false;\n\n  constructor(){\n  }\n\n  public initialize(configuration:any){\n    this.ready = true;\n    this.configuration = configuration;\n  }\n\n  public sendPushMessage(message:PushMessage):Promise<any>{\n    return new Promise((resolve,reject)=>{\n      Logger.getInstance().debug(\"Sending to GCM...Data: \" + JSON.stringify(message));\n        if(!this.ready){\n          Logger.getInstance().warn(\"sendPush fail: gcm Provider is undefined\");\n          return;\n        }\n        var gcmMessage = this.toGCMNotification(message);\n\n        var recipients = message.recipients;\n\n        Logger.getInstance().debug(\"GCM message: \" + JSON.stringify(message));\n\n        var sender = new gcm.Sender(this.configuration.apikey);\n\n        // Send the message\n        // ... trying only once\n        try {\n\n          sender.sendNoRetry(gcmMessage, { registrationTokens: recipients }, function(err, response) {\n            if (err) {\n              Logger.getInstance().error(\"Error sending GCM notification: \" + err);\n              reject(err);\n            } else {\n              resolve(\"GCM message sent: \" + response);\n            }\n          });\n\n        } catch(ex){\n          reject(ex);\n        }\n    })\n\n  }\n\n  protected toGCMNotification(pushData:PushMessage){\n    let message = new gcm.Message();\n    // Add notification payload as key value\n    if (pushData.alert){\n      message.addData('title', pushData.alert);\n    }\n    if (pushData.title){\n      message.addData('title', pushData.title);\n    }\n    if (pushData.body){\n      message.addData('body', pushData.body);\n    }\n    if (pushData.icon){\n      message.addData('icon', pushData.icon);\n    }\n    if (pushData.badge){\n      message.addData('badge', pushData.badge);\n    }\n    if (pushData.sound){\n      message.addData('sound', pushData.sound);\n    }\n    if (pushData.payload){\n      message.addData('payload',pushData.payload);\n    }\n    return message\n  }\n\n\n  public isReady():boolean {\n    return this.ready;\n  }\n\n\n}\n"]}