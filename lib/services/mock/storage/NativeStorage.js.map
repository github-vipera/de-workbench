{"version":3,"file":"NativeStorage.js","sourceRoot":"","sources":["../../../../src/services/mock/storage/NativeStorage.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AAEX,OAAO,EAAC,QAAQ,EAAE,OAAO,EAAW,UAAU,EAAE,KAAK,EAAC,MAAM,cAAc,CAAA;AAQ1E,MAAM;CAEL;AAED;IAEE,YAAY,IAAwB;QAClC,QAAQ,CAAC;YACL,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,KAAK;YACd,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;YACf,GAAG,EAAE,KAAK;SACb,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,GAAU,EAAC,OAAgB,EAAC,IAAa;QAC/C,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK;YAClB,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;gBACR,OAAO,CAAC,KAAK,CAAC,CAAA;YAChB,CAAC;YAAA,IAAI,CAAA,CAAC;gBACJ,OAAO,CAAC,IAAI,CAAC,CAAA;YACf,CAAC;QACH,CAAC,EAAC,CAAC,GAAG;YACJ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IACD,OAAO,CAAC,GAAU,EAAC,KAAK,EAAC,OAAgB,EAAC,IAAa;IAEvD,CAAC;IACD,UAAU,CAAC,GAAU,EAAC,OAAgB,EAAC,IAAa;QAClD,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,CAAC;QACZ,CAAC,EAAE,CAAC,GAAG;YACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,KAAK,CAAC,OAAgB,EAAC,IAAa;QAClC,KAAK,EAAE,CAAC,IAAI,CAAC;YACX,OAAO,EAAE,CAAC;QACZ,CAAC,EAAE,CAAC,GAAG;YACL,IAAI,CAAC,GAAG,CAAC,CAAA;QACX,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM;IACJ,gBAAgB,CAAC,MAA0B;QACzC,MAAM,CAAC,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;CACF","sourcesContent":["'use babel'\nimport {InitOptions} from 'node-persist'\nimport {initSync, getItem, setItem, removeItem, clear} from 'node-persist'\nexport interface NativeStorage{\n  getItem(key:string,success:Function,fail:Function):void\n  setItem(key:string,value,success:Function,fail:Function):void\n  deleteItem(key:string,success:Function,fail:Function):void\n  clear(success:Function,fail:Function):void\n}\n\nexport class NativeStorageConfig{\n  public dbPath:string\n}\n\nclass NativeStorageImp implements NativeStorage{\n\n  constructor(conf:NativeStorageConfig){\n    initSync({\n        dir: conf.dbPath,\n        stringify: JSON.stringify,\n        parse: JSON.parse,\n        encoding: 'utf8',\n        logging: false,  // can also be custom logging function\n        continuous: true, // continously persist to disk\n        interval: false, // milliseconds, persist to disk on an interval\n        ttl: false, // ttl* [NEW], can be true for 24h default or a number in MILLISECONDS\n    });\n  }\n\n  getItem(key:string,success:Function,fail:Function):void{\n    getItem(key).then((value) => {\n          if(value){\n            success(value)\n          }else{\n            success(null)\n          }\n        },(err) => {\n          console.error(err);\n          success(null);\n      });\n  }\n  setItem(key:string,value,success:Function,fail:Function):void{\n\n  }\n  deleteItem(key:string,success:Function,fail:Function):void{\n    removeItem(key).then(() => {\n      success();\n    }, (err) => {\n      console.error(err);\n      fail(err);\n    })\n  }\n  clear(success:Function,fail:Function):void{\n    clear().then(() => {\n      success();\n    }, (err) => {\n      fail(err)\n    });\n  }\n}\n\nexport class NativeStorageFactory {\n  getNativeStorage(config:NativeStorageConfig):NativeStorage{\n    return new NativeStorageImp(config);\n  }\n}\n"]}