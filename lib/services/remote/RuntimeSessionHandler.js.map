{"version":3,"file":"RuntimeSessionHandler.js","sourceRoot":"","sources":["../../../src/services/remote/RuntimeSessionHandler.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport { PlatformServer, PlatformServerImpl, PlatformServerConfig,LiveActions } from './PlatformServer'\nimport { ConsumedServices } from '../../DEWorkbench/ConsumedServices'\nimport {Logger} from '../../logger/Logger'\nimport {EventEmitter} from 'events'\nconst uuidv4 = require('uuid/v4');\n\nexport interface JSSession {\n  getId():string\n  execJSCommand(jsCommand:string):Promise<any>\n  didJSResultReceived(listener: (...args:any[]) => void):void\n  close();\n}\n\n\nexport class RuntimeSessionHandler {\n  private platformServer:PlatformServer\n  private consoleHandler:ConsoleHandler;\n  private events:EventEmitter;\n\n  constructor(srvConf:PlatformServerConfig){\n    this.events = new EventEmitter();\n    this.consoleHandler = new ConsoleHandler();\n    this.createAndStartServer(srvConf);\n  }\n\n  private createAndStartServer(srvConf:PlatformServerConfig){\n    this.platformServer = PlatformServerImpl.createNew();\n    this.platformServer.start(srvConf);\n  }\n\n  static createRuntimeSession(srvConf:PlatformServerConfig):RuntimeSessionHandler{\n    return new RuntimeSessionHandler(srvConf);\n  }\n\n  public canOpenJSSession():boolean{\n    return this.isPlatformServerRunning();\n  }\n\n  isPlatformServerRunning():boolean{\n    return this.platformServer && this.platformServer.isRunning();\n  }\n\n  public openJSSession():JSSession{\n    if(!this.canOpenJSSession){\n      return null;\n    }\n    return this.openSessionForJSCommands();\n  }\n\n  public openConsole():ConsoleHandler{\n    let session:JSSession = this.openJSSession();\n    if(session == null){\n      return null;\n    }\n    this.consoleHandler.setSession(session);\n    this.consoleHandler.openConsole();\n    return this.consoleHandler;\n  }\n\n  private openSessionForJSCommands():JSSession{\n    return new BaseJSSession(this.platformServer);\n  }\n\n  async stopServer(){\n    /*if(this.platformServer){\n      this.platformServer.stop().then(() => {\n          Logger.getInstance().info(\"Server stop done\");\n      },() => {\n        Logger.getInstance().error(\"Server stop fail\");\n      });\n    }*/\n    if(!this.platformServer){\n      return Promise.resolve();\n    }\n    try{\n      let result = await this.platformServer.stop();\n      Logger.getInstance().info(\"Server stop done\");\n      this.consoleHandler.close();\n      this.consoleHandler = null;\n      return Promise.resolve();\n    }catch(ex){\n      Logger.getInstance().error(\"Server stop fail\",ex);\n      return Promise.reject(ex);\n    }\n  }\n\n  public async sendAction(action:LiveActions) {\n    await this.platformServer.executeAction(action);\n    return Promise.resolve();\n  }\n\n}\n\n\nclass BaseJSSession implements JSSession{\n  private server:PlatformServer;\n  private sessionId:string\n  private callback:any\n  private events:EventEmitter\n\n  constructor(server:PlatformServer){\n    this.server = server;\n    this.sessionId = uuidv4();\n    this.events = new EventEmitter();\n    this.attachSessionListeners();\n  }\n\n  getId():string{\n    return this.sessionId;\n  }\n\n  async execJSCommand(jsCommand:string):Promise<any>{\n    let result= await this.server.executeAction({\n      type :'doEval',\n      cmd :jsCommand\n    });\n    return result;\n  }\n\n  private attachSessionListeners(){\n    this.callback = this.onJSCommandResult.bind(this);\n    this.server.addEventListener('didJSEvalResultReceived',this.callback);\n  }\n\n  private onJSCommandResult(result){\n    Logger.getInstance().debug('Receive result',JSON.stringify(result));\n    this.events.emit('didJSEvalResultReceived',result);\n  }\n\n  close(){\n    this.server.removeEventListener('didJSEvalResultReceived',this.callback);\n    this.events.removeAllListeners();\n  }\n\n  didJSResultReceived(listener){\n    this.events.addListener('didJSEvalResultReceived',listener);\n  }\n}\n\n\nexport class ConsoleHandler {\n  private session:JSSession;\n  private console:any\n  public setSession(session:JSSession){\n    this.session = session;\n    this.session.didJSResultReceived((message) => {\n      this.console.logInput();\n      this.console.done();\n      if(this.console){\n        if(message.status == \"OK\"){\n          this.console.stdout(message.evalRes);\n        }\n        else{\n          this.console.stderr(\"Error: \" + JSON.stringify(message.err));\n        }\n      }\n      this.console.input();\n    });\n  }\n  public openConsole(){\n    if(!this.console){\n      this.createConsoleBridge();\n    }\n    this.console.open({\n      split: 'down',\n      searchAllPanes: false\n    })\n  }\n\n  private createConsoleBridge(){\n    this.console = ConsumedServices.ink.Console.fromId('dewb-jssession-cmd-client')\n    console.log(\"console\",this.console)\n    this.console.setModes([\n      {name: 'DE Workbench JS Console', default: true, grammar: 'source.javascript'}\n    ]);\n    this.console.onEval(this.onCmdEval.bind(this));\n  }\n\n  private onCmdEval(arg){\n    var editor = arg.editor;\n    try {\n      let textCmd = editor.getText();\n      this.session.execJSCommand(textCmd).then(() => {\n        Logger.getInstance().debug('Js command send to session',this.session.getId());\n      },(err) => {\n        this.console.stderr(\"Error: \" + JSON.stringify(err));\n      });\n    } catch (error){\n      this.console.stderr(error);\n      return this.console.input();\n    }\n  }\n  public close(){\n    if(this.console){\n      console.log('clear emitter');\n      this.console.emitter.off('eval',this.onCmdEval);\n      delete this.console.emitter.handlersByEventName.eval;\n      this.console.close();\n    }\n    this.session.close()\n    this.session = null;\n    this.console = null;\n  }\n\n}\n"]}