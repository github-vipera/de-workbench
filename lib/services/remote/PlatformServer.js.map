{"version":3,"file":"PlatformServer.js","sourceRoot":"","sources":["../../../src/services/remote/PlatformServer.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;;;;;;;;;AAEX,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAA;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,uCAAuC,CAAA;AAE3E,MAAM,EACF,eAAe,EACf,sBAAsB,EACzB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAExB,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1D,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAwB7B,MAAM;IAQJ;QAHU,YAAO,GAAG,EAAE,CAAC;QAIrB,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAA4B;QACvC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEO,cAAc,CAAC,MAA4B;QACjD,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC5C,eAAe,CAAC,QAAO,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAA,CAAA,CAAC,CAAC,CAAA;QAC7C,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAA;IACpC,CAAC;IAES,sBAAsB,CAAC,MAA4B;QAC3D,EAAE,CAAA,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA,CAAC;YAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAES,qBAAqB,CAAC,MAA4B;QAC1D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC,GAAG,EAAE,GAAG;YACtC,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;YAC1B,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,6BAA6B,GAAG,WAAW,CAAC,CAAC;YAIvE,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAC,EAAE,CAAC,CAAC;YACvD,IAAI,OAAO,GAAG,mBAAmB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YACpE,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAC,WAAW,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,eAAe,EAAC,OAAO,CAAC,CAAC;YACnD,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAGO,QAAQ,CAAC,MAA4B;QAC3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM;YAEhC,IAAI,QAAQ,GAAG,kBAAkB,CAAC,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;YAChC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAGhD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE;gBACjB,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,IAAI,KAAK,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAC5B,MAAM,CAAC,UAAU,CAAC,CAAC,wCAAwC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,YAAY,CAAC,MAA4B;QAC/C,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM;YAC5B,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YACvC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,qCAAqC,GAAG,OAAO,CAAC,CAAC;YAE5E,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE;gBACpB,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,4BAA4B,GAAG,OAAO,CAAC,CAAC;YAEvE,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,GAAG;gBACzB,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrE,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM;gBAEtB,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAC,CAAC,aAAa;gBAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAC,aAAa,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,IAAI;QACT,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAC,MAAM;YAChC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;oBACd,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAA;gBACF,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBAClC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;gBACnC,CAAC;gBACD,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;YACnB,CAAC;YACD,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;YACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC;IAEY,KAAK;;YAChB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAClB,CAAC;KAAA;IAEM,aAAa,CAAC,MAAkB;QACrC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,KAAK,cAAc;gBACjB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC7B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,KAAK,QAAQ;gBACX,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAC;oBACpB,EAAE,EAAC,MAAM,CAAC,EAAE;oBACZ,GAAG,EAAC,MAAM,CAAC,GAAG;iBACf,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B;gBACE,OAAO,CAAC,MAAM,CAAC;oBACb,UAAU,EAAE,gBAAgB;oBAC5B,aAAa,EAAE,qBAAqB,GAAG,MAAM,CAAC,IAAI;iBACnD,CAAC,CAAA;QACN,CAAC;IACH,CAAC;IAEM,SAAS;QACd,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAA;IACzC,CAAC;IAEM,gBAAgB,CAAC,KAAY,EAAC,QAAgC;QACnE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,mBAAmB,CAAC,KAAY,EAAC,QAAiC;QACvE,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAA,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;QAAA,IAAI,CAAA,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QACvC,CAAC;IACH,CAAC;IAGM,MAAM,CAAC,SAAS;QACrB,MAAM,CAAC,IAAI,kBAAkB,EAAE,CAAC;IAClC,CAAC;;AA5Jc,+BAAY,GAAW,CAAC,CAAC","sourcesContent":["'use babel'\n//import * as express from \"express\";\nimport { Logger } from '../../logger/Logger'\nimport { EventEmitter } from 'events'\nimport { DEWBResourceManager } from '../../DEWorkbench/DEWBResourceManager'\n\nconst {\n    allowUnsafeEval,\n    allowUnsafeNewFunction\n} = require('loophole');\n\nconst express = allowUnsafeEval(() => require('express'));\nconst path = require('path');\n\nexport interface LiveActions{\n  type:string\n  [name:string]:any\n}\n\nexport interface PlatformServerConfig {\n  serveStaticAssets:boolean\n  platformPath: string\n  port: number\n  connectionTimeout?: number\n}\n\nexport interface PlatformServer {\n  start(config: PlatformServerConfig): void\n  stop(): Promise<any>\n  clear(): Promise<any>\n  addEventListener(event:string,listener:(...args:any[]) => void): void\n  removeEventListener(event:string,listener?:(...args:any[]) => void): void\n  executeAction(action:LiveActions):Promise<any>\n  isRunning():boolean\n}\n\nexport class PlatformServerImpl implements PlatformServer {\n  private static nextSocketId: number = 0;\n  protected app: any;\n  protected io:any\n  protected http: any\n  protected sockets = {};\n  protected config: PlatformServerConfig\n  protected events:EventEmitter\n  constructor() {\n    this.events = new EventEmitter();\n  }\n\n  public start(config: PlatformServerConfig) {\n    this.initExpressApp(config);\n    this.initHttp(config);\n    this.initSocketIO(config);\n  }\n\n  private initExpressApp(config: PlatformServerConfig): void {\n    Logger.getInstance().info(\"initExpressApp\");\n    allowUnsafeEval(() => {this.app = express()})\n    this.initExpressStaticServe(config);\n    this.initInjectedFileServe(config)\n  }\n\n  protected initExpressStaticServe(config: PlatformServerConfig):void{\n    if(config.serveStaticAssets){\n      this.app.use(express.static(config.platformPath, null));\n    }\n  }\n\n  protected initInjectedFileServe(config: PlatformServerConfig):void{\n    this.app.get('/__dedebugger/**', (req, res) => {\n        var urlRelative = req.url;\n        Logger.getInstance().info(\"require debugger resource: \" + urlRelative);\n\n        //urlRelative = urlRelative.replace('/__dedebugger/', '/injectedfiles/');\n        //res.sendFile(__dirname + urlRelative);\n        urlRelative = urlRelative.replace('/__dedebugger/',\"\");\n        let resPath = DEWBResourceManager.getResourcePath('injectedfiles/');\n        resPath = path.join(resPath,urlRelative);\n        Logger.getInstance().info(\"completePath \",resPath);\n        res.sendFile(resPath);\n    });\n  }\n\n\n  private initHttp(config: PlatformServerConfig):void {\n    this.http = require('http').Server(this.app);\n    this.http.on('connection', (socket) => {\n      // Add a newly connected socket\n      var socketId = PlatformServerImpl.nextSocketId++;\n      this.sockets[socketId] = socket;\n      Logger.consoleLog('socket', socketId, 'opened');\n\n      // Remove the socket when it closes\n      socket.on('close', () => {\n        Logger.consoleLog('socket', socketId, 'closed');\n        delete this.sockets[socketId];\n      });\n\n      socket.setTimeout(config.connectionTimeout || 15000);\n    });\n\n    this.http.listen(config.port, () => {\n      Logger.consoleLog((\"App is running at http://localhost:%d \"), config.port)\n    });\n  }\n\n  private initSocketIO(config: PlatformServerConfig):void {\n    this.io = require('socket.io')(this.http);\n    this.io.on('connection', (socket) => {\n        var address = socket.handshake.address;\n        Logger.getInstance().debug(\"on debugger session connection for \" + address);\n\n        socket.on('disconnect', () => {\n            Logger.getInstance().debug(\"Device disconnected: from \" + address);\n            //this.socketList.splice(this.socketList.indexOf(socket), 1);\n        });\n\n        socket.on('deviceReady', (msg) => { //????\n            Logger.getInstance().debug(\"onDevice Ready: \" + JSON.stringify(msg));\n            socket.deviceInfo = msg;\n        });\n\n        socket.on('close', (socket) => {\n            //socket.destroy();\n            Logger.getInstance().debug(\"socket closed\");\n        });\n\n        socket.on('evalResult',(resultMessage) => {\n           this.events.emit('didJSEvalResultReceived',resultMessage);\n        });\n    });\n  }\n\n  public stop():Promise<any> {\n    return new Promise((resolve,reject) => {\n      if (this.http) {\n        this.http.close(() => {\n          Logger.consoleLog(\"http closed\");\n          this.http = null;\n          resolve();\n        })\n        for (let socketId in this.sockets) {\n          this.sockets[socketId].destroy();\n        }\n        this.sockets = {}\n      }\n      this.io = null;\n      this.app = null;\n    });\n  }\n\n  public async clear() {\n    await this.stop();\n    this.app = null;\n  }\n\n  public executeAction(action:LiveActions):Promise<any> {\n    switch (action.type) {\n      case \"doLiveReload\":\n        this.io.emit(\"doLiveReload\");\n        return Promise.resolve();\n      case \"doEval\":\n        this.io.emit(\"doEval\",{\n          id:action.id,\n          cmd:action.cmd\n        });\n        return Promise.resolve();\n      default:\n        Promise.reject({\n          ERROR_CODE: 'UNKNOWN_ACTION',\n          ERROR_MESSAGE: 'unknown action type' + action.type,\n        })\n    }\n  }\n\n  public isRunning():boolean{\n    return this.http && this.http.listening\n  }\n\n  public addEventListener(event:string,listener:(...args:any[]) => void){\n    this.events.addListener(event,listener);\n  }\n\n  public removeEventListener(event:string,listener?:(...args:any[]) => void){\n    if(listener){\n      this.events.removeListener(event,listener);\n    }else{\n      this.events.removeAllListeners(event)\n    }\n  }\n\n\n  public static createNew():PlatformServer{\n    return new PlatformServerImpl();\n  }\n\n}\n"]}