{"version":3,"file":"ScriptExecutor.js","sourceRoot":"","sources":["../../src/tasks/ScriptExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nconst exec = require('child_process').exec;\nconst spawn = require('child_process').spawn;\nconst kill = require('tree-kill');\nconst path = require(\"path\");\nimport { CommandExecutor } from '../utils/CommandExecutor'\nimport { Logger } from '../logger/Logger'\nimport {forEach} from 'lodash'\n/**\n *\n * Class for run npm scripts\n */\nexport class ScriptExecutor extends CommandExecutor{\n  constructor(){\n    super(null);\n  }\n  async runNpmScript(name:string,basePath:string){\n    let result = await this.runScriptImpl(name,basePath);\n    return result;\n  }\n  async runNpmScripts(names:Array<string>,basePath:string,cliOptions?:any){\n    let lastRes;\n    for(let name of names){\n      lastRes = await this.runNpmScript(name,basePath);\n    }\n    return lastRes;\n  }\n  private async runScriptImpl(name:string,basePath:string, cliOptions?:any){\n    Logger.getInstance().info(\"runScriptImpl...\");\n    //var cmd = \"cordova\";\n    var options = {\n      cwd: basePath,\n      detached: false\n    };\n    let cmd = this.prepareCommand(\"npm\");\n    let args = [\"run\",name];\n    var operationLogTag = \"Run npm scripts\";\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve, reject) => {\n      var operationResult = undefined;\n      this.spawnRef.stdout.on('data', (data) => {\n        Logger.getInstance().debug(`[${operationLogTag} progress]: ${data}`)\n      });\n      this.spawnRef.stderr.on('data', (data) => {\n        Logger.getInstance().error(\"[Run] \" + data.toString())\n        console.error(`[${operationLogTag}]: ${data}`);\n      });\n      this.spawnRef.on('close', (code,signal) => {\n        Logger.consoleLog(`[${operationLogTag}] child process exited with code ${code}`);\n        Logger.getInstance().info(`[${operationLogTag}] child process exited with code ${code} and signal ${signal}`)\n        this.spawnRef = undefined;\n        if (code === 0) {\n          resolve({\n            \"msg\": `${operationLogTag} DONE`,\n          });\n        } else {\n          reject(`${operationLogTag} FAIL`);\n        }\n      });\n    });\n  }\n\n  public stop(){\n    this.stopSpawn();\n  }\n}\n"]}