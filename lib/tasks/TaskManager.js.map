{"version":3,"file":"TaskManager.js","sourceRoot":"","sources":["../../src/tasks/TaskManager.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport { ProjectManager } from '../DEWorkbench/ProjectManager';\nimport { Cordova , CordovaProjectInfo} from '../cordova/Cordova';\nimport { CordovaTaskConfiguration, CordovaCliOptions} from '../cordova/CordovaTasks'\nimport { PlatformServerConfig, LiveActions} from '../services/remote/PlatformServer'\nimport { TaskUtils } from './TaskUtils'\nimport { Logger }  from '../logger/Logger'\nimport { ScriptExecutor } from './ScriptExecutor'\nimport { CordovaDevice } from '../cordova/CordovaDeviceManager'\nimport { RuntimeSessionHandler } from '../services/remote/RuntimeSessionHandler'\n\nexport interface LiveReloadContext {\n  runTask?:CordovaTaskConfiguration;\n  project?:CordovaProjectInfo\n  cliOptions?: CordovaCliOptions\n}\n\n\n\nexport class TaskManager{\n  private currentTask:CordovaTaskConfiguration;\n  private project:CordovaProjectInfo\n  private runtimeSessionHandler:RuntimeSessionHandler\n  private scriptExecutor:ScriptExecutor = null;\n  private cordova:Cordova\n\n  private reloadContext:LiveReloadContext = {}\n  constructor(){\n      this.cordova=ProjectManager.getInstance().cordova;\n  }\n  public async executeTask(taskConfig:CordovaTaskConfiguration,project:CordovaProjectInfo):Promise<any>{\n    if(this.isBusy()){\n      throw new Error(\"TaskManager is busy\");\n    }\n    let cliOptions = TaskUtils.createCliOptions(taskConfig);\n    Logger.getInstance().info(\"cliOptions:\",JSON.stringify(cliOptions));\n    await this.scheduleNodeScripts(taskConfig,project,cliOptions);\n    this.currentTask = taskConfig;\n    this.project = project;\n    Logger.getInstance().debug('schedule node tasks');\n    try{\n      switch(this.currentTask.taskType){\n        case \"prepare\":\n            await this.executePrepare(project,cliOptions);\n            this.currentTask = null;\n        break;\n        case \"build\":\n            await this.executeBuild(project,cliOptions);\n            this.currentTask = null\n        break;\n        case \"run\":\n            await this.executeRun(project,cliOptions);\n            this.currentTask = null\n        break;\n        case \"buildRun\":\n            await this.executeBuild(project,cliOptions);\n            await this.executeRun(project,cliOptions)\n            this.currentTask = null\n        break;\n      }\n    }catch(err){\n      this.currentTask = null;\n      throw err;\n    }\n  }\n  public async executeTaskChain(taskChain:Array<CordovaTaskConfiguration>,project:CordovaProjectInfo){\n    for(let task of taskChain){\n      await this.executeTask(task,project);\n    }\n  }\n  isBusy():boolean{\n    return this.currentTask != null;\n  }\n  async executeBuild(project:CordovaProjectInfo,cliOptions: CordovaCliOptions){\n    let platform= this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    return this.cordova.buildProject(project.path, platform ,cliOptions);\n  }\n\n  async executeRun(project:CordovaProjectInfo,cliOptions: CordovaCliOptions){\n    await this.startPlatformServer(project);\n\n    this.reloadContext.cliOptions = cliOptions;\n    this.reloadContext.project = project;\n    this.reloadContext.runTask = this.currentTask;\n\n    let platform = this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    this.applyPlatformSpecificFlags(platform,cliOptions);\n    let target:string =  this.currentTask.device ? this.currentTask.device.targetId : null;\n    return this.cordova.runProject(project.path, platform ,target,cliOptions);\n  }\n\n  applyPlatformSpecificFlags(platform:string,cliOptions: CordovaCliOptions){\n    if(platform === 'browser'){\n      cliOptions.flags ? cliOptions.flags.push('--noprepare'): ['--noprepare'];\n      cliOptions.flags.push('--port=' + parseInt(atom.config.get('de-workbench.BrowserEmulationPort')));\n    }\n  }\n\n  async executePrepare(project:CordovaProjectInfo,cliOptions: CordovaCliOptions){\n    let platform = this.currentTask.selectedPlatform ?this.currentTask.selectedPlatform.name : null;\n    return this.cordova.prepareProject(project.path,platform,cliOptions);\n  }\n\n  private async startPlatformServer(project:CordovaProjectInfo){\n    let platform = this.currentTask.selectedPlatform;\n    if(!platform){\n      Logger.getInstance().warn(\"No platform detected: server not started\");\n      return Promise.resolve();\n    }\n    if(this.isPlatformServerRunning()){\n      Logger.getInstance().warn(\"Platform server already started\");\n      return Promise.resolve();\n    }\n    Logger.getInstance().info(`Platform Server for ${platform} starting`);\n    const srvConf:PlatformServerConfig = TaskUtils.createPlatformServerConfig(this.currentTask,project);\n    if(!srvConf){\n      Logger.getInstance().error(\"Server configuration build fail\");\n      return Promise.resolve();\n    }\n    await this.cordova.prepareProjectWithBrowserPatch(project.path,platform.name);\n    this.runtimeSessionHandler = RuntimeSessionHandler.createRuntimeSession(srvConf);\n  }\n\n  stopServer(){\n    if(this.runtimeSessionHandler){\n      this.runtimeSessionHandler.stopServer().then(() => {\n          Logger.getInstance().info(\"Server stop done\");\n          this.reloadContext = {};\n      },() => {\n        Logger.getInstance().error(\"Server stop fail\");\n      });\n    }\n  }\n\n  stop(){\n    if(this.scriptExecutor){\n      this.scriptExecutor.stop();\n    }\n    this.cordova.stopExecutor();\n    this.stopServer();\n  }\n\n  isPlatformServerRunning():boolean{\n    return this.runtimeSessionHandler && this.runtimeSessionHandler.isPlatformServerRunning();\n  }\n\n  /**\n   * Async action execution\n   * @param  {LiveActions} action runtime action to execute\n   */\n  public async sendAction(action:LiveActions) {\n    if(this.isPlatformServerRunning()){\n      Logger.getInstance().debug(\"sendAction \",action.type);\n      await this.execActionTask(action);\n      await this.runtimeSessionHandler.sendAction(action);\n      return Promise.resolve();\n    }\n    return Promise.resolve();\n  }\n\n  private async execActionTask(action:LiveActions){\n    await this.scheduleNodeScripts(this.reloadContext.runTask,this.reloadContext.project,this.reloadContext.cliOptions);\n    if(action.type == \"doLiveReload\"){\n      let platform = this.reloadContext.runTask.selectedPlatform ? this.reloadContext.runTask.selectedPlatform.name : null;\n      await this.cordova.prepareProjectWithBrowserPatch(this.reloadContext.project.path,platform,this.reloadContext.cliOptions);\n    }\n    return Promise.resolve();\n  }\n\n\n  private async scheduleNodeScripts(taskConfig:CordovaTaskConfiguration,project:CordovaProjectInfo,cliOptions: CordovaCliOptions){\n    if(!taskConfig.nodeTasks || !(taskConfig.nodeTasks.length > 0)){\n      Logger.getInstance().debug('No script defined');\n      return Promise.resolve();\n    }\n    Logger.getInstance().debug('Begin npm script run');\n    this.scriptExecutor = new ScriptExecutor();\n    let res= await this.scriptExecutor.runNpmScripts(taskConfig.nodeTasks,project.path);\n    Logger.getInstance().debug('End npm script run');\n    return res;\n  }\n\n  public getRuntimeSessionHandler():RuntimeSessionHandler{\n    return this.runtimeSessionHandler;\n  }\n\n}\n"]}