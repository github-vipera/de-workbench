{"version":3,"file":"TaskProvider.js","sourceRoot":"","sources":["../../src/tasks/TaskProvider.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport {CordovaTaskConfiguration} from '../cordova/CordovaTasks';\nimport {cloneDeep,forEach} from 'lodash'\nimport {ProjectManager} from '../DEWorkbench/ProjectManager'\nimport {ProjectSettings} from '../DEWorkbench/ProjectSettings'\nimport { Logger } from '../logger/Logger'\n\nconst CORDOVA_TASK_LIST_KEY:string = 'cdvTaskList';\n\nexport class TaskProvider{\n  private static instance:TaskProvider;\n  private defaultTasks:Array<CordovaTaskConfiguration>= null;\n  private constructor(){\n    Logger.consoleLog(\"Create TaskProvider\");\n  }\n\n  public static getInstance():TaskProvider{\n    if(!TaskProvider.instance){\n      TaskProvider.instance = new TaskProvider();\n    }\n    return TaskProvider.instance;\n  }\n\n  public getDefaultTask(){\n    if(this.defaultTasks == null){\n      this.defaultTasks = this.createDefaultTasks();\n    }\n    return this.defaultTasks;\n  }\n\n  createDefaultTasks():Array<CordovaTaskConfiguration>{\n    let cdvPrepare = new CordovaTaskConfiguration('CordovaPrepare','prepare');\n    cdvPrepare.displayName='Prepare';\n    cdvPrepare.constraints = {\n      isDeviceEnabled:false,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isVariantEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvBuild= new CordovaTaskConfiguration('CordovaBuid','build');\n    cdvBuild.displayName='Build';\n    cdvBuild.constraints = {\n      isDeviceEnabled:false,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isVariantEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvRun = new CordovaTaskConfiguration('CordovaRun','run');\n    cdvRun.displayName='Run';\n    cdvRun.constraints = {\n      isDeviceEnabled:true,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isVariantEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let cdvBuildAndRun = new CordovaTaskConfiguration('CordovaBuidRun','buildRun');\n    cdvBuildAndRun.displayName='Build & Run';\n    cdvBuildAndRun.constraints = {\n      isDeviceEnabled:true,\n      isMockConfigEnabled:false,\n      isEnvVarEnabled:true,\n      isVariantEnabled:true,\n      isNodeTaskEnabled:true\n    }\n    let tasks:Array<CordovaTaskConfiguration> = [cdvPrepare, cdvBuild, cdvRun, cdvBuildAndRun];\n    return tasks;\n  }\n\n  public async loadTasksForProject(projectPath:string):Promise<Array<CordovaTaskConfiguration>>{\n    Logger.consoleLog('loadTasksForProject');\n    let defaultTasks = this.getDefaultTask();\n    if(!projectPath){\n      return defaultTasks;\n    }\n    let setting:ProjectSettings = undefined\n    try{\n      setting = await ProjectManager.getInstance().getProjectSettings(projectPath);\n    }catch(ex){\n      console.error(ex);\n    }\n    if(!setting){\n      return defaultTasks;\n    }\n    let savedTasks = setting.get('cdvTaskList');\n    Logger.consoleLog(\"savedTasks\",savedTasks);\n    if(!savedTasks){\n      return defaultTasks;\n    }\n    let parsedResult:Array<CordovaTaskConfiguration> = [];\n    forEach(savedTasks,(item) => {\n      parsedResult.push(CordovaTaskConfiguration.fromJSON(item));\n    });\n    Logger.consoleLog(\"parsedResult:\",savedTasks);\n    return parsedResult;\n  }\n\n  public async storeTasks(cdvTaskList:Array<CordovaTaskConfiguration>,projectPath:string){\n    let setting:ProjectSettings = await ProjectManager.getInstance().getProjectSettings(projectPath);\n    setting.save(CORDOVA_TASK_LIST_KEY,cdvTaskList);\n  }\n\n\n  /*public getTasksPromise(projectPath:string):Promise<Array<CordovaTaskConfiguration>>{\n    return new Promise<Array<CordovaTaskConfiguration>>((resolve,reject) => {\n      let defaultTasks = this.getDefaultTask();\n      ProjectManager.getInstance().getProjectSettings(projectPath).then((setting) => {\n        let savedTasks = setting.get('cdvTaskList');\n        Logger.consoleLog(\"savedTasks\",savedTasks);\n        if(!savedTasks){\n          return defaultTasks;\n        }\n        let parsedResult:Array<CordovaTaskConfiguration> = [];\n        forEach(savedTasks,(item) => {\n          parsedResult.push(CordovaTaskConfiguration.fromJSON(item));\n        });\n        Logger.consoleLog(\"parsedResult:\",savedTasks);\n        return parsedResult;\n      },(err) => {\n        resolve(defaultTasks);\n      }).catch((ex) => {\n        resolve(defaultTasks);\n      });\n    });\n\n  }*/\n}\n"]}