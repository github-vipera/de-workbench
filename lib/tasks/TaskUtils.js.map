{"version":3,"file":"TaskUtils.js","sourceRoot":"","sources":["../../src/tasks/TaskUtils.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\nimport {ProjectManager} from '../DEWorkbench/ProjectManager'\nimport {Cordova, CordovaPlatform, CordovaProjectInfo} from '../cordova/Cordova'\nimport {PlatformServerConfig} from '../services/remote/PlatformServer'\nimport {CordovaTaskConfiguration, CordovaCliOptions} from '../cordova/CordovaTasks';\nimport {CordovaUtils} from '../cordova/CordovaUtils';\nimport {Logger} from '../logger/Logger';\nimport {findIndex, forEach} from 'lodash'\nconst CORDOVA_BUILD_VARIANT:string = 'CORDOVA_BUILD_VARIANT';\n\nexport class TaskUtils {\n  private constructor(){}\n  public static createPlatformServerConfig(taskConfig:CordovaTaskConfiguration,project:CordovaProjectInfo):PlatformServerConfig{\n    let selectedPlatform:CordovaPlatform = taskConfig.selectedPlatform;\n    if(!selectedPlatform){\n      Logger.getInstance().warn('Platform is not defined: starting of server suspended');\n      return null;\n    }\n    let cordova:Cordova = ProjectManager.getInstance().cordova;\n    let platformPath = cordova.getPlatformPath(project.path,selectedPlatform.name);\n    let serveStaticAssets:boolean = true;\n    if(!platformPath){\n      Logger.getInstance().warn('PlatformPath is not defined: force disable publish of static assets');\n      serveStaticAssets = false;\n    }\n    return {\n      serveStaticAssets:serveStaticAssets,\n      platformPath: platformPath,\n      port: TaskUtils.getPlatformServerPort(selectedPlatform.name)\n    }\n  }\n\n  public static getPlatformServerPort(platform:string):number{\n      //TODO read from config\n      if(platform === 'android'){\n        return parseInt(atom.config.get('de-workbench.AndroidWSPort'));\n      }\n      else if(platform === 'ios'){\n        return parseInt(atom.config.get('de-workbench.iOSWSPort'));\n      }\n      else if(platform === 'browser'){\n        return parseInt(atom.config.get('de-workbench.BrowserWSPort'));\n      }\n  }\n\n  public static createUniqueTaskName(tasks:Array<CordovaTaskConfiguration>,baseName?:string):string {\n    let prefix:string = baseName ? baseName + \"_Clone\":\"Clone\";\n    let cname:string;\n    let suffix:number = 0;\n    do{\n      suffix++;\n      cname = `${prefix}_${suffix}`;\n    }while(findIndex(tasks,(item) => {\n          return item.name == cname;\n        }) > 0);\n\n    return cname;\n  }\n\n  public static createCliOptions(taskConfig:CordovaTaskConfiguration):CordovaCliOptions{\n    if(!taskConfig){\n      return null;\n    }\n    let cliParamsList:Array<string> = taskConfig.cliParams || [];\n    let envVariables:Array<{name:string,value:string}> = taskConfig.envVariables || [];\n    let cliOptions:CordovaCliOptions = {\n      flags:[],\n      envVariables:[]\n    }\n    forEach(cliParamsList, (single) => {\n      cliOptions.flags.push(single);\n    });\n    forEach(envVariables,(single:{name:string,value:string}) => {\n      cliOptions.envVariables.push(single);\n    });\n    if(taskConfig.variantName){\n      cliOptions.envVariables.push({name:CORDOVA_BUILD_VARIANT, value:taskConfig.variantName})\n    }\n    return cliOptions;\n  }\n\n\n\n}\n"]}