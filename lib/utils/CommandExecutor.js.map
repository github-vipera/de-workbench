{"version":3,"file":"CommandExecutor.js","sourceRoot":"","sources":["../../src/utils/CommandExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\nconst exec = require('child_process').exec;\nconst spawn = require('child_process').spawn;\nconst kill = require('tree-kill');\nconst fse = require('fs-extra');\nimport { Logger } from '../logger/Logger'\n\nexport class CommandExecutor {\n\n  protected isWin: boolean;\n  protected basePath: string;\n  protected spawnRef: any;\n\n  constructor(path: string) {\n    Logger.getInstance().debug(\"Creating CommandExecutor...\");\n    this.basePath = path;// != undefined ? path : atom.project[\"getPaths\"]()[0];\n    this.isWin = /^win/.test(process.platform);\n  }\n\n  prepareCommand(cmd: string) {\n    if (this.isWin) {\n      cmd = cmd + \".cmd\";\n    }\n    return cmd;\n  }\n\n  getCmdOptions(path?:string,env?:any):any{\n    let cmdOptions:any = {\n        cwd: path || this.basePath,\n        detached:false\n    };\n    if(env){\n      cmdOptions.env = env;\n    }\n    return cmdOptions;\n  }\n\n  isBusy(): boolean {\n    return this.spawnRef != undefined;\n  }\n\n  stopSpawn() {\n    Logger.getInstance().debug(\"stop run Spawn\")\n    if (!this.spawnRef) {\n      return;\n    }\n    kill(this.spawnRef.pid);\n  }\n\n  runExec(cmd: string): Promise<any> {\n    Logger.getInstance().info(\"execOperationWithExec cmd:\", cmd);\n    return new Promise((resolve, reject) => {\n      let options = this.getCmdOptions();\n      exec(cmd, options, (error, stdout, stderr) => {\n        if (error) {\n          Logger.getInstance().error(\"execOperationWithExec error: \", error);\n          reject(error);\n          return;\n        }\n        Logger.getInstance().debug(\"exec prepare done\");\n        resolve(stdout);\n      });\n    });\n  }\n\n  runSpawn(command:string, args:any, operationLogTag:any, withResult:any):Promise<any> {\n    Logger.getInstance().info(\"execOperationWithSpawn args:\", args);\n    //var cmd = \"cordova\";\n    var options = {\n      cwd: this.basePath,\n      detached: false\n    };\n    let cmd = this.prepareCommand(command);\n    this.spawnRef = spawn(cmd, args, options);\n    return new Promise((resolve, reject) => {\n      var operationResult = undefined;\n      this.spawnRef.stdout.on('data', (data) => {\n        if (withResult && data && data.toString() != \"\\n\") {\n          operationResult = data.toString();\n        }\n        Logger.getInstance().debug(`[${operationLogTag} progress]: ${data}`)\n        Logger.consoleLog(`[${operationLogTag} progress]: ${data}`);\n      });\n\n      this.spawnRef.stderr.on('data', (data) => {\n        Logger.getInstance().error(\"[Run] \" + data.toString())\n        console.error(`[${operationLogTag}]: ${data}`);\n      });\n\n      this.spawnRef.on('close', (code) => {\n        Logger.consoleLog(`[${operationLogTag}] child process exited with code ${code}`);\n        Logger.getInstance().info(`[${operationLogTag}] child process exited with code ${code}`)\n        this.spawnRef = undefined;\n        if (code === 0) {\n          resolve({\n            \"msg\": `${operationLogTag} DONE`,\n            \"operationResult\": operationResult\n          });\n        } else {\n          reject(`${operationLogTag} FAIL`);\n        }\n      });\n    });\n  }\n\n\n\n}\n"]}