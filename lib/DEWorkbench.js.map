{"version":3,"file":"DEWorkbench.js","sourceRoot":"","sources":["../src/DEWorkbench.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n/*!\n * Dynamic Engine Workbench\n * Copyright(c) 2017 Dynamic Engine Team @ Vipera Plc\n * MIT Licensed\n */\n\n import { ToolbarView } from './toolbar/ToolbarView'\n import { NewProjectView } from './views/NewProjectView'\n import { EventEmitter }  from 'events';\n const { CompositeDisposable } = require('atom');\n import { ProjectInspectorView } from './views/ProjectInspectorView'\n import { DebugAreaView }from './views/DebugAreaView'\n import { CordovaUtils } from './cordova/CordovaUtils'\n import { ProjectManager } from './DEWorkbench/ProjectManager'\n import { Logger } from './logger/Logger'\n\n import {\n   createText,\n   createElement,\n   insertElement,\n   createGroupButtons,\n   createButton,\n   createIcon,\n   createIconFromPath,\n   attachEventFromObject\n } from './element/index';\n\n export interface WorkbenchOptions {\n   didToggleToolbar?: Function,\n   didTogglePrjInspector?: Function,\n   didToggleDebugArea?:Function\n}\n\n\n export class DEWorkbench {\n\n   public toolbarView: ToolbarView\n   public newProjectView: NewProjectView\n   public projectInspectorView: ProjectInspectorView\n   public debugAreaView: DebugAreaView\n   private events: EventEmitter;\n   public projectManager: ProjectManager;\n\n   constructor(options:WorkbenchOptions){\n     Logger.getInstance().info(\"Initializing DEWorkbench...\");\n\n     let cu = new CordovaUtils();\n\n     this.projectManager = ProjectManager.getInstance();\n\n     this.events = new EventEmitter();\n\n     // Create the main toolbar\n     this.toolbarView = new ToolbarView({\n       didNewProject: () => {\n         this.newProjectView.open();\n      },\n      didToggleToolbar: () => {\n          this.toggleToolbar();\n      },\n      didTogglePrjInspector: () => {\n        this.togglePrjInspector();\n      },\n      didToggleDebugArea: () => {\n        this.toggleDebugArea();\n      }\n     });\n\n     // Create the New Project modal window\n     this.newProjectView = new NewProjectView();\n\n     // Create a prject inspector dock window\n     this.projectInspectorView = new ProjectInspectorView();\n\n     this.debugAreaView = new DebugAreaView();\n\n     attachEventFromObject(this.events, [\n       'didToggleToolbar'\n     ], options);\n\n     ProjectManager.getInstance().didProjectChanged((projectPath)=>this.onProjectChanged(projectPath));\n\n     Logger.getInstance().info(\"DEWorkbench initialized successfully.\");\n   }\n\n   onProjectChanged(projectPath:String){\n     Logger.getInstance().debug(\"DEWorkbench onProjectChanged: \", projectPath);\n     //console.log(\"DEWorkbench onProjectChanged: \" , projectPath)\n   }\n\n   openProjectInspector(){\n     this.projectInspectorView.open();\n   }\n\n   openDebugArea(){\n     this.debugAreaView.open();\n   }\n\n   toggleToolbar() {\n     this.events.emit('didToggleToolbar');\n   }\n\n   togglePrjInspector(){\n     Logger.getInstance().debug(\"DEWorkbench togglePrjInspector called\");\n     this.events.emit('didTogglePrjInspector');\n     this.openProjectInspector();\n   }\n\n   toggleDebugArea(){\n     Logger.getInstance().debug(\"DEWorkbench toggleDebugArea called\");\n     this.events.emit('didToggleDebugArea');\n     this.openDebugArea();\n   }\n\n   getToolbarElement() {\n       return this.toolbarView.getElement();\n   }\n\n   destroy () {\n     // destroy all\n     Logger.getInstance().info(\"DEWorkbench destroying...\");\n   }\n\n}\n"]}